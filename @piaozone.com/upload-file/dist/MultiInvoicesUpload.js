(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["MultiInvoicesUpload"] = factory();
	else
		root["MultiInvoicesUpload"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var processUtils = __webpack_require__(2);

var OperateCanvas = __webpack_require__(3)["default"];

var _require = __webpack_require__(4),
    compressImgFile = _require.compressImgFile;

module.exports = {
  adjustSize: processUtils.adjustSize,
  loadImage: processUtils.loadImage,
  base64ToFile: processUtils.base64ToFile,
  normalize: processUtils.normalize,
  getRotateRect: processUtils.getRotateRect,
  cuteImage: processUtils.cuteImage,
  markImage: processUtils.markImage,
  sortByRegion: processUtils.sortByRegion,
  OperateCanvas: OperateCanvas,
  compressImgFile: compressImgFile
};

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "adjustSize", function() { return adjustSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadImage", function() { return loadImage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "base64ToFile", function() { return base64ToFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRotateRect", function() { return getRotateRect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cuteImage", function() { return cuteImage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sortByRegion", function() { return sortByRegion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "adjuestRect", function() { return adjuestRect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "showImage", function() { return showImage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "markImage", function() { return markImage; });
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// 等比例换算图像长宽
function adjustSize(width, height, maxWidth, maxHeight) {
  var tempRateW = parseFloat(maxWidth / width);
  var tempRateH = parseFloat(maxHeight / height);
  var rate = parseFloat(width / height);

  if (width > maxWidth || height > maxHeight) {
    if (tempRateW < tempRateH) {
      width = maxWidth;
      height = Math.floor(width / rate);
    } else {
      height = maxHeight;
      width = height * rate;
    }
  }

  return {
    width: width,
    height: height,
    rate: rate
  };
}
function loadImage(imgSrc) {
  return new Promise(function (resolve) {
    var img = new Image();
    img.onload =
    /*#__PURE__*/
    _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              resolve({
                errcode: '0000',
                data: {
                  imgObj: img,
                  width: img.width,
                  height: img.height
                }
              });

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    img.onerror = function () {
      resolve({
        errcode: '2000',
        description: '加载图像失败'
      });
    };

    img.src = imgSrc;
  });
}
function base64ToFile(baseStr) {
  var filename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  filename = filename || 'temp_' + +new Date() + '_' + Math.random().toString().replace(/0\./, '') + '.jpg';
  var arr = baseStr.split(',');
  var mime = arr[0].match(/:(.*?);/)[1];
  var suffix = mime.split('/')[1];
  var bstr = atob(arr[1]);
  var n = bstr.length;
  var u8arr = new Uint8Array(n);

  while (n--) {
    u8arr[n] = bstr.charCodeAt(n);
  }

  filename = filename.split('.')[0];

  if (window.File && typeof window.File === 'function') {
    var newFile = new File([u8arr], "".concat(filename, ".").concat(suffix), {
      type: mime
    });
    return {
      errcode: '0000',
      data: newFile
    };
  } else {
    try {
      var theBlob = new Blob([u8arr], {
        type: mime
      });
      theBlob.lastModifiedDate = new Date();
      theBlob.name = "".concat(filename, ".").concat(suffix);
      return {
        errcode: '0000',
        data: theBlob
      };
    } catch (error) {
      console.error(error);
      return {
        errcode: '90002',
        description: 'base64转换为图片异常，请检查图片是否正常'
      };
    }
  }
}
function normalize(_x) {
  return _normalize.apply(this, arguments);
}

function _normalize() {
  _normalize = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(file) {
    var opt,
        localUrl,
        res,
        _opt$maxWidth,
        maxWidth,
        _opt$maxHeight,
        maxHeight,
        _opt$quality,
        quality,
        _opt$toType,
        toType,
        _opt$filename,
        filename,
        _res$data,
        width,
        height,
        imgObj,
        newSize,
        imageWidth,
        imageHeight,
        base64Result,
        canvas,
        context,
        resFile,
        _args2 = arguments;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            opt = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
            localUrl = URL.createObjectURL(file);
            _context2.next = 4;
            return loadImage(localUrl);

          case 4:
            res = _context2.sent;

            if (!(res.errcode !== '0000')) {
              _context2.next = 7;
              break;
            }

            return _context2.abrupt("return", res);

          case 7:
            _opt$maxWidth = opt.maxWidth, maxWidth = _opt$maxWidth === void 0 ? 1920 : _opt$maxWidth, _opt$maxHeight = opt.maxHeight, maxHeight = _opt$maxHeight === void 0 ? 1080 : _opt$maxHeight, _opt$quality = opt.quality, quality = _opt$quality === void 0 ? 0.95 : _opt$quality, _opt$toType = opt.toType, toType = _opt$toType === void 0 ? 'base64' : _opt$toType, _opt$filename = opt.filename, filename = _opt$filename === void 0 ? '' : _opt$filename;
            _res$data = res.data, width = _res$data.width, height = _res$data.height, imgObj = _res$data.imgObj;
            newSize = adjustSize(width, height, maxWidth, maxHeight);
            imageWidth = newSize.width;
            imageHeight = newSize.height;
            base64Result = '';
            _context2.prev = 13;
            canvas = document.createElement('canvas');
            canvas.width = imageWidth;
            canvas.height = imageHeight;
            context = canvas.getContext('2d');
            context.clearRect(0, 0, imageWidth, imageHeight);
            context.drawImage(imgObj, 0, 0, imageWidth, imageHeight);
            base64Result = canvas.toDataURL('image/jpeg', quality);

            if (!(toType === 'base64')) {
              _context2.next = 23;
              break;
            }

            return _context2.abrupt("return", {
              errcode: '0000',
              data: {
                imageWidth: imageWidth,
                imageHeight: imageHeight,
                base64: base64Result
              }
            });

          case 23:
            _context2.next = 29;
            break;

          case 25:
            _context2.prev = 25;
            _context2.t0 = _context2["catch"](13);
            console.error(_context2.t0);
            return _context2.abrupt("return", {
              errcode: '90001',
              description: '图片转换异常, 请检查图片是否正常'
            });

          case 29:
            _context2.next = 31;
            return base64ToFile(base64Result, filename);

          case 31:
            resFile = _context2.sent;

            if (!(resFile.errcode !== '0000')) {
              _context2.next = 34;
              break;
            }

            return _context2.abrupt("return", resFile);

          case 34:
            return _context2.abrupt("return", {
              errcode: '0000',
              data: {
                imageWidth: imageWidth,
                imageHeight: imageHeight,
                file: resFile.data
              }
            });

          case 35:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[13, 25]]);
  }));
  return _normalize.apply(this, arguments);
}

; // 获取图像旋转任意角度后, 在指定区域显示的大小, emptyPix为留白区域大小

function getRotateRect(deg, imgWidth, imgHeight, maxWidth, maxHeight) {
  var emptyPix = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 10;
  var minWidth = arguments.length > 6 ? arguments[6] : undefined;
  var minHeight = arguments.length > 7 ? arguments[7] : undefined;
  var pi = parseFloat(Math.PI / 180);
  var cos = Math.cos;
  var sin = Math.sin;
  var rate = parseFloat(imgWidth / imgHeight);
  deg = Math.abs(deg);
  deg = deg % 360;
  var maxRw = maxWidth - emptyPix;
  var maxRh = maxHeight - emptyPix;
  var rw = imgWidth;
  var rh = imgHeight;

  if (deg === 0 || deg === 180) {
    maxRw = maxWidth;
    maxRh = maxHeight;
  } else if (deg === 90 || deg === 270) {
    maxRw = maxHeight;
    maxRh = maxWidth;
  } else if (deg > 0 && deg < 90 || deg > 180 && deg < 270) {
    maxRw = maxWidth * cos(deg * pi) + maxHeight * sin(deg * pi);
    maxRh = maxHeight * cos(deg * pi) + maxWidth * sin(deg * pi);
  } else if (deg > 90 && deg < 180 || deg > 270 && deg < 360) {
    maxRw = maxHeight * cos(deg * pi) + maxWidth * sin(deg * pi);
    maxRh = maxWidth * cos(deg * pi) + maxHeight * sin(deg * pi);
  }

  if (minWidth && minHeight && (imgWidth < minWidth || imgHeight < minHeight)) {
    if (imgHeight < minHeight) {
      rh = minHeight;
      rw = rate * rh;
    } else {
      rw = minWidth;
      rh = rw / rate;
    }
  }

  if (rw > maxRw || rh > maxRh) {
    if (rw > rh) {
      rh = maxRh;
      rw = rate * rh;
    } else {
      rw = maxRw;
      rh = rw / rate;
    }

    if (rw > maxRw) {
      rw = maxRw;
      rh = rw / rate;
    } else if (rh > maxRh) {
      rh = maxRh;
      rw = rh * rate;
    }
  }

  return {
    rw: rw,
    rh: rh
  };
} // 图像裁剪

function cuteImage(_x2, _x3) {
  return _cuteImage.apply(this, arguments);
} // 根据裁剪区域坐标排序

function _cuteImage() {
  _cuteImage = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(imgObj, _ref2) {
    var _ref2$pixel, pixel, _ref2$region, region, _ref2$maxWidth, maxWidth, _ref2$maxHeight, maxHeight, imgWidth, imgHeight, sx, sy, sw, sh, pixelArr, originWidth, originHeight, wRate, hRate, regionArr, rate, rw, rh, canvas, ctx, maxRw, maxRh;

    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _ref2$pixel = _ref2.pixel, pixel = _ref2$pixel === void 0 ? '' : _ref2$pixel, _ref2$region = _ref2.region, region = _ref2$region === void 0 ? '' : _ref2$region, _ref2$maxWidth = _ref2.maxWidth, maxWidth = _ref2$maxWidth === void 0 ? 1920 : _ref2$maxWidth, _ref2$maxHeight = _ref2.maxHeight, maxHeight = _ref2$maxHeight === void 0 ? 1080 : _ref2$maxHeight;

            if (!(region === '')) {
              _context3.next = 3;
              break;
            }

            return _context3.abrupt("return", {
              errcode: '0000',
              data: imgObj
            });

          case 3:
            imgWidth = imgObj.width;
            imgHeight = imgObj.height;

            if (region && pixel) {
              pixelArr = pixel.split(',');
              originWidth = parseInt(pixelArr[0]);
              originHeight = parseInt(pixelArr[1]);

              if (imgWidth > imgHeight && originWidth < originHeight || imgWidth < imgHeight && originWidth > originHeight) {
                originWidth = parseInt(pixelArr[1]);
                originHeight = parseInt(pixelArr[0]);
              }

              wRate = parseFloat(imgWidth / originWidth);
              hRate = parseFloat(imgHeight / originHeight); // eslint-disable-next-line

              regionArr = region.replace(/[\[\]]/g, '').split(',');
              sx = parseInt(regionArr[0]) * wRate;
              sy = parseInt(regionArr[1]) * hRate;
              sw = parseInt(regionArr[2]) * wRate - sx;
              sh = parseInt(regionArr[3]) * hRate - sy;
            } else {
              sx = 0;
              sy = 0;
              sw = imgWidth;
              sh = imgHeight;
            }

            rate = parseFloat(sw / sh);
            rw = sw;
            rh = sh;
            canvas = document.createElement('canvas');

            if (!(typeof canvas.getContext !== 'function')) {
              _context3.next = 12;
              break;
            }

            return _context3.abrupt("return", {
              errcode: 'unsport',
              description: '浏览器不支持canvas'
            });

          case 12:
            maxWidth = sw > 1920 ? 1920 : sw;
            maxHeight = sh > 1080 ? 1080 : sh;
            canvas.width = maxWidth;
            canvas.height = maxHeight;
            ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, maxWidth, maxHeight);
            maxRw = maxWidth;
            maxRh = maxHeight;
            ctx.save();
            ctx.translate(maxWidth / 2, maxHeight / 2);

            if (rw > rh) {
              rh = maxRh;
              rw = rate * rh;
            } else {
              rw = maxRw;
              rh = rw / rate;
            }

            if (rw > maxRw) {
              rw = maxRw;
              rh = rw / rate;
            } else if (rh > maxRh) {
              rh = maxRh;
              rw = rh * rate;
            }

            ctx.translate(-rw / 2, -rh / 2);
            ctx.drawImage(imgObj, sx, sy, sw, sh, 0, 0, rw, rh);
            ctx.restore();
            return _context3.abrupt("return", {
              errcode: '0000',
              description: 'success',
              data: canvas
            });

          case 28:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _cuteImage.apply(this, arguments);
}

function sortByRegion(dataArr) {
  if (dataArr.length <= 1) {
    return dataArr;
  } else {
    for (var i = 0; i < dataArr.length - 1; i++) {
      for (var j = 0; j < dataArr.length - i - 1; j++) {
        var preData = dataArr[j];
        var nextData = dataArr[j + 1];
        var nextRegion = nextData.region || '';
        nextRegion = nextRegion.replace(/[[\]]/g, '').split(',');
        var nextRectX = parseInt(nextRegion[0]);
        var nextRectY = parseInt(nextRegion[1]);
        var preRegion = preData.region || '';
        preRegion = preRegion.replace(/[[\]]/g, '').split(',');
        var preRectX = parseInt(preRegion[0]);
        var preRectY = parseInt(preRegion[1]);
        var deltaX = nextRectX - preRectX;
        var deltaY = nextRectY - preRectY;
        var exchange = false;

        if (deltaX < 0 && deltaY < 0) {
          exchange = true;
        } else if (deltaX < 0) {
          if (deltaY + deltaX > 0) {
            exchange = false;
          } else {
            exchange = true;
          }
        } else if (deltaY < 0) {
          if (deltaY + deltaX > 50) {
            exchange = false;
          } else {
            exchange = true;
          }
        }

        if (exchange) {
          var temp = _objectSpread({}, nextData);

          dataArr[j + 1] = _objectSpread({}, preData);
          dataArr[j] = temp;
        }
      }
    }

    return dataArr;
  }
} // 区域重叠，重新调整

function adjuestRect() {
  var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var dataArr = _toConsumableArray(list);

  for (var i = 0; i < dataArr.length; i++) {
    var adjustData = dataArr[i];
    var adjustRegion = adjustData.region || '';
    adjustRegion = adjustRegion.replace(/[[\]]/g, '').split(',');
    var adjustLeftX = parseInt(adjustRegion[0]);
    var adjustLeftY = parseInt(adjustRegion[1]);
    var adjustRightX = parseInt(adjustRegion[2]);
    var adjustRightY = parseInt(adjustRegion[3]); //初始化最终修正的结果

    for (var j = 0; j < dataArr.length; j++) {
      if (j <= i) {
        continue;
      }

      var diffData = dataArr[j];
      var diffRegion = diffData.region || '';
      diffRegion = diffRegion.replace(/[[\]]/g, '').split(',');
      var diffLeftX = parseInt(diffRegion[0]);
      var diffLeftY = parseInt(diffRegion[1]);
      var diffRightX = parseInt(diffRegion[2]);
      var diffRightY = parseInt(diffRegion[3]); // 完全没有相交的区域

      if (adjustRightX < diffLeftX || adjustRightY < diffLeftY) {
        continue;
      }

      var w1 = Math.abs((adjustRightX > diffRightX ? adjustRightX : diffRightX) - (adjustLeftX < diffLeftX ? adjustLeftX : diffLeftX));
      var w2 = Math.abs(adjustRightX - adjustLeftX) + Math.abs(diffRightX - diffLeftX);
      var h1 = Math.abs((adjustRightY > diffRightY ? adjustRightY : diffRightY) - (diffLeftY < adjustLeftY ? diffLeftY : adjustLeftY));
      var h2 = Math.abs(adjustRightY - adjustLeftY) + Math.abs(diffRightY - diffLeftY);
      var deltaW = w1 - w2;
      var deltaH = h1 - h2; //没有重叠

      if (deltaW > 0 || deltaH > 0) {
        continue;
      } else {
        deltaH = Math.abs(deltaH) / 2 + 6;
        deltaW = Math.abs(deltaW) / 2 + 6;

        if (deltaW < deltaH) {
          if (adjustLeftX < diffLeftX) {
            //在左侧
            adjustRegion = [adjustLeftX, adjustLeftY, parseInt(adjustRegion[2]) - deltaW, adjustRegion[3]];
            diffRegion = [diffLeftX + deltaW, diffLeftY, diffRegion[2], diffRegion[3]];
            adjustRightX -= deltaW;
            diffLeftX += deltaW;
          } else {
            //在右侧
            adjustRegion = [adjustLeftX + deltaW, adjustLeftY, adjustRegion[2], adjustRegion[3]];
            diffRegion = [diffLeftX, diffLeftY, parseInt(diffRegion[2]) - deltaW, diffRegion[3]];
            diffRightX -= deltaW;
            adjustLeftX += deltaW;
          }

          dataArr[i].region = adjustRegion.join(',');
          dataArr[j].region = diffRegion.join(',');
        } else {
          if (adjustLeftY < diffLeftY) {
            //在上方
            adjustRegion = [adjustLeftX, adjustLeftY, adjustRegion[2], parseInt(adjustRegion[3]) - deltaH];
            diffRegion = [diffLeftX, diffLeftY + deltaH, diffRegion[2], diffRegion[3]];
            adjustRightY -= deltaH;
            diffLeftY += deltaH;
          } else {
            //在下方
            adjustRegion = [adjustLeftX, adjustLeftY + deltaH, adjustRegion[2], adjustRegion[3]];
            diffRegion = [diffLeftX, diffLeftY, diffRegion[2], parseInt(diffRegion[3]) - deltaH];
            diffRightY -= deltaH;
            adjustLeftY += deltaH;
          }

          dataArr[i].region = adjustRegion.join(',');
          dataArr[j].region = diffRegion.join(',');
        }
      }
    }
  }

  return dataArr;
}
function showImage(_x4) {
  return _showImage.apply(this, arguments);
} // 混贴图像区域标记
// areaInfo { rotateDeg: 90, pixel: '2976,3968', region: '[0,2067,1294,3920]' }
// orientation 为整个图像的旋转角度

function _showImage() {
  _showImage = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee4(imgObj) {
    var opt,
        _opt$maxWidth2,
        maxWidth,
        _opt$maxHeight2,
        maxHeight,
        minWidth,
        minHeight,
        canvas,
        imgWidth,
        imgHeight,
        _getRotateRect,
        rw,
        rh,
        ctx,
        _args4 = arguments;

    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            opt = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
            _opt$maxWidth2 = opt.maxWidth, maxWidth = _opt$maxWidth2 === void 0 ? 1920 : _opt$maxWidth2, _opt$maxHeight2 = opt.maxHeight, maxHeight = _opt$maxHeight2 === void 0 ? 1024 : _opt$maxHeight2, minWidth = opt.minWidth, minHeight = opt.minHeight;
            canvas = document.createElement('canvas');

            if (!(typeof canvas.getContext !== 'function')) {
              _context4.next = 5;
              break;
            }

            return _context4.abrupt("return", {
              errcode: 'unsport',
              description: '浏览器不支持canvas'
            });

          case 5:
            imgWidth = imgObj.width;
            imgHeight = imgObj.height;
            _getRotateRect = getRotateRect(0, imgWidth, imgHeight, maxWidth, maxHeight, 0, minWidth, minHeight), rw = _getRotateRect.rw, rh = _getRotateRect.rh;
            canvas.width = rw;
            canvas.height = rh;
            ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.save();
            ctx.drawImage(imgObj, 0, 0, imgWidth, imgHeight, 0, 0, rw, rh);
            ctx.restore();
            return _context4.abrupt("return", {
              errcode: '0000',
              description: 'success',
              data: canvas
            });

          case 16:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _showImage.apply(this, arguments);
}

function markImage(_x5, _x6) {
  return _markImage.apply(this, arguments);
}

function _markImage() {
  _markImage = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee5(imgObj, _ref3) {
    var targetWidth, targetHeight, _ref3$areaInfo, areaInfo, clearCanvas, _ref3$orientation, orientation, _ref3$maxWidth, maxWidth, _ref3$maxHeight, maxHeight, markSize, markFontSize, lineWidth, markRate, imgWidth, imgHeight, canvas, deg, tempRwRh, rw, rh, ctx, rectX, rectY, rectWidth, rectHeight, originWidth, originHeight, pixel, pixelArr, newWidthRate, newHeightRate, tempRwRh2, areaInfoList, i, region, markColor, lineColor, rectRight, rectBottom, px, py, _i, _region, _rectRight, _rectBottom, _px, _py;

    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            targetWidth = _ref3.targetWidth, targetHeight = _ref3.targetHeight, _ref3$areaInfo = _ref3.areaInfo, areaInfo = _ref3$areaInfo === void 0 ? [] : _ref3$areaInfo, clearCanvas = _ref3.clearCanvas, _ref3$orientation = _ref3.orientation, orientation = _ref3$orientation === void 0 ? 0 : _ref3$orientation, _ref3$maxWidth = _ref3.maxWidth, maxWidth = _ref3$maxWidth === void 0 ? 1920 : _ref3$maxWidth, _ref3$maxHeight = _ref3.maxHeight, maxHeight = _ref3$maxHeight === void 0 ? 1024 : _ref3$maxHeight;
            markSize = 12;
            markFontSize = 16;
            lineWidth = 2;
            markRate = 1;
            imgWidth = imgObj.width;
            imgHeight = imgObj.height;

            if (!(areaInfo.length === 0)) {
              _context5.next = 9;
              break;
            }

            return _context5.abrupt("return", {
              errcode: 'argsErr',
              description: '标记区域为空'
            });

          case 9:
            if (typeof clearCanvas === 'undefined') {
              clearCanvas = true;
            }

            canvas = document.createElement('canvas'); //画布对象找不到或者不支持画布

            if (!(!canvas || typeof canvas.getContext !== 'function')) {
              _context5.next = 13;
              break;
            }

            return _context5.abrupt("return", {
              errcode: 'unsport',
              description: '浏览器不支持canvas'
            });

          case 13:
            deg = Math.abs(orientation) % 360;
            tempRwRh = getRotateRect(deg, imgWidth, imgHeight, maxWidth, maxHeight, 0);
            rw = tempRwRh.rw;
            rh = tempRwRh.rh;
            ctx = canvas.getContext('2d');
            rectX = 0;
            rectY = 0;
            rectWidth = 0;
            rectHeight = 0;
            originWidth = imgWidth;
            originHeight = imgHeight;
            pixel = areaInfo[0].pixel;

            if (pixel) {
              pixelArr = pixel.split(',');

              if (imgWidth > imgHeight && originWidth < originHeight || imgWidth < imgHeight && originWidth > originHeight) {
                originWidth = parseInt(pixelArr[1]);
                originHeight = parseInt(pixelArr[0]);
              } else {
                originWidth = parseInt(pixelArr[0]);
                originHeight = parseInt(pixelArr[1]);
              }
            }

            if (deg === 90 || deg === 270) {
              canvas.width = rh;
              canvas.height = rw;
            } else {
              canvas.width = rw;
              canvas.height = rh;
            }

            ctx.save();
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.translate(canvas.width / 2, canvas.height / 2);
            ctx.rotate(-orientation * Math.PI / 180);
            newWidthRate = parseFloat(rw / originWidth);
            newHeightRate = parseFloat(rh / originHeight);
            ctx.translate(-rw / 2, -rh / 2);
            ctx.drawImage(imgObj, 0, 0, imgWidth, imgHeight, 0, 0, rw, rh); // 根据最终画布的大小计算字体等标志的缩放大小

            tempRwRh2 = getRotateRect(0, canvas.width, canvas.height, targetWidth, targetHeight, 0);
            markRate = canvas.height / tempRwRh2.rh;
            markSize = markRate * markSize;
            markFontSize = markRate * markFontSize;
            lineWidth = markRate * lineWidth;
            areaInfoList = adjuestRect(areaInfo);

            for (i = 0; i < areaInfoList.length; i++) {
              region = areaInfoList[i].region.replace(/[[\]]/g, '').split(',');

              if (!areaInfoList[i].region) {
                region = [0, 0, imgWidth, imgHeight];
              }

              markColor = areaInfoList[i].markColor || '#487BFB';
              lineColor = areaInfoList[i].lineColor || markColor;
              rectX = parseInt(region[0]) * newWidthRate;
              rectY = parseInt(region[1]) * newHeightRate;
              rectWidth = parseInt(region[2]) * newWidthRate - rectX;
              rectHeight = parseInt(region[3]) * newHeightRate - rectY;
              rectRight = parseInt(region[2]) * newWidthRate;
              rectBottom = parseInt(region[3]) * newHeightRate;

              if (rectWidth + rectX > rw) {
                rectWidth = rw - rectX;
              }

              if (rectHeight + rectY > rh) {
                rectHeight = rh - rectY;
              }

              ctx.save();
              ctx.strokeStyle = lineColor;
              ctx.lineWidth = lineWidth;

              if (typeof ctx.setLineDash === 'function') {
                ctx.setLineDash([10 * markRate, 10 * markRate]);
              }

              ctx.moveTo(rectX + lineWidth, rectY + lineWidth);
              ctx.beginPath();
              ctx.strokeRect(rectX + lineWidth, rectY + lineWidth, rectWidth - 2 * lineWidth, rectHeight - 2 * lineWidth);
              ctx.stroke();
              ctx.closePath();
              ctx.restore(); // 绘制圆圈

              ctx.save();
              ctx.strokeStyle = markColor;
              ctx.beginPath();
              px = rectX + markSize + lineWidth + 2;
              py = rectY + markSize + lineWidth + 2;

              if (orientation === -90 || orientation === 270) {
                py = rectBottom - markSize - lineWidth - 2;
              } else if (orientation === -180 || orientation === 180) {
                px = rectRight - markSize - lineWidth - 2;
                py = rectBottom - markSize - lineWidth - 2;
              } else if (orientation === 90 || orientation === -270) {
                px = rectRight - markSize - lineWidth - 2;
              }

              ctx.moveTo(px, py);
              ctx.arc(px, py, markSize, 0, Math.PI * 2, false);
              ctx.closePath();
              ctx.stroke();
              ctx.fillStyle = markColor;
              ctx.fill();
              ctx.restore();
            } //绘制序号


            for (_i = 0; _i < areaInfoList.length; _i++) {
              _region = areaInfoList[_i].region.replace(/[[\]]/g, '').split(',');

              if (!areaInfoList[_i].region) {
                _region = [0, 0, imgWidth, imgHeight];
              }

              rectX = parseInt(_region[0]) * newWidthRate;
              rectY = parseInt(_region[1]) * newHeightRate;
              _rectRight = parseInt(_region[2]) * newWidthRate;
              _rectBottom = parseInt(_region[3]) * newHeightRate;
              _px = rectX + markSize + lineWidth + 2.3;
              _py = rectY + markSize + lineWidth + 2.3;
              ctx.save();
              ctx.font = markFontSize + 'px Times New Roman';
              ctx.fillStyle = '#fff';
              ctx.textAlign = 'center'; // 设置垂直对齐方式

              ctx.textBaseline = 'middle';

              if (orientation === -90 || orientation === 270) {
                _py = _rectBottom - markSize - lineWidth - 2.3;
              } else if (orientation === -180 || orientation === 180) {
                _px = _rectRight - markSize - lineWidth - 2.3;
                _py = _rectBottom - markSize - lineWidth - 2.3;
              } else if (orientation === 90 || orientation === -270) {
                _px = _rectRight - markSize - lineWidth - 2.3;
              }

              if (orientation !== 0) {
                ctx.translate(_px, _py);
                ctx.rotate(orientation * Math.PI / 180);
                ctx.fillText(_i + 1, 0, 0);
              } else {
                ctx.fillText(_i + 1, _px, _py);
              }

              ctx.restore();
            }

            ctx.restore();
            return _context5.abrupt("return", {
              errcode: '0000',
              description: 'success',
              data: canvas
            });

          case 45:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _markImage.apply(this, arguments);
}

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return OperateCanvas; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



var OperateCanvas =
/*#__PURE__*/
function () {
  function OperateCanvas(props) {
    var _this = this;

    _classCallCheck(this, OperateCanvas);

    _defineProperty(this, "modifyArgs", function (opt) {
      _this.displayFlag = opt.displayFlag || _this.displayFlag;
      _this.width = opt.width || _this.width;
      _this.height = opt.height || _this.height;
      _this.emptyFillStyle = opt.emptyFillStyle || _this.emptyFillStyle;
      _this.imgCanvasObj = null;
    });

    _defineProperty(this, "computeDrawSize", function () {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var imgWidth = opt.imgWidth,
          imgHeight = opt.imgHeight,
          maxWidth = opt.maxWidth,
          maxHeight = opt.maxHeight,
          _opt$rotateDeg = opt.rotateDeg,
          rotateDeg = _opt$rotateDeg === void 0 ? _this.rotateDeg : _opt$rotateDeg,
          _opt$displayFlag = opt.displayFlag,
          displayFlag = _opt$displayFlag === void 0 ? 'showImage' : _opt$displayFlag,
          resetLargerRatio = opt.resetLargerRatio,
          reset = opt.reset;
      var largerRatio = typeof opt.largerRatio !== 'undefined' ? opt.largerRatio : _this.largerRatio;
      var rate = parseFloat(imgWidth / imgHeight);
      var minWidth = maxWidth * 1 / 2;
      var minHeight = maxHeight * 1 / 2;

      if (rotateDeg !== _this.rotateDeg || resetLargerRatio || reset) {
        var tempRotateDeg = displayFlag === 'markImage' ? 0 : rotateDeg;
        var tempRwRh = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getRotateRect"])(tempRotateDeg, imgWidth, imgHeight, maxWidth, maxHeight, 0, minWidth, minHeight);
        _this.rw = tempRwRh.rw;
        _this.rh = tempRwRh.rh;
        _this.rotateDeg = reset ? _this.initRotateDeg : rotateDeg;
        _this.largerRatio = parseFloat(_this.rw / imgWidth);

        if (!_this.initLargerRatio) {
          _this.initLargerRatio = _this.largerRatio;
        }
      } else {
        if (largerRatio !== _this.largerRatio) {
          // 放大系数发生变化
          _this.largerRatio = largerRatio;
        }

        _this.rh = imgHeight * largerRatio;
        _this.rw = _this.rh * rate;
      }
    });

    _defineProperty(this, "showImage",
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee(imgObj) {
        var opt,
            resetLargerRatio,
            reset,
            _opt$largerRatio,
            largerRatio,
            rotateDeg,
            maxWidth,
            maxHeight,
            _this$getOffset,
            offsetX,
            offsetY,
            cuteRes,
            ctx,
            imgWidth,
            imgHeight,
            canvas,
            _args = arguments;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                opt = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                resetLargerRatio = opt.resetLargerRatio, reset = opt.reset, _opt$largerRatio = opt.largerRatio, largerRatio = _opt$largerRatio === void 0 ? _this.largerRatio : _opt$largerRatio;
                rotateDeg = typeof opt.rotateDeg !== 'undefined' ? opt.rotateDeg : _this.rotateDeg;
                rotateDeg = rotateDeg % 360;
                maxWidth = _this.ctx.canvas.width;
                maxHeight = _this.ctx.canvas.height;
                _this$getOffset = _this.getOffset(rotateDeg, opt.offsetX, opt.offsetY), offsetX = _this$getOffset.offsetX, offsetY = _this$getOffset.offsetY;

                if (!(rotateDeg !== _this.rotateDeg || !_this.imgCanvasObj)) {
                  _context.next = 14;
                  break;
                }

                _context.next = 10;
                return Object(_utils__WEBPACK_IMPORTED_MODULE_0__["showImage"])(imgObj);

              case 10:
                cuteRes = _context.sent;

                if (!(cuteRes.errcode !== '0000')) {
                  _context.next = 13;
                  break;
                }

                return _context.abrupt("return", cuteRes);

              case 13:
                _this.imgCanvasObj = cuteRes.data;

              case 14:
                ctx = _this.ctx;
                imgWidth = _this.imgCanvasObj.width;
                imgHeight = _this.imgCanvasObj.height; // 更新图像绘制的尺寸

                _this.computeDrawSize({
                  imgWidth: imgWidth,
                  imgHeight: imgHeight,
                  maxWidth: maxWidth,
                  maxHeight: maxHeight,
                  rotateDeg: rotateDeg,
                  largerRatio: largerRatio,
                  resetLargerRatio: resetLargerRatio,
                  reset: reset
                });

                canvas = ctx.canvas;
                ctx.save();
                ctx.fillStyle = _this.emptyFillStyle;
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.translate(canvas.width / 2, canvas.height / 2);
                ctx.rotate(-rotateDeg * Math.PI / 180);
                ctx.translate(-_this.rw / 2 + offsetX, -_this.rh / 2 + offsetY);
                ctx.drawImage(_this.imgCanvasObj, 0, 0, imgWidth, imgHeight, 0, 0, _this.rw, _this.rh);
                ctx.restore();
                return _context.abrupt("return", {
                  errcode: '0000',
                  data: {
                    rotateDeg: _this.rotateDeg,
                    largerRatio: _this.largerRatio
                  }
                });

              case 28:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());

    _defineProperty(this, "cuteImage",
    /*#__PURE__*/
    function () {
      var _ref2 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2(imgObj) {
        var opt,
            resetLargerRatio,
            reset,
            _opt$largerRatio2,
            largerRatio,
            _opt$areaInfo,
            areaInfo,
            rotateDeg,
            _areaInfo$,
            pixel,
            region,
            maxWidth,
            maxHeight,
            cuteRes,
            ctx,
            canvas,
            imgWidth,
            imgHeight,
            _this$getOffset2,
            offsetX,
            offsetY,
            _args2 = arguments;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                opt = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                resetLargerRatio = opt.resetLargerRatio, reset = opt.reset, _opt$largerRatio2 = opt.largerRatio, largerRatio = _opt$largerRatio2 === void 0 ? _this.largerRatio : _opt$largerRatio2, _opt$areaInfo = opt.areaInfo, areaInfo = _opt$areaInfo === void 0 ? [] : _opt$areaInfo;
                rotateDeg = typeof opt.rotateDeg !== 'undefined' ? opt.rotateDeg : _this.rotateDeg;
                rotateDeg = rotateDeg % 360;
                _areaInfo$ = areaInfo[0], pixel = _areaInfo$.pixel, region = _areaInfo$.region;
                maxWidth = _this.ctx.canvas.width;
                maxHeight = _this.ctx.canvas.height;

                if (!(rotateDeg !== _this.rotateDeg || !_this.imgCanvasObj)) {
                  _context2.next = 14;
                  break;
                }

                _context2.next = 10;
                return Object(_utils__WEBPACK_IMPORTED_MODULE_0__["cuteImage"])(imgObj, {
                  pixel: pixel,
                  region: region
                });

              case 10:
                cuteRes = _context2.sent;

                if (!(cuteRes.errcode !== '0000')) {
                  _context2.next = 13;
                  break;
                }

                return _context2.abrupt("return", cuteRes);

              case 13:
                _this.imgCanvasObj = cuteRes.data;

              case 14:
                ctx = _this.ctx;
                canvas = ctx.canvas;
                imgWidth = _this.imgCanvasObj.width;
                imgHeight = _this.imgCanvasObj.height;
                _this$getOffset2 = _this.getOffset(rotateDeg, opt.offsetX, opt.offsetY), offsetX = _this$getOffset2.offsetX, offsetY = _this$getOffset2.offsetY; // 更新图像绘制的尺寸

                _this.computeDrawSize({
                  imgWidth: imgWidth,
                  imgHeight: imgHeight,
                  maxWidth: maxWidth,
                  maxHeight: maxHeight,
                  rotateDeg: rotateDeg,
                  largerRatio: largerRatio,
                  resetLargerRatio: resetLargerRatio,
                  reset: reset
                });

                ctx.save();
                ctx.fillStyle = _this.emptyFillStyle;
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.translate(canvas.width / 2, canvas.height / 2);
                ctx.rotate(-rotateDeg * Math.PI / 180);
                ctx.translate(-_this.rw / 2 + offsetX, -_this.rh / 2 + offsetY);
                ctx.drawImage(_this.imgCanvasObj, 0, 0, imgWidth, imgHeight, 0, 0, _this.rw, _this.rh);
                ctx.restore();
                return _context2.abrupt("return", {
                  errcode: '0000',
                  data: {
                    rotateDeg: _this.rotateDeg,
                    largerRatio: _this.largerRatio
                  }
                });

              case 29:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());

    _defineProperty(this, "markImage",
    /*#__PURE__*/
    function () {
      var _ref3 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3(imgObj) {
        var opt,
            resetLargerRatio,
            reset,
            offsetX,
            offsetY,
            _opt$largerRatio3,
            largerRatio,
            _opt$areaInfo2,
            areaInfo,
            rotateDeg,
            ctx,
            maxWidth,
            maxHeight,
            cuteRes,
            imgWidth,
            imgHeight,
            _args3 = arguments;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                opt = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
                resetLargerRatio = opt.resetLargerRatio, reset = opt.reset, offsetX = opt.offsetX, offsetY = opt.offsetY, _opt$largerRatio3 = opt.largerRatio, largerRatio = _opt$largerRatio3 === void 0 ? _this.largerRatio : _opt$largerRatio3, _opt$areaInfo2 = opt.areaInfo, areaInfo = _opt$areaInfo2 === void 0 ? [] : _opt$areaInfo2;
                rotateDeg = typeof opt.rotateDeg !== 'undefined' ? opt.rotateDeg : _this.rotateDeg;
                rotateDeg = rotateDeg % 360;
                ctx = _this.ctx;
                maxWidth = ctx.canvas.width;
                maxHeight = ctx.canvas.height;

                if (!(rotateDeg !== _this.rotateDeg || !_this.imgCanvasObj)) {
                  _context3.next = 14;
                  break;
                }

                _context3.next = 10;
                return Object(_utils__WEBPACK_IMPORTED_MODULE_0__["markImage"])(imgObj, {
                  targetHeight: maxHeight,
                  targetWidth: maxWidth,
                  areaInfo: areaInfo,
                  orientation: rotateDeg
                });

              case 10:
                cuteRes = _context3.sent;

                if (!(cuteRes.errcode !== '0000')) {
                  _context3.next = 13;
                  break;
                }

                return _context3.abrupt("return", cuteRes);

              case 13:
                _this.imgCanvasObj = cuteRes.data;

              case 14:
                imgWidth = _this.imgCanvasObj.width;
                imgHeight = _this.imgCanvasObj.height; // 更新图像绘制的尺寸

                _this.computeDrawSize({
                  displayFlag: 'markImage',
                  imgWidth: imgWidth,
                  imgHeight: imgHeight,
                  maxWidth: maxWidth,
                  maxHeight: maxHeight,
                  rotateDeg: rotateDeg,
                  largerRatio: largerRatio,
                  resetLargerRatio: resetLargerRatio,
                  reset: reset
                });

                ctx.save();
                ctx.fillStyle = _this.emptyFillStyle;
                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                ctx.translate(ctx.canvas.width / 2 - _this.rw / 2 + offsetX, ctx.canvas.height / 2 - _this.rh / 2 + offsetY);
                ctx.drawImage(_this.imgCanvasObj, 0, 0, imgWidth, imgHeight, 0, 0, _this.rw, _this.rh);
                ctx.restore();
                return _context3.abrupt("return", {
                  errcode: '0000',
                  data: {
                    rotateDeg: _this.rotateDeg,
                    largerRatio: _this.largerRatio
                  }
                });

              case 24:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());

    this.ctx = props.ctx;
    this.width = props.width;
    this.height = props.height;
    this.initLargerRatio = props.largerRatio || 1;
    this.initRotateDeg = props.rotateDeg || 0;
    this.rotateDeg = this.initRotateDeg;
    this.largerRatio = this.initLargerRatio;
    this.emptyFillStyle = props.emptyFillStyle || '#D7DAE1';
  }

  _createClass(OperateCanvas, [{
    key: "getOffset",
    value: function getOffset(rotateDeg) {
      var offsetX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var offsetY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      if (rotateDeg === 90 || rotateDeg === -270) {
        var temp = offsetY;
        offsetY = offsetX;
        offsetX = -temp;
      } else if (rotateDeg === -90 || rotateDeg === 270) {
        var _temp = offsetY;
        offsetY = -offsetX;
        offsetX = _temp;
      } else if (rotateDeg === 180 || rotateDeg === -180) {
        offsetY = -offsetY;
        offsetX = -offsetX;
      }

      return {
        offsetX: offsetX,
        offsetY: offsetY
      };
    }
  }]);

  return OperateCanvas;
}();



/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tempCompressImgFile", function() { return tempCompressImgFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compressImgFile", function() { return compressImgFile; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }


function tempCompressImgFile(_x) {
  return _tempCompressImgFile.apply(this, arguments);
} // 部分gui用户，不方便远程调试，可能压缩中出现异常，先全局捕获下异常

function _tempCompressImgFile() {
  _tempCompressImgFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(file) {
    var options,
        localUrl,
        URL,
        fileType,
        fileLimitWidth,
        fileLimitHeight,
        fileLimitPixel,
        fileLimitQuality,
        fileLimitSize,
        fileSize,
        fileLimitSizeTemp,
        rate,
        loadRes,
        _loadRes$data,
        width,
        height,
        imgObj,
        info,
        newWidth,
        newHeight,
        imgRate,
        imgCanvasData,
        canvas,
        context,
        bFileRes,
        _args = arguments;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            localUrl = options.localUrl || ''; // 浏览器兼容

            URL = window.URL || window.webkitURL || window.mozURL || {};
            fileType = file.type || ''; // 非图像，不支持的浏览器不压缩，没有设置压缩，直接返回

            if (!(fileType.indexOf('image/') === -1 || typeof URL.createObjectURL !== 'function' || typeof options.fileLimitSize === 'undefined')) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return", {
              errcode: '0000',
              localUrl: localUrl,
              file: file
            });

          case 6:
            fileLimitWidth = options.fileLimitWidth, fileLimitHeight = options.fileLimitHeight; // 短边最小值

            fileLimitPixel = options.fileLimitPixel;

            if (!fileLimitPixel && fileLimitWidth && fileLimitHeight) {
              fileLimitPixel = fileLimitWidth > fileLimitHeight ? fileLimitHeight : fileLimitWidth;
            }

            if (!fileLimitPixel) {
              fileLimitPixel = 1500;
            }

            fileLimitQuality = options.fileQuality || 0.98;

            if (isNaN(parseFloat(fileLimitQuality))) {
              fileLimitQuality = 0.98;
            } else {
              fileLimitQuality = parseFloat(fileLimitQuality);
            }

            if (!(localUrl === '')) {
              _context.next = 21;
              break;
            }

            _context.prev = 13;
            localUrl = URL.createObjectURL(file);
            _context.next = 21;
            break;

          case 17:
            _context.prev = 17;
            _context.t0 = _context["catch"](13);

            if (window.console) {
              console.error(_context.t0);
            }

            return _context.abrupt("return", {
              errcode: '0000',
              localUrl: localUrl,
              file: file
            });

          case 21:
            fileLimitSize = options.fileLimitSize;
            fileSize = file.size;
            fileLimitSizeTemp = parseFloat(fileLimitSize) * 1024 * 1024; // 文件大小小于指定大小不需要压缩

            if (!(fileSize <= fileLimitSizeTemp)) {
              _context.next = 26;
              break;
            }

            return _context.abrupt("return", {
              errcode: '0000',
              localUrl: localUrl,
              file: file
            });

          case 26:
            // 计算压缩比例
            rate = fileLimitSizeTemp / fileSize;
            _context.next = 29;
            return Object(_utils__WEBPACK_IMPORTED_MODULE_0__["loadImage"])(localUrl);

          case 29:
            loadRes = _context.sent;

            if (!(loadRes.errcode !== '0000')) {
              _context.next = 32;
              break;
            }

            return _context.abrupt("return", {
              errcode: '0000',
              localUrl: localUrl,
              file: file
            });

          case 32:
            _loadRes$data = loadRes.data, width = _loadRes$data.width, height = _loadRes$data.height, imgObj = _loadRes$data.imgObj;
            info = {
              originWidth: width,
              originHeight: height,
              width: width,
              height: height,
              localUrl: localUrl
            }; // 图像原始像素比较小，则直接返回

            if (!(width < fileLimitPixel || height < fileLimitPixel)) {
              _context.next = 36;
              break;
            }

            return _context.abrupt("return", _objectSpread({
              errcode: '0000'
            }, info, {
              file: file
            }));

          case 36:
            newWidth = width;
            newHeight = height;
            imgRate = width / height; // 以短边作为压缩基准

            if (width <= height) {
              newHeight = Math.floor(height * rate);
              newWidth = Math.floor(newHeight * imgRate);
            } else {
              newWidth = Math.floor(width * rate);
              newHeight = Math.floor(newWidth / imgRate);
            } // 压缩后的图像大小小于指定限制, 直接使用最小值作为短边的像素大小，长边等比例缩放


            if (newWidth < fileLimitPixel || newHeight < fileLimitPixel) {
              if (newWidth <= newHeight) {
                newWidth = fileLimitPixel;
                newHeight = Math.floor(newWidth / imgRate);
              } else {
                newHeight = fileLimitPixel;
                newWidth = Math.floor(newHeight * imgRate);
              }
            }

            info.width = newWidth;
            info.height = newHeight;
            _context.prev = 43;
            canvas = document.createElement('canvas');
            canvas.width = newWidth;
            canvas.height = newHeight;
            context = canvas.getContext('2d');
            context.clearRect(0, 0, newWidth, newHeight);
            context.drawImage(imgObj, 0, 0, newWidth, newHeight);
            imgCanvasData = canvas.toDataURL('image/jpeg', fileLimitQuality);
            canvas = null;
            _context.next = 58;
            break;

          case 54:
            _context.prev = 54;
            _context.t1 = _context["catch"](43);

            if (window.console) {
              console.error(_context.t1);
            }

            return _context.abrupt("return", _objectSpread({
              errcode: '0000'
            }, info, {
              file: file
            }));

          case 58:
            _context.next = 60;
            return Object(_utils__WEBPACK_IMPORTED_MODULE_0__["base64ToFile"])(imgCanvasData, file.name);

          case 60:
            bFileRes = _context.sent;

            if (!(bFileRes.errcode !== '0000' || bFileRes.data.size > file.size)) {
              _context.next = 63;
              break;
            }

            return _context.abrupt("return", _objectSpread({
              errcode: '0000'
            }, info, {
              width: width,
              height: height,
              file: file // 压缩后图像变大，直接使用原图

            }));

          case 63:
            return _context.abrupt("return", _objectSpread({
              errcode: '0000'
            }, info, {
              file: bFileRes.data
            }));

          case 64:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[13, 17], [43, 54]]);
  }));
  return _tempCompressImgFile.apply(this, arguments);
}

function compressImgFile(_x2) {
  return _compressImgFile.apply(this, arguments);
}

function _compressImgFile() {
  _compressImgFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(file) {
    var options,
        res,
        localUrl,
        _args2 = arguments;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
            _context2.prev = 1;
            _context2.next = 4;
            return tempCompressImgFile(file, options);

          case 4:
            res = _context2.sent;
            return _context2.abrupt("return", res);

          case 8:
            _context2.prev = 8;
            _context2.t0 = _context2["catch"](1);

            if (window.console) {
              console.error(_context2.t0);
            }

          case 11:
            localUrl = options.localUrl || '';
            return _context2.abrupt("return", {
              errcode: '0000',
              localUrl: localUrl,
              file: file
            });

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[1, 8]]);
  }));
  return _compressImgFile.apply(this, arguments);
}

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return UploadFiles; });
/* harmony import */ var _piaozone_com_pdf_to_image_src_pdfTools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var _piaozone_com_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/* harmony import */ var _piaozone_com_utils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_piaozone_com_utils__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _piaozone_com_process_image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var _piaozone_com_process_image__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_piaozone_com_process_image__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var async__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(180);
/* harmony import */ var async__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(async__WEBPACK_IMPORTED_MODULE_3__);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





var consoleLog = _piaozone_com_utils__WEBPACK_IMPORTED_MODULE_1__["tools"].consoleLog;
var getUUId = _piaozone_com_utils__WEBPACK_IMPORTED_MODULE_1__["tools"].getUUId;

var UploadFiles = function UploadFiles(_opt) {
  var _this = this;

  _classCallCheck(this, UploadFiles);

  _defineProperty(this, "checkIsLowBroser", function () {
    if (_this.useBackendUpload) {
      return true;
    }

    if (typeof FileReader !== 'function') {
      return true;
    }

    var clientInfo = Object(_piaozone_com_utils__WEBPACK_IMPORTED_MODULE_1__["clientCheck"])();
    var browser = clientInfo.browser;

    if (browser.chrome > 50) {
      return false;
    } else if (browser.firefox > 50) {
      return false;
    }

    return true;
  });

  _defineProperty(this, "getNormalOpt", function (opt, curFile) {
    var init = {
      index: opt.index || 0,
      // 文件索引
      pageNo: opt.pageNo || 1,
      // 多页pdf的当前处理的页
      totalPages: opt.totalPages || 1,
      // 多页pdf时的页数
      id: opt.id,
      // 当前处理对象的唯一索引
      fileHash: opt.fileHash || '' // 文件的hash值

    };

    if (_typeof(curFile) === 'object') {
      init = _objectSpread({}, init, {
        localUrl: opt.localUrl || window.URL.createObjectURL(curFile),
        name: opt.name || curFile.name,
        file: curFile,
        size: curFile.size,
        width: curFile.width || 0,
        height: curFile.height || 0
      });
    }

    return init;
  });

  _defineProperty(this, "getUploadOpt",
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(curFile, opt) {
      var preResData, name, normalOpt, preRes, formData, tempDatas;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              preResData = {};
              opt = opt || {};
              name = opt.name || curFile.name; // 文件名称，如果是多页pdf可以用拆分后返回的name

              if (!(typeof _this.onPreUpload === 'function')) {
                _context.next = 19;
                break;
              }

              _context.prev = 4;
              normalOpt = _this.getNormalOpt(opt, curFile);
              _context.next = 8;
              return _this.onPreUpload(normalOpt);

            case 8:
              preRes = _context.sent;

              if (!(preRes.errcode === '0000')) {
                _context.next = 13;
                break;
              }

              preResData = preRes.data;
              _context.next = 14;
              break;

            case 13:
              return _context.abrupt("return", _objectSpread({}, preRes, {
                description: preRes.description || '获取上传前参数异常'
              }));

            case 14:
              _context.next = 19;
              break;

            case 16:
              _context.prev = 16;
              _context.t0 = _context["catch"](4);
              consoleLog(_context.t0, 'error', '处理上传回调失败');

            case 19:
              formData = new FormData();
              tempDatas = _objectSpread({}, _this.datas, {}, preResData);
              formData.append(_this.uploadName, curFile, name);
              Object.keys(tempDatas).forEach(function (keyName) {
                formData.append(keyName, tempDatas[keyName]);
              });
              return _context.abrupt("return", {
                errcode: '0000',
                data: formData,
                description: 'success'
              });

            case 24:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[4, 16]]);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }());

  _defineProperty(this, "handleUploadFile",
  /*#__PURE__*/
  function () {
    var _ref2 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee2(url, formData) {
      var uploadRes;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return Object(_piaozone_com_utils__WEBPACK_IMPORTED_MODULE_1__["pwyFetch"])(url, {
                method: 'post',
                body: formData,
                contentType: 'file'
              });

            case 2:
              uploadRes = _context2.sent;
              return _context2.abrupt("return", uploadRes);

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }());

  _defineProperty(this, "handleFile",
  /*#__PURE__*/
  function () {
    var _ref3 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee3(waitFile, opt) {
      var res, upRes;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!(_this.uploadSingleUrl === '')) {
                _context3.next = 2;
                break;
              }

              return _context3.abrupt("return", {
                errcode: '30001',
                description: '参数错误，文件上传地址不能为空'
              });

            case 2:
              _context3.next = 4;
              return _this.getUploadOpt(waitFile, opt);

            case 4:
              res = _context3.sent;

              if (!(res.errcode !== '0000')) {
                _context3.next = 7;
                break;
              }

              return _context3.abrupt("return", res);

            case 7:
              _context3.next = 9;
              return _this.handleUploadFile(_this.uploadSingleUrl, res.data);

            case 9:
              upRes = _context3.sent;
              return _context3.abrupt("return", upRes);

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x5, _x6) {
      return _ref3.apply(this, arguments);
    };
  }());

  _defineProperty(this, "handleImage",
  /*#__PURE__*/
  function () {
    var _ref4 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee4(waitFile, opt) {
      var compressOpt, presRes, res, file;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              compressOpt = {};

              if (_this.fileQuality) {
                compressOpt.fileQuality = _this.fileQuality;
              }

              if (_this.fileLimitWidth) {
                compressOpt.fileLimitWidth = _this.fileLimitWidth;
              }

              if (_this.fileLimitHeight) {
                compressOpt.fileLimitHeight = _this.fileLimitHeight;
              }

              if (_this.fileLimitPixel) {
                compressOpt.fileLimitPixel = _this.fileLimitPixel;
              }

              if (_this.fileLimitSize) {
                compressOpt.fileLimitSize = _this.fileLimitSize;
              }

              _context4.next = 8;
              return Object(_piaozone_com_process_image__WEBPACK_IMPORTED_MODULE_2__["compressImgFile"])(waitFile, compressOpt);

            case 8:
              presRes = _context4.sent;

              if (!(presRes.errcode !== '0000')) {
                _context4.next = 15;
                break;
              }

              _context4.next = 12;
              return _this.handleFile(waitFile, opt);

            case 12:
              res = _context4.sent;
              _context4.next = 19;
              break;

            case 15:
              file = res.file;
              _context4.next = 18;
              return _this.handleFile(file, opt);

            case 18:
              res = _context4.sent;

            case 19:
              return _context4.abrupt("return", res);

            case 20:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x7, _x8) {
      return _ref4.apply(this, arguments);
    };
  }());

  _defineProperty(this, "readAsBinaryString", function (fileData) {
    return new Promise(function (resolve) {
      var reader = new FileReader();

      if (typeof FileReader.prototype.readAsBinaryString === 'function') {
        reader.onload = function (e) {
          resolve(reader.result);
        };

        reader.onerror = function () {
          resolve(null);
        };

        reader.readAsBinaryString(fileData);
      } else {
        var binary = '';

        reader.onload = function (e) {
          var bytes = new Uint8Array(reader.result);
          var length = bytes.byteLength;

          for (var i = 0; i < length; i++) {
            binary += String.fromCharCode(bytes[i]);
          }

          resolve(binary);
        };

        reader.onerror = function () {
          resolve(null);
        };

        reader.readAsArrayBuffer(fileData);
      }
    });
  });

  _defineProperty(this, "readInvoiceExcel",
  /*#__PURE__*/
  function () {
    var _ref5 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee5(file) {
      var binaryData, XLSX, wb, resultList, resList, i, invoiceCode, invoiceNo, invoiceDate, checkCode, invoiceMoney;
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return _this.readAsBinaryString(file);

            case 2:
              binaryData = _context5.sent;

              if (binaryData) {
                _context5.next = 5;
                break;
              }

              return _context5.abrupt("return", {
                errcode: '4000',
                description: '文件解析异常'
              });

            case 5:
              XLSX = window.XLSX;
              wb = XLSX.read(binaryData, {
                type: 'binary'
              });
              resultList = XLSX.utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]], {
                defval: ''
              });
              resList = [];
              i = 0;

            case 10:
              if (!(i < resultList.length)) {
                _context5.next = 24;
                break;
              }

              invoiceCode = resultList[i]['发票代码'] || '';
              invoiceNo = resultList[i]['发票号码'] || '';
              invoiceDate = resultList[i]['开票日期'] || '';
              checkCode = resultList[i]['校验码后六位(普票必填)'] || '';
              invoiceMoney = resultList[i]['开票不含税金额（专票必填）'] || '';

              if (!(!invoiceCode || !invoiceNo || !invoiceDate)) {
                _context5.next = 18;
                break;
              }

              return _context5.abrupt("continue", 21);

            case 18:
              invoiceDate = invoiceDate.trim();

              if (invoiceDate.length === 8) {
                invoiceDate = invoiceDate.substr(0, 4) + '-' + invoiceDate.substr(4, 2) + '-' + invoiceDate.substr(6, 2);
              }

              resList.push({
                fpdm: invoiceCode,
                fphm: invoiceNo,
                kprq: invoiceDate,
                kpje: invoiceMoney,
                jym: checkCode
              });

            case 21:
              i++;
              _context5.next = 10;
              break;

            case 24:
              return _context5.abrupt("return", {
                errcode: '0000',
                data: resList
              });

            case 25:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x9) {
      return _ref5.apply(this, arguments);
    };
  }());

  _defineProperty(this, "loadJsLib", function (url) {
    return new Promise(function (resolve) {
      _piaozone_com_utils__WEBPACK_IMPORTED_MODULE_1__["loadJs"].syncUse(url,
      /*#__PURE__*/
      _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee6() {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _this.loadedExcelLib = true;
                resolve(null);

              case 2:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      })));
    });
  });

  _defineProperty(this, "handleExcel",
  /*#__PURE__*/
  function () {
    var _ref7 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee7(waitFile, opt) {
      var res;
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (_this.loadedExcelLib) {
                _context7.next = 3;
                break;
              }

              _context7.next = 3;
              return _this.loadExcelLib(_this.staticUrl + '/gallery/xlsx/xlsx.full.min.js');

            case 3:
              _context7.next = 5;
              return _this.readInvoiceExcel(waitFile);

            case 5:
              res = _context7.sent;

              if (!(res.errcode !== '0000')) {
                _context7.next = 8;
                break;
              }

              return _context7.abrupt("return", res);

            case 8:
              return _context7.abrupt("return", res);

            case 9:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x10, _x11) {
      return _ref7.apply(this, arguments);
    };
  }());

  _defineProperty(this, "getPdfPagesInfo", function (resData, opt) {
    return new Promise(function (resolve) {
      async__WEBPACK_IMPORTED_MODULE_3___default.a.mapLimit(resData, _this.limit,
      /*#__PURE__*/
      function () {
        var _ref8 = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee8(pageItem, callback) {
          var fileUrl, getRes;
          return regeneratorRuntime.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  fileUrl = pageItem.fileUrl;
                  getRes = {
                    errcode: '5000',
                    description: '服务端异常，请稍后再试'
                  };
                  _context8.prev = 2;
                  _context8.next = 5;
                  return Object(_piaozone_com_utils__WEBPACK_IMPORTED_MODULE_1__["pwyFetch"])(_this.getPdfInfoUrl, {
                    method: 'post',
                    body: _objectSpread({
                      fileUrl: fileUrl
                    }, _this.datas)
                  });

                case 5:
                  getRes = _context8.sent;
                  _context8.next = 11;
                  break;

                case 8:
                  _context8.prev = 8;
                  _context8.t0 = _context8["catch"](2);
                  console && console.error('getPdfPagesInfo error', _context8.t0);

                case 11:
                  _context8.next = 13;
                  return _this.wrapStepFinish(_objectSpread({}, getRes, {}, opt, {
                    imgSrc: pageItem.fileUrl,
                    pageNo: pageItem.index,
                    processType: 'pdfPageInfo'
                  }));

                case 13:
                  callback(null);

                case 14:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, null, [[2, 8]]);
        }));

        return function (_x12, _x13) {
          return _ref8.apply(this, arguments);
        };
      }(),
      /*#__PURE__*/
      _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee9() {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                resolve({
                  errcode: '0000'
                });

              case 1:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      })));
    });
  });

  _defineProperty(this, "startAnalysisFullPdf",
  /*#__PURE__*/
  function () {
    var _ref10 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee10(waitFile, opt) {
      var normalOpt, formData, uploadRes, resData;
      return regeneratorRuntime.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              normalOpt = _this.getNormalOpt(opt, waitFile);
              formData = new FormData();
              formData.append(_this.uploadName, waitFile, waitFile.name);
              Object.keys(_this.datas).forEach(function (keyName) {
                formData.append(keyName, _this.datas[keyName]);
              });
              _context10.next = 6;
              return _this.handleUploadFile(_this.analysisFullUrl, formData);

            case 6:
              uploadRes = _context10.sent;

              if (!(uploadRes.errcode !== '0000')) {
                _context10.next = 9;
                break;
              }

              return _context10.abrupt("return", _objectSpread({
                processType: 'pdf'
              }, uploadRes, {}, normalOpt));

            case 9:
              resData = uploadRes.data;

              _this.getPdfPagesInfo(resData, normalOpt);

            case 11:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x14, _x15) {
      return _ref10.apply(this, arguments);
    };
  }());

  _defineProperty(this, "handleMultiPdfPage",
  /*#__PURE__*/
  function () {
    var _ref11 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee11(pageNo, opt) {
      var normalOpt, res, _res$data, file, name, localUrl, id, totalPages, width, height, uploadInitOpt, optRes, upRes;

      return regeneratorRuntime.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              normalOpt = _this.getNormalOpt(_objectSpread({}, opt, {
                totalPages: _this.pdfDoc.numPages
              }));
              _context11.next = 3;
              return Object(_piaozone_com_pdf_to_image_src_pdfTools__WEBPACK_IMPORTED_MODULE_0__["getOnePageData"])(_this.pdfDoc, pageNo, _this.scale, _this.quality);

            case 3:
              res = _context11.sent;

              if (!(res.errcode !== '0000')) {
                _context11.next = 8;
                break;
              }

              _context11.next = 7;
              return _this.wrapStepFinish(_objectSpread({}, res, {}, normalOpt, {
                processType: 'pdfPage'
              }));

            case 7:
              return _context11.abrupt("return");

            case 8:
              _res$data = res.data, file = _res$data.file, name = _res$data.name, localUrl = _res$data.localUrl, id = _res$data.id, totalPages = _res$data.totalPages, width = _res$data.width, height = _res$data.height;
              uploadInitOpt = {
                name: name,
                localUrl: localUrl,
                id: id,
                totalPages: totalPages,
                width: width,
                height: height
              };
              optRes = _this.getUploadOpt(file, uploadInitOpt);

              if (!(optRes.errcode !== '0000')) {
                _context11.next = 15;
                break;
              }

              _context11.next = 14;
              return _this.wrapStepFinish(_objectSpread({}, res, {}, uploadInitOpt, {
                processType: 'pdfPage'
              }));

            case 14:
              return _context11.abrupt("return");

            case 15:
              _context11.next = 17;
              return _this.handleUploadFile(_this.uploadSingleUrl, optRes.data);

            case 17:
              upRes = _context11.sent;
              _context11.next = 20;
              return _this.wrapStepFinish(_objectSpread({}, upRes, {}, uploadInitOpt, {
                processType: 'pdfPage'
              }));

            case 20:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    }));

    return function (_x16, _x17) {
      return _ref11.apply(this, arguments);
    };
  }());

  _defineProperty(this, "handleMultiPdf",
  /*#__PURE__*/
  function () {
    var _ref12 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee14(waitFile, opt) {
      return regeneratorRuntime.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              return _context14.abrupt("return", new Promise(function (resolve) {
                var _this2 = this;

                if (this.uploadFullUrl) {
                  var formData = new FormData();

                  var tempDatas = _objectSpread({}, this.datas, {}, opt);

                  formData.append(this.uploadName, waitFile, waitFile.name);
                  Object.keys(tempDatas).forEach(function (keyName) {
                    formData.append(keyName, tempDatas[keyName]);
                  });
                  this.handleUploadFile(this.uploadFullUrl, formData).then(function (upfullRes) {
                    if (upfullRes.errcode !== '0000') {
                      Object(_piaozone_com_pdf_to_image_src_pdfTools__WEBPACK_IMPORTED_MODULE_0__["cleanPdfDoc"])(_this2.pdfDoc);
                      return upfullRes;
                    }

                    var totalNum = _this2.pdfDoc.numPages;
                    var pageList = [];

                    for (var pageNo = 1; pageNo <= totalNum; pageNo++) {
                      pageList.push(pageNo);
                    }

                    async__WEBPACK_IMPORTED_MODULE_3___default.a.mapLimit(pageList, _this2.limit,
                    /*#__PURE__*/
                    function () {
                      var _ref13 = _asyncToGenerator(
                      /*#__PURE__*/
                      regeneratorRuntime.mark(function _callee12(pageNo, callback) {
                        return regeneratorRuntime.wrap(function _callee12$(_context12) {
                          while (1) {
                            switch (_context12.prev = _context12.next) {
                              case 0:
                                _context12.next = 2;
                                return _this2.handleMultiPdfPage(pageNo, opt);

                              case 2:
                                callback(null);

                              case 3:
                              case "end":
                                return _context12.stop();
                            }
                          }
                        }, _callee12);
                      }));

                      return function (_x20, _x21) {
                        return _ref13.apply(this, arguments);
                      };
                    }(),
                    /*#__PURE__*/
                    function () {
                      var _ref14 = _asyncToGenerator(
                      /*#__PURE__*/
                      regeneratorRuntime.mark(function _callee13(err) {
                        return regeneratorRuntime.wrap(function _callee13$(_context13) {
                          while (1) {
                            switch (_context13.prev = _context13.next) {
                              case 0:
                                if (err) {
                                  console.log('handlerPdfDoc err', err);
                                }

                                resolve({
                                  errcode: '0000'
                                });

                              case 2:
                              case "end":
                                return _context13.stop();
                            }
                          }
                        }, _callee13);
                      }));

                      return function (_x22) {
                        return _ref14.apply(this, arguments);
                      };
                    }());
                  });
                }
              }));

            case 1:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));

    return function (_x18, _x19) {
      return _ref12.apply(this, arguments);
    };
  }());

  _defineProperty(this, "handlePdf",
  /*#__PURE__*/
  function () {
    var _ref15 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee15(waitFile, opt) {
      var isLevelBroser, browserIsSupport, res, pdfRes, fileHash, checkRes;
      return regeneratorRuntime.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              isLevelBroser = _this.checkIsLowBroser();
              browserIsSupport = true;

              if (!(isLevelBroser || !window.URL || !window.URL.createObjectURL)) {
                _context15.next = 6;
                break;
              }

              if (!(!_this.analysisFullUrl || !_this.getPdfInfoUrl)) {
                _context15.next = 5;
                break;
              }

              return _context15.abrupt("return", {
                errcode: '30002',
                description: '当前浏览器不支持多页pdf处理'
              });

            case 5:
              browserIsSupport = false;

            case 6:
              if (!browserIsSupport) {
                _context15.next = 38;
                break;
              }

              _context15.next = 9;
              return Object(_piaozone_com_pdf_to_image_src_pdfTools__WEBPACK_IMPORTED_MODULE_0__["getPdfDocument"])({
                CMAP_URL: _this.staticUrl + '/gallery/pdfjs-dist/2.10.377/cmaps/',
                // pdfjs字体地址
                workerSrc: _this.staticUrl + '/gallery/pdfjs-dist/2.10.377/build/pdf.worker.min.js',
                // pdfjs的worker地址
                file: waitFile
              });

            case 9:
              pdfRes = _context15.sent;

              if (!(pdfRes.errcode !== '0000')) {
                _context15.next = 12;
                break;
              }

              return _context15.abrupt("return", pdfRes);

            case 12:
              _this.pdfDoc = pdfRes.data;
              fileHash = pdfRes.fileHash;
              _context15.next = 16;
              return Object(_piaozone_com_pdf_to_image_src_pdfTools__WEBPACK_IMPORTED_MODULE_0__["checkMultiInvoicePdf"])(_this.pdfDoc);

            case 16:
              checkRes = _context15.sent;

              if (!(checkRes.errcode !== '0000')) {
                _context15.next = 22;
                break;
              }

              _context15.next = 20;
              return _this.startAnalysisFullPdf(waitFile, opt);

            case 20:
              _context15.next = 36;
              break;

            case 22:
              if (!(checkRes.data === 2)) {
                _context15.next = 32;
                break;
              }

              _context15.next = 25;
              return _this.handleMultiPdf(waitFile, _objectSpread({}, opt, {
                fileHash: fileHash
              }));

            case 25:
              res = _context15.sent;

              if (!(res.errcode !== '0000')) {
                _context15.next = 30;
                break;
              }

              _context15.next = 29;
              return _this.startAnalysisFullPdf(waitFile, opt);

            case 29:
              res = _context15.sent;

            case 30:
              _context15.next = 36;
              break;

            case 32:
              _context15.next = 34;
              return _this.handleFile(waitFile, opt);

            case 34:
              res = _context15.sent;
              Object(_piaozone_com_pdf_to_image_src_pdfTools__WEBPACK_IMPORTED_MODULE_0__["cleanPdfDoc"])(_this.pdfDoc);

            case 36:
              _context15.next = 41;
              break;

            case 38:
              _context15.next = 40;
              return _this.startAnalysisFullPdf(waitFile, opt);

            case 40:
              res = _context15.sent;

            case 41:
              return _context15.abrupt("return", res);

            case 42:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));

    return function (_x23, _x24) {
      return _ref15.apply(this, arguments);
    };
  }());

  _defineProperty(this, "wrapStepFinish",
  /*#__PURE__*/
  function () {
    var _ref16 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee16(opt) {
      return regeneratorRuntime.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.prev = 0;
              _context16.next = 3;
              return _this.onStepFinish(opt);

            case 3:
              _context16.next = 8;
              break;

            case 5:
              _context16.prev = 5;
              _context16.t0 = _context16["catch"](0);
              console.log('onStepFinish error', _context16.t0);

            case 8:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16, null, [[0, 5]]);
    }));

    return function (_x25) {
      return _ref16.apply(this, arguments);
    };
  }());

  _defineProperty(this, "startHandleSingleFile",
  /*#__PURE__*/
  function () {
    var _ref17 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee17(waitFile, index) {
      var fileType, name, processType, res, localUrl, opt, mSize, myHandle;
      return regeneratorRuntime.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              fileType = waitFile.type;
              name = waitFile.name;
              processType = 'other';
              localUrl = '';

              try {
                localUrl = window.URL.createObjectURL(waitFile);
              } catch (error) {
                console.warn('获取本地连接异常', error);
              }

              opt = {
                id: getUUId(),
                index: index,
                localUrl: localUrl
              }; // 前端限制文件大小

              mSize = waitFile.size / 1024 / 1024;

              if (parseInt(mSize) > _this.limeFileSize) {
                res = {
                  errcode: '30003',
                  description: '文件大小超出限制'
                };
              } else if (fileType.indexOf('image') !== -1) {
                // 图像可能存在压缩，需要通过图像方式处理
                myHandle = _this.handleImage;
                processType = 'image';
              } else if (/\.(xlsx|XLSX|xls|XLS)$/.test(name)) {
                // excel 需要前端解析excel数据
                myHandle = _this.handleExcel;
                processType = 'excel';
              } else if (/\.(ofd|OFD)$/.test(name)) {
                // ofd直接上传给后台处理，使用通用的处理方式
                myHandle = _this.handleFile;
                processType = 'ofd';
              } else if (/\.(pdf|PDF)$/.test(name)) {
                // pdf需要单独处理
                myHandle = _this.handlePdf;
                processType = 'pdf';
              } else {
                processType = 'other';
                res = {
                  errcode: '30000',
                  description: '不支持该文件类型，请重新选择'
                };
              }

              if (!myHandle) {
                _context17.next = 12;
                break;
              }

              _context17.next = 11;
              return myHandle(waitFile, opt);

            case 11:
              res = _context17.sent;

            case 12:
              _context17.next = 14;
              return _this.wrapStepFinish(_objectSpread({}, res, {
                file: waitFile,
                processType: processType
              }));

            case 14:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));

    return function (_x26, _x27) {
      return _ref17.apply(this, arguments);
    };
  }());

  _defineProperty(this, "start",
  /*#__PURE__*/
  function () {
    var _ref18 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee18(waitFile) {
      var res, i;
      return regeneratorRuntime.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              res = {
                errcode: '0000',
                data: [],
                description: 'success'
              };

              if (!(waitFile instanceof File)) {
                _context18.next = 6;
                break;
              }

              _context18.next = 4;
              return _this.startHandleSingleFile(waitFile, 0);

            case 4:
              _context18.next = 17;
              break;

            case 6:
              if (!(waitFile instanceof Array || waitFile instanceof FileList)) {
                _context18.next = 16;
                break;
              }

              i = 0;

            case 8:
              if (!(i < waitFile.length)) {
                _context18.next = 14;
                break;
              }

              _context18.next = 11;
              return _this.startHandleSingleFile(waitFile[i], i);

            case 11:
              i++;
              _context18.next = 8;
              break;

            case 14:
              _context18.next = 17;
              break;

            case 16:
              res = {
                errcode: '30002',
                description: '参数错误, 请检查！'
              };

            case 17:
              _context18.next = 19;
              return _this.onFinish(res);

            case 19:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));

    return function (_x28) {
      return _ref18.apply(this, arguments);
    };
  }());

  this.uploadSingleUrl = _opt.uploadSingleUrl || ''; // 单页上传pdf的地址

  this.analysisFullUrl = _opt.analysisFullUrl || ''; // 前端不支持时需要后台解析完整pdf，然后通过单页获取pdf信息

  this.getPdfInfoUrl = _opt.getPdfInfoUrl || ''; // 后台解析pdf时，获取单页pdf信息的接口地址

  this.uploadFullUrl = _opt.uploadFullUrl || ''; // 前台解析pdf时，上传完整pdf的接口地址

  this.datas = _opt.datas || {};
  this.onPreUpload = _opt.onPreUpload;

  this.onStepFinish = _opt.onStepFinish || function () {};

  this.onFinish = _opt.onFinish || function () {};

  this.limit = _opt.limit || 2;
  this.scale = _opt.scale ? _opt.scale > 3.5 ? 3.5 : _opt.scale : 1.5; // 最大放大系数为3.5, 默认1.5

  this.quality = _opt.quality || 0.95;
  this.staticUrl = _opt.staticUrl || '';
  this.limeFileSize = _opt.limeFileSize || 20;
  this.uploadName = _opt.uploadName || 'file';
  this.useBackendUpload = _opt.useBackendUpload;
  this.pdfDoc = null;
  this.fileQuality = _opt.fileQuality;
  this.fileLimitWidth = _opt.fileLimitWidth;
  this.fileLimitHeight = _opt.fileLimitHeight;
  this.fileLimitPixel = _opt.fileLimitPixel;
  this.fileLimitSize = _opt.fileLimitSize;
};



/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cleanPdfPage", function() { return cleanPdfPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cleanPdfDoc", function() { return cleanPdfDoc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPdfDocument", function() { return getPdfDocument; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "checkMultiInvoicePdf", function() { return checkMultiInvoicePdf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOnePageData", function() { return getOnePageData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readFile", function() { return readFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pdfRenderToCanvas", function() { return pdfRenderToCanvas; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pdfToImage", function() { return pdfToImage; });
/* harmony import */ var _piaozone_com_process_image__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _piaozone_com_process_image__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_piaozone_com_process_image__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _piaozone_com_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/* harmony import */ var _piaozone_com_utils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_piaozone_com_utils__WEBPACK_IMPORTED_MODULE_1__);
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




var CryptoJS = __webpack_require__(130);

var consoleLog = _piaozone_com_utils__WEBPACK_IMPORTED_MODULE_1__["tools"].consoleLog,
    getUUId = _piaozone_com_utils__WEBPACK_IMPORTED_MODULE_1__["tools"].getUUId;

var _getDocument = function _getDocument(pdfJs, opt, filename) {
  var timeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 20000;
  return Promise.race([new Promise(function (resolve) {
    pdfJs.getDocument(opt).promise.then(function (pdfDoc) {
      pdfDoc.filename = filename;
      resolve({
        errcode: '0000',
        data: pdfDoc
      });
    })["catch"](function (err) {
      console.log(err);
      resolve({
        errcode: '5000',
        description: '服务端异常，请稍后再试'
      });
    });
  }), new Promise(function (resolve) {
    setTimeout(function () {
      resolve({
        errcode: 'getDocumentTimeout',
        description: 'pdf处理超时！'
      });
    }, timeout);
  })]);
};

var cleanPdfPage = function cleanPdfPage(p) {
  try {
    p.cleanup();
  } catch (error) {
    consoleLog('clean Pdf Page error', error);
  }
};
var cleanPdfDoc =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(pDoc) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              pDoc.cleanup();
              pDoc.destroy();
            } catch (error) {
              consoleLog('clean Pdf Doc error', error);
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function cleanPdfDoc(_x) {
    return _ref.apply(this, arguments);
  };
}(); // 获取pdf文档对象

var getPdfDocument =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(opt) {
    var pdfJs, newOpt, _opt$CMAP_URL, CMAP_URL, file, workerSrc, data, _opt$timeout, timeout, filename, fileHash, arrBuffer, wordArray, pdfDoc;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            pdfJs = __webpack_require__(167);
            newOpt = {};
            _opt$CMAP_URL = opt.CMAP_URL, CMAP_URL = _opt$CMAP_URL === void 0 ? '' : _opt$CMAP_URL, file = opt.file, workerSrc = opt.workerSrc, data = opt.data, _opt$timeout = opt.timeout, timeout = _opt$timeout === void 0 ? 20000 : _opt$timeout;

            if (workerSrc) {
              pdfJs.GlobalWorkerOptions.workerSrc = workerSrc;
            }

            if (CMAP_URL) {
              newOpt.cMapUrl = CMAP_URL;
              newOpt.cMapPacked = true;
            }

            filename = (+new Date() + '-' + Math.random()).replace('0.', '') + '.jpg';
            fileHash = '';

            if (!(typeof data !== 'undefined')) {
              _context2.next = 11;
              break;
            }

            newOpt.data = data;
            _context2.next = 27;
            break;

          case 11:
            if (!(_typeof(file) === 'object')) {
              _context2.next = 21;
              break;
            }

            _context2.next = 14;
            return readFile(file);

          case 14:
            arrBuffer = _context2.sent;
            newOpt.data = arrBuffer;
            wordArray = CryptoJS.lib.WordArray.create(arrBuffer);
            fileHash = CryptoJS.SHA256(wordArray).toString();
            filename = +new Date() + '-' + file.name;
            _context2.next = 27;
            break;

          case 21:
            if (!(typeof file === 'string')) {
              _context2.next = 26;
              break;
            }

            newOpt.url = file;
            newOpt.withCredentials = true; // 允许携带cookie

            _context2.next = 27;
            break;

          case 26:
            return _context2.abrupt("return", {
              errcode: 'err',
              description: '参数异常，文件对象为空'
            });

          case 27:
            _context2.prev = 27;
            _context2.next = 30;
            return _getDocument(pdfJs, newOpt, filename, timeout);

          case 30:
            pdfDoc = _context2.sent;
            return _context2.abrupt("return", _objectSpread({}, pdfDoc, {
              fileHash: fileHash
            }));

          case 34:
            _context2.prev = 34;
            _context2.t0 = _context2["catch"](27);
            consoleLog('获取pdf文档异常', _context2.t0);
            return _context2.abrupt("return", {
              errcode: 'err',
              description: '获取pdf文档失败'
            });

          case 38:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[27, 34]]);
  }));

  return function getPdfDocument(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

var _pdfRenderToCanvas = function _pdfRenderToCanvas(pdfDoc, canvasId) {
  var pageNo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1.5;
  return new Promise(function (resolve) {
    pdfDoc.getPage(pageNo).then(function (page) {
      var viewport = page.getViewport({
        scale: scale
      });
      var canvas = document.getElementById(canvasId);
      var context = canvas.getContext('2d');
      var width = parseInt(viewport.width);
      var height = parseInt(viewport.height);
      canvas.height = height;
      canvas.width = width;
      var renderContext = {
        canvasContext: context,
        viewport: viewport
      };
      var pageRendering = page.render(renderContext);
      pageRendering.promise.then(function (err) {
        if (err) {
          resolve({
            errcode: 'err',
            description: 'pdf处理异常'
          });
          return;
        }

        resolve({
          errcode: '0000',
          description: 'success'
        });
      });
    });
  });
}; // 校验多页pdf是否为发票pdf


var checkMultiInvoicePdf = function checkMultiInvoicePdf(pdfDoc) {
  var pageNo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  return new Promise(function (resolve) {
    pdfDoc.getPage(pageNo).then(function (page) {
      try {
        page.getTextContent().then(function (textContent) {
          if (!textContent) {
            resolve({
              errcode: '50002',
              description: '获取pdf内容异常'
            });
            return;
          }

          var textArr = [];
          var type = 2; // 默认为组装的多页PDF

          for (var i = 0; i < textContent.items.length; i++) {
            textArr.push(textContent.items[i].str);
          }

          var pdfStr = textArr.join('');

          if (pdfStr.length > 50 && pdfStr.indexOf('发票') !== -1) {
            type = 1; // 发票多页PDF
          }

          resolve({
            errcode: '0000',
            data: type
          });
        });
      } catch (error) {
        console && console.warn('获取pdf内容异常', error);
        resolve({
          errcode: '50003',
          description: '获取pdf内容异常'
        });
      }
    })["catch"](function (err) {
      console && console.warn('pdf处理异常', err);
      resolve({
        errcode: '50001',
        description: 'pdf处理异常'
      });
    });
  });
};
var getOnePageData = function getOnePageData(pdfDoc, pageNo) {
  var scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.5;
  var quality = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.95;
  var disabledToFile = arguments.length > 4 ? arguments[4] : undefined;
  var viewportProportion = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
  return new Promise(function (resolve) {
    pdfDoc.getPage(pageNo).then(function (page) {
      var view = page._pageInfo.view;

      if (view.length > 3) {
        var viewWidth = view[2] - view[0];
        var viewHeight = view[3] - view[1];

        if (viewWidth > 1300 && viewHeight > 1300) {
          // 对于过大的页，不用放大处理
          scale = 1;
        }
      }

      var viewport = page.getViewport({
        scale: scale
      });
      var canvas = document.createElement('canvas');
      var context = canvas.getContext('2d');
      var width = parseInt(viewport.width * viewportProportion);
      var height = parseInt(viewport.height * viewportProportion);
      canvas.height = height;
      canvas.width = width;
      var renderContext = {
        canvasContext: context,
        viewport: viewport
      };

      if (viewportProportion !== 1) {
        renderContext.transform = [viewportProportion, 0, 0, viewportProportion, 0, 0];
      }

      var pageRendering = page.render(renderContext);
      var filename = pageNo + '-' + pdfDoc.filename.replace(/\.(pdf|PDF)$/, '') + '.jpg';
      var baseInfo = {
        id: getUUId(),
        pageNo: pageNo,
        totalPages: pdfDoc.numPages,
        name: filename
      };
      pageRendering.promise.then(function (err) {
        if (err) {
          cleanPdfPage(page);
          resolve({
            data: baseInfo,
            errcode: 'err',
            description: 'pdf转换异常'
          });
          return;
        }

        var base64Result = canvas.toDataURL('image/jpeg', quality);

        if (disabledToFile) {
          cleanPdfPage(page);
          resolve({
            errcode: '0000',
            data: _objectSpread({}, baseInfo, {
              width: width,
              height: height,
              base64: base64Result
            })
          });
          return;
        }

        var fileRes = Object(_piaozone_com_process_image__WEBPACK_IMPORTED_MODULE_0__["base64ToFile"])(base64Result, filename);

        if (fileRes.errcode !== '0000') {
          cleanPdfPage(page);
          resolve({
            data: baseInfo,
            errcode: '50001',
            description: 'pdf处理异常'
          });
          return;
        }

        cleanPdfPage(page);
        resolve({
          errcode: '0000',
          data: _objectSpread({}, baseInfo, {
            width: width,
            height: height,
            file: fileRes.data,
            localUrl: window.URL.createObjectURL(fileRes.data)
          })
        });
      })["catch"](function (err) {
        cleanPdfPage(page);
        consoleLog('pdf处理异常', err);
        resolve({
          data: baseInfo,
          errcode: '50001',
          description: 'pdf处理异常'
        });
      });
    })["catch"](function (err) {
      consoleLog('pdf处理异常', err);
      resolve({
        errcode: '50001',
        description: 'pdf处理异常'
      });
    });
  });
};
var readFile = function readFile(file) {
  return new Promise(function (resolve) {
    var reader = new FileReader();
    reader.readAsArrayBuffer(file);

    reader.onload = function () {
      resolve(reader.result);
    };
  });
}; // pdf渲染到canvas上

var pdfRenderToCanvas =
/*#__PURE__*/
function () {
  var _ref3 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(pdfDoc, opt) {
    var canvasId, pageNo, _opt$scale, scale, res;

    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            canvasId = opt.canvasId, pageNo = opt.pageNo, _opt$scale = opt.scale, scale = _opt$scale === void 0 ? 1.5 : _opt$scale;

            if (!(scale > 3.5)) {
              _context3.next = 3;
              break;
            }

            return _context3.abrupt("return", {
              errcode: '3001',
              description: '放大系数不能超过3.5'
            });

          case 3:
            _context3.next = 5;
            return _pdfRenderToCanvas(pdfDoc, canvasId, pageNo, scale);

          case 5:
            res = _context3.sent;
            return _context3.abrupt("return", res);

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function pdfRenderToCanvas(_x3, _x4) {
    return _ref3.apply(this, arguments);
  };
}(); // pdf转换为图像

var pdfToImage =
/*#__PURE__*/
function () {
  var _ref4 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee5(pdfDoc, opt) {
    var onStepFinish, onFinish, _opt$scale2, scale, _opt$quality, quality, disabledToFile, viewportProportion, handlerFinish, totalNum, pageNo, res, resData;

    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            onStepFinish = opt.onStepFinish, onFinish = opt.onFinish, _opt$scale2 = opt.scale, scale = _opt$scale2 === void 0 ? 1.5 : _opt$scale2, _opt$quality = opt.quality, quality = _opt$quality === void 0 ? 0.95 : _opt$quality, disabledToFile = opt.disabledToFile, viewportProportion = opt.viewportProportion;

            handlerFinish =
            /*#__PURE__*/
            function () {
              var _ref5 = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee4(result) {
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        if (!(typeof onFinish === 'function')) {
                          _context4.next = 9;
                          break;
                        }

                        _context4.prev = 1;
                        _context4.next = 4;
                        return onFinish(result);

                      case 4:
                        _context4.next = 9;
                        break;

                      case 6:
                        _context4.prev = 6;
                        _context4.t0 = _context4["catch"](1);
                        consoleLog('pdf转换为图片异常', _context4.t0);

                      case 9:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4, null, [[1, 6]]);
              }));

              return function handlerFinish(_x7) {
                return _ref5.apply(this, arguments);
              };
            }();

            if (!(scale > 3.5)) {
              _context5.next = 5;
              break;
            }

            handlerFinish({
              errcode: '3001',
              description: '放大系数不能超过3.5'
            });
            return _context5.abrupt("return");

          case 5:
            totalNum = pdfDoc.numPages;
            pageNo = 1;

          case 7:
            if (!(pageNo <= totalNum)) {
              _context5.next = 24;
              break;
            }

            _context5.next = 10;
            return getOnePageData(pdfDoc, pageNo, scale, quality, disabledToFile, viewportProportion);

          case 10:
            res = _context5.sent;

            if (!(typeof onStepFinish === 'function')) {
              _context5.next = 21;
              break;
            }

            resData = res.data || {};
            _context5.prev = 13;
            _context5.next = 16;
            return onStepFinish({
              errcode: res.errcode,
              data: _objectSpread({}, resData, {
                pageNo: pageNo,
                totalNum: totalNum
              })
            });

          case 16:
            _context5.next = 21;
            break;

          case 18:
            _context5.prev = 18;
            _context5.t0 = _context5["catch"](13);
            consoleLog('回调处理异常', _context5.t0);

          case 21:
            pageNo++;
            _context5.next = 7;
            break;

          case 24:
            handlerFinish({
              errcode: '0000',
              data: {
                totalNum: totalNum
              }
            });

          case 25:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, null, [[13, 18]]);
  }));

  return function pdfToImage(_x5, _x6) {
    return _ref4.apply(this, arguments);
  };
}();

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var request = __webpack_require__(8);

var pwyRequestLib = __webpack_require__(105);

var baseExt = exports.baseExt = __webpack_require__(122);

var cookieHelp = exports.cookieHelp = __webpack_require__(104);

var cacheHelp = exports.cacheHelp = __webpack_require__(124);

var loadJs = exports.loadJs = __webpack_require__(125);

var urlHandler = exports.urlHandler = __webpack_require__(126);

var tools = exports.tools = __webpack_require__(111);

var checkInvoiceType = exports.checkInvoiceType = __webpack_require__(127).checkInvoiceType;

var checkInvoiceTypeFull = exports.checkInvoiceTypeFull = __webpack_require__(127).checkInvoiceTypeFull;

var crossHttp = exports.crossHttp = __webpack_require__(128)["default"];

var clientCheck = exports.clientCheck = __webpack_require__(129)["default"];

var kdRequest = exports.kdRequest = request.kdRequest;
var pwyFetch = exports.pwyFetch = pwyRequestLib.pwyFetch;
var pwyRequest = exports.pwyRequest = pwyRequestLib.kdRequest;
var paramJson = exports.paramJson = request.param;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.kdRequest = exports.param = exports.prePath = undefined;

var _regenerator = __webpack_require__(9);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(12);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = __webpack_require__(13);

var _promise2 = _interopRequireDefault(_promise);

var _stringify = __webpack_require__(84);

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = __webpack_require__(86);

var _typeof3 = _interopRequireDefault(_typeof2);

var kdRequest = exports.kdRequest = function () {
  var _ref3 = (0, _asyncToGenerator3["default"])(_regenerator2["default"].mark(function _callee(_ref4) {
    var _ref4$urlPre = _ref4.urlPre,
        urlPre = _ref4$urlPre === undefined ? '' : _ref4$urlPre,
        _ref4$method = _ref4.method,
        method = _ref4$method === undefined ? 'GET' : _ref4$method,
        _ref4$url = _ref4.url,
        url = _ref4$url === undefined ? '' : _ref4$url,
        _ref4$data = _ref4.data,
        data = _ref4$data === undefined ? '' : _ref4$data,
        _ref4$mode = _ref4.mode,
        mode = _ref4$mode === undefined ? 'cors' : _ref4$mode,
        _ref4$timeout = _ref4.timeout,
        timeout = _ref4$timeout === undefined ? 60000 : _ref4$timeout,
        _ref4$redirect = _ref4.redirect,
        redirect = _ref4$redirect === undefined ? 'follow' : _ref4$redirect,
        _ref4$dataType = _ref4.dataType,
        dataType = _ref4$dataType === undefined ? 'json' : _ref4$dataType,
        _ref4$credentials = _ref4.credentials,
        credentials = _ref4$credentials === undefined ? 'include' : _ref4$credentials,
        handlerError = _ref4.handlerError,
        _ref4$headers = _ref4.headers,
        headers = _ref4$headers === undefined ? {
      'Content-Type': 'application/json'
    } : _ref4$headers;
    var csrfToken, response, resData;
    return _regenerator2["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!/^http/.test(url)) {
              url = urlPre + url;
            }

            csrfToken = (0, _cookie_helps.getCookie)('csrfToken');
            if (!csrfToken) csrfToken = sessionStorage.getItem('csrfToken');

            if (url.indexOf('?') === -1) {
              url = url + '?_csrf=' + csrfToken;
            } else {
              url = url + '&_csrf=' + csrfToken;
            }

            if (csrfToken) {
              try {
                headers['x-csrf-token'] = csrfToken;
                (0, _cookie_helps.setCookie)('csrfToken', csrfToken, 30 * 60);
              } catch (e) {
                (0, _cookie_helps.setCookie)('csrfToken', csrfToken, 30 * 60);
              }
            }

            if (!window.fetch) {
              _context.next = 18;
              break;
            }

            _context.next = 8;
            return myFetch({
              url: url,
              data: data,
              dataType: dataType,
              headers: headers,
              method: method
            });

          case 8:
            response = _context.sent;

            if (!(response.status !== 200)) {
              _context.next = 13;
              break;
            }

            return _context.abrupt('return', {
              errcode: '5000',
              description: "\u8BF7\u6C42\u51FA\u9519(" + response.status + ')'
            });

          case 13:
            _context.next = 15;
            return response.text().then(function (res) {
              if (dataType === 'json') {
                try {
                  res = JSON.parse(res);
                  return res;
                } catch (e) {
                  return {
                    errcode: 'jsonErr',
                    description: '返回数据格式异常',
                    data: res
                  };
                }
              } else {
                return res;
              }
            })["catch"](function (error) {
              return {
                errcode: 'serverErr',
                description: error
              };
            });

          case 15:
            return _context.abrupt('return', _context.sent);

          case 16:
            _context.next = 23;
            break;

          case 18:
            if (method === 'GET') {
              data = param(data);
            } else if ((typeof data === 'undefined' ? 'undefined' : (0, _typeof3["default"])(data)) === 'object' && dataType === 'json') {
              data = (0, _stringify2["default"])(data);
            }

            _context.next = 21;
            return myXhr({
              method: method,
              url: url,
              data: data,
              timeout: timeout,
              credentials: credentials,
              headers: headers
            });

          case 21:
            resData = _context.sent;
            return _context.abrupt('return', resData);

          case 23:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function kdRequest(_x) {
    return _ref3.apply(this, arguments);
  };
}();

var _cookie_helps = __webpack_require__(104);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var prePath = exports.prePath = '/';

var param = exports.param = function param(data) {
  if (typeof data === 'string') {
    try {
      data = JSON.parse(data);
    } catch (e) {
      return data;
    }
  }

  var result = [];

  for (var item in data) {
    if (data.hasOwnProperty(item)) {
      result.push(item + '=' + encodeURIComponent(data[item]));
    }
  }

  return result.join('&');
};

var myFetch = function myFetch(_ref) {
  var _ref$method = _ref.method,
      method = _ref$method === undefined ? 'GET' : _ref$method,
      _ref$url = _ref.url,
      url = _ref$url === undefined ? '' : _ref$url,
      _ref$data = _ref.data,
      data = _ref$data === undefined ? '' : _ref$data,
      _ref$mode = _ref.mode,
      mode = _ref$mode === undefined ? 'cors' : _ref$mode,
      _ref$timeout = _ref.timeout,
      timeout = _ref$timeout === undefined ? 60000 : _ref$timeout,
      _ref$redirect = _ref.redirect,
      redirect = _ref$redirect === undefined ? 'follow' : _ref$redirect,
      _ref$dataType = _ref.dataType,
      dataType = _ref$dataType === undefined ? 'json' : _ref$dataType,
      _ref$credentials = _ref.credentials,
      credentials = _ref$credentials === undefined ? 'include' : _ref$credentials,
      _ref$headers = _ref.headers,
      headers = _ref$headers === undefined ? {
    'Content-Type': 'application/json'
  } : _ref$headers;
  var requestObj = {
    method: method,
    mode: mode,
    credentials: credentials,
    redirect: redirect
  };

  if (method === 'GET') {
    data = param(data);
  } else if ((typeof data === 'undefined' ? 'undefined' : (0, _typeof3["default"])(data)) === 'object' && dataType === 'json') {
    data = (0, _stringify2["default"])(data);
  }

  if (method === 'GET') {
    if (url.indexOf('?') === -1) {
      url += '?' + data;
    } else {
      url += '&' + data;
    }
  } else if (method === 'POST') {
    requestObj.body = data;
  }

  if (dataType === 'json') {
    requestObj.headers = headers;
  }

  return fetch(url, requestObj);
};

function myXhr(_ref2) {
  var _ref2$method = _ref2.method,
      method = _ref2$method === undefined ? 'GET' : _ref2$method,
      _ref2$url = _ref2.url,
      url = _ref2$url === undefined ? '' : _ref2$url,
      _ref2$data = _ref2.data,
      data = _ref2$data === undefined ? '' : _ref2$data,
      _ref2$timeout = _ref2.timeout,
      timeout = _ref2$timeout === undefined ? 60000 : _ref2$timeout,
      _ref2$credentials = _ref2.credentials,
      credentials = _ref2$credentials === undefined ? 'include' : _ref2$credentials,
      contentType = _ref2.contentType,
      headers = _ref2.headers,
      success = _ref2.success;
  contentType = headers['Content-Type'] || 'application/json;charset=UTF-8';
  return new _promise2["default"](function (resolve, reject) {
    var xhr = void 0;

    if (XMLHttpRequest) {
      xhr = new XMLHttpRequest();
    }

    if (!xhr && typeof XDomainRequest !== 'undefined') {
      xhr = new XDomainRequest();
    }

    try {
      xhr.timeout = timeout;
    } catch (e) {
      console.warn('设置超时时间异常');
    }

    xhr.ontimeout = function () {
      resolve({
        errcode: 'timeoutErr',
        description: '请求超时！'
      });
    };

    if (contentType) {
      try {
        xhr.contentType = contentType;
      } catch (e) {
        console.warn('设置contentType异常');
      }
    }

    xhr.onload = function () {
      if (xhr.readyState === 4) {
        var status = xhr.status;

        if (status === 200) {
          var resData = xhr.responseText;

          try {
            resData = JSON.parse(resData);
            resolve(resData);
          } catch (e) {
            resolve({
              errcode: 'innerErr',
              description: '返回数据出错！'
            });
          }
        } else {
          resolve({
            errcode: 'requestErr',
            description: "\u8BF7\u6C42\u51FA\u9519" + status
          });
        }
      }
    };

    xhr.onerror = function (error) {
      resolve({
        errcode: 'requestErr',
        description: "\u8BF7\u6C42\u5F02\u5E38"
      });
    };

    xhr.open(method, url, true);

    try {
      xhr.setRequestHeader('Content-Type', contentType);
      if (headers['x-csrf-token']) xhr.setRequestHeader('x-csrf-token', headers['x-csrf-token']);
    } catch (error) {}

    xhr.send(data);
  });
}

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(10);


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() { return this })() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(11);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),
/* 11 */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _promise = __webpack_require__(13);

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new _promise2.default(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return _promise2.default.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(14), __esModule: true };

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(15);
__webpack_require__(16);
__webpack_require__(60);
__webpack_require__(64);
__webpack_require__(82);
__webpack_require__(83);
module.exports = __webpack_require__(24).Promise;


/***/ }),
/* 15 */
/***/ (function(module, exports) {



/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(17)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(20)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(18);
var defined = __webpack_require__(19);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 18 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 19 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(21);
var $export = __webpack_require__(22);
var redefine = __webpack_require__(38);
var hide = __webpack_require__(27);
var Iterators = __webpack_require__(39);
var $iterCreate = __webpack_require__(40);
var setToStringTag = __webpack_require__(56);
var getPrototypeOf = __webpack_require__(58);
var ITERATOR = __webpack_require__(57)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 21 */
/***/ (function(module, exports) {

module.exports = true;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(23);
var core = __webpack_require__(24);
var ctx = __webpack_require__(25);
var hide = __webpack_require__(27);
var has = __webpack_require__(37);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 23 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 24 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.12' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(26);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(28);
var createDesc = __webpack_require__(36);
module.exports = __webpack_require__(32) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(29);
var IE8_DOM_DEFINE = __webpack_require__(31);
var toPrimitive = __webpack_require__(35);
var dP = Object.defineProperty;

exports.f = __webpack_require__(32) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(30);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 30 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(32) && !__webpack_require__(33)(function () {
  return Object.defineProperty(__webpack_require__(34)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(33)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 33 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(30);
var document = __webpack_require__(23).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(30);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 36 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 37 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(27);


/***/ }),
/* 39 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(41);
var descriptor = __webpack_require__(36);
var setToStringTag = __webpack_require__(56);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(27)(IteratorPrototype, __webpack_require__(57)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(29);
var dPs = __webpack_require__(42);
var enumBugKeys = __webpack_require__(54);
var IE_PROTO = __webpack_require__(51)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(34)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(55).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(28);
var anObject = __webpack_require__(29);
var getKeys = __webpack_require__(43);

module.exports = __webpack_require__(32) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(44);
var enumBugKeys = __webpack_require__(54);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(37);
var toIObject = __webpack_require__(45);
var arrayIndexOf = __webpack_require__(48)(false);
var IE_PROTO = __webpack_require__(51)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(46);
var defined = __webpack_require__(19);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(47);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 47 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(45);
var toLength = __webpack_require__(49);
var toAbsoluteIndex = __webpack_require__(50);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(18);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(18);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(52)('keys');
var uid = __webpack_require__(53);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(24);
var global = __webpack_require__(23);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(21) ? 'pure' : 'global',
  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
});


/***/ }),
/* 53 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 54 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(23).document;
module.exports = document && document.documentElement;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(28).f;
var has = __webpack_require__(37);
var TAG = __webpack_require__(57)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(52)('wks');
var uid = __webpack_require__(53);
var Symbol = __webpack_require__(23).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(37);
var toObject = __webpack_require__(59);
var IE_PROTO = __webpack_require__(51)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(19);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(61);
var global = __webpack_require__(23);
var hide = __webpack_require__(27);
var Iterators = __webpack_require__(39);
var TO_STRING_TAG = __webpack_require__(57)('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(62);
var step = __webpack_require__(63);
var Iterators = __webpack_require__(39);
var toIObject = __webpack_require__(45);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(20)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 62 */
/***/ (function(module, exports) {

module.exports = function () { /* empty */ };


/***/ }),
/* 63 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(21);
var global = __webpack_require__(23);
var ctx = __webpack_require__(25);
var classof = __webpack_require__(65);
var $export = __webpack_require__(22);
var isObject = __webpack_require__(30);
var aFunction = __webpack_require__(26);
var anInstance = __webpack_require__(66);
var forOf = __webpack_require__(67);
var speciesConstructor = __webpack_require__(71);
var task = __webpack_require__(72).set;
var microtask = __webpack_require__(74)();
var newPromiseCapabilityModule = __webpack_require__(75);
var perform = __webpack_require__(76);
var userAgent = __webpack_require__(77);
var promiseResolve = __webpack_require__(78);
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(57)('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(79)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(56)($Promise, PROMISE);
__webpack_require__(80)(PROMISE);
Wrapper = __webpack_require__(24)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(81)(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(47);
var TAG = __webpack_require__(57)('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),
/* 66 */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(25);
var call = __webpack_require__(68);
var isArrayIter = __webpack_require__(69);
var anObject = __webpack_require__(29);
var toLength = __webpack_require__(49);
var getIterFn = __webpack_require__(70);
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(29);
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(39);
var ITERATOR = __webpack_require__(57)('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(65);
var ITERATOR = __webpack_require__(57)('iterator');
var Iterators = __webpack_require__(39);
module.exports = __webpack_require__(24).getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(29);
var aFunction = __webpack_require__(26);
var SPECIES = __webpack_require__(57)('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(25);
var invoke = __webpack_require__(73);
var html = __webpack_require__(55);
var cel = __webpack_require__(34);
var global = __webpack_require__(23);
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(47)(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),
/* 73 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(23);
var macrotask = __webpack_require__(72).set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(47)(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(26);

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),
/* 76 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(23);
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(29);
var isObject = __webpack_require__(30);
var newPromiseCapability = __webpack_require__(75);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var hide = __webpack_require__(27);
module.exports = function (target, src, safe) {
  for (var key in src) {
    if (safe && target[key]) target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(23);
var core = __webpack_require__(24);
var dP = __webpack_require__(28);
var DESCRIPTORS = __webpack_require__(32);
var SPECIES = __webpack_require__(57)('species');

module.exports = function (KEY) {
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(57)('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(22);
var core = __webpack_require__(24);
var global = __webpack_require__(23);
var speciesConstructor = __webpack_require__(71);
var promiseResolve = __webpack_require__(78);

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-promise-try
var $export = __webpack_require__(22);
var newPromiseCapability = __webpack_require__(75);
var perform = __webpack_require__(76);

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(85), __esModule: true };

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(24);
var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
module.exports = function stringify(it) { // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _iterator = __webpack_require__(87);

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(90);

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(88), __esModule: true };

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(16);
__webpack_require__(60);
module.exports = __webpack_require__(89).f('iterator');


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(57);


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(91), __esModule: true };

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(92);
__webpack_require__(15);
__webpack_require__(102);
__webpack_require__(103);
module.exports = __webpack_require__(24).Symbol;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(23);
var has = __webpack_require__(37);
var DESCRIPTORS = __webpack_require__(32);
var $export = __webpack_require__(22);
var redefine = __webpack_require__(38);
var META = __webpack_require__(93).KEY;
var $fails = __webpack_require__(33);
var shared = __webpack_require__(52);
var setToStringTag = __webpack_require__(56);
var uid = __webpack_require__(53);
var wks = __webpack_require__(57);
var wksExt = __webpack_require__(89);
var wksDefine = __webpack_require__(94);
var enumKeys = __webpack_require__(95);
var isArray = __webpack_require__(98);
var anObject = __webpack_require__(29);
var isObject = __webpack_require__(30);
var toObject = __webpack_require__(59);
var toIObject = __webpack_require__(45);
var toPrimitive = __webpack_require__(35);
var createDesc = __webpack_require__(36);
var _create = __webpack_require__(41);
var gOPNExt = __webpack_require__(99);
var $GOPD = __webpack_require__(101);
var $GOPS = __webpack_require__(96);
var $DP = __webpack_require__(28);
var $keys = __webpack_require__(43);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(100).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(97).f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(21)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });

$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(27)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(53)('meta');
var isObject = __webpack_require__(30);
var has = __webpack_require__(37);
var setDesc = __webpack_require__(28).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(33)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(23);
var core = __webpack_require__(24);
var LIBRARY = __webpack_require__(21);
var wksExt = __webpack_require__(89);
var defineProperty = __webpack_require__(28).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(43);
var gOPS = __webpack_require__(96);
var pIE = __webpack_require__(97);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 96 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 97 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(47);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(45);
var gOPN = __webpack_require__(100).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(44);
var hiddenKeys = __webpack_require__(54).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(97);
var createDesc = __webpack_require__(36);
var toIObject = __webpack_require__(45);
var toPrimitive = __webpack_require__(35);
var has = __webpack_require__(37);
var IE8_DOM_DEFINE = __webpack_require__(31);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(32) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(94)('asyncIterator');


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(94)('observable');


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var getCookie = exports.getCookie = function getCookie(name) {
  var nameEQ = name + '=';
  var str = document.cookie.split(';');

  for (var i = 0; i < str.length; i++) {
    var c = str[i];

    while (c.charAt(0) === ' ') {
      c = c.substring(1, c.length);
    }

    if (c.indexOf(nameEQ) === 0) {
      return unescape(c.substring(nameEQ.length, c.length));
    }
  }

  return '';
};

var clearCookie = exports.clearCookie = function clearCookie(name) {
  setCookie(name, '', -1);
};

var setCookie = exports.setCookie = function setCookie(name, value, seconds) {
  var otherStr = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
  seconds = seconds || 0;
  var expires = "";

  if (seconds !== 0) {
    var date = new Date();
    date.setTime(date.getTime() + seconds * 1000);
    expires = "; expires=" + date.toGMTString();

    if (otherStr) {
      expires += '; ' + otherStr;
    }
  }

  document.cookie = name + "=" + escape(value) + expires + "; path=/";
};

var clearAllCookie = exports.clearAllCookie = function clearAllCookie() {
  var strCookie = document.cookie;
  var arrCookie = strCookie.split("; ");

  for (var i = 0, len = arrCookie.length; i < len; i++) {
    var arr = arrCookie[i].split("=");

    if (arr.length > 0) {
      setCookie(arr[0], '', -1);
    }
  }
};

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.kdRequest = exports.pwyFetch = exports.errcodeInfo = undefined;

var _stringify = __webpack_require__(84);

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = __webpack_require__(86);

var _typeof3 = _interopRequireDefault(_typeof2);

var _regenerator = __webpack_require__(9);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(12);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = __webpack_require__(106);

var _extends3 = _interopRequireDefault(_extends2);

var _promise = __webpack_require__(13);

var _promise2 = _interopRequireDefault(_promise);

var kdRequest = exports.kdRequest = function () {
  var _ref5 = (0, _asyncToGenerator3["default"])(_regenerator2["default"].mark(function _callee4(_ref6) {
    var _ref6$method = _ref6.method,
        method = _ref6$method === undefined ? 'GET' : _ref6$method,
        _ref6$url = _ref6.url,
        url = _ref6$url === undefined ? '' : _ref6$url,
        _ref6$data = _ref6.data,
        data = _ref6$data === undefined ? {} : _ref6$data,
        _ref6$timeout = _ref6.timeout,
        timeout = _ref6$timeout === undefined ? 90000 : _ref6$timeout,
        _ref6$dataType = _ref6.dataType,
        dataType = _ref6$dataType === undefined ? 'json' : _ref6$dataType,
        _ref6$headers = _ref6.headers,
        headers = _ref6$headers === undefined ? {
      'Content-Type': 'application/json'
    } : _ref6$headers;
    return _regenerator2["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return pwyFetch(url, {
              body: data,
              headers: headers,
              timeout: timeout,
              dataType: dataType,
              method: method.toUpperCase()
            });

          case 2:
            return _context4.abrupt('return', _context4.sent);

          case 3:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function kdRequest(_x11) {
    return _ref5.apply(this, arguments);
  };
}();

var _cookie_helps = __webpack_require__(104);

var _kdRequest = __webpack_require__(8);

var _tools = __webpack_require__(111);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var defaultTimeout = 90000;
var errcodeInfo = exports.errcodeInfo = {
  gatewayTimeout: {
    errcode: 'gatewayTimeout',
    description: '网关超时，请稍后再试!'
  },
  serverErr: {
    errcode: 'serverErr',
    description: '服务端异常, 请稍后再试！'
  },
  requestErr: {
    errcode: 'requestErr',
    description: '请求错误, 请检查网络或参数！'
  },
  timeoutErr: {
    errcode: 'timeoutErr',
    description: '请求超时, 请检查网络是否正常！'
  }
};

var createFetch = function createFetch(url, options) {
  return new _promise2["default"](function (resolve) {
    var _ref = options || {},
        _ref$dataType = _ref.dataType,
        dataType = _ref$dataType === undefined ? 'json' : _ref$dataType,
        method = _ref.method,
        _ref$headers = _ref.headers,
        headers = _ref$headers === undefined ? {} : _ref$headers,
        _ref$mode = _ref.mode,
        mode = _ref$mode === undefined ? 'cors' : _ref$mode,
        _ref$credentials = _ref.credentials,
        credentials = _ref$credentials === undefined ? 'include' : _ref$credentials,
        _ref$redirect = _ref.redirect,
        redirect = _ref$redirect === undefined ? 'follow' : _ref$redirect,
        body = _ref.body,
        onResponseProgress = _ref.onResponseProgress,
        callback = _ref.callback;

    var requestObj = {
      method: method,
      mode: mode,
      credentials: credentials,
      redirect: redirect
    };

    var handler = function handler(res) {
      if (typeof callback === 'function') {
        callback(res);
      } else {
        resolve(res);
      }
    };

    var upperMethod = method.toUpperCase();

    if (dataType === 'json' || dataType === 'text') {
      requestObj.dataType = 'text';
    }

    requestObj.headers = headers;

    if (upperMethod !== 'GET') {
      requestObj.body = body;
    }

    fetch(url, requestObj).then(function (response) {
      if (response.status === 504) {
        handler(errcodeInfo.gatewayTimeout);
      } else if (response.status === 500) {
        handler(errcodeInfo.serverErr);
      } else if (response.status === 400 || response.status === 404) {
        handler(errcodeInfo.requestErr);
      } else {
        var handlerRes = function handlerRes(resText) {
          var res = void 0;

          if (dataType === 'json') {
            try {
              res = JSON.parse(resText);
            } catch (err1) {
              (0, _tools.consoleLog)(err1);
              res = (0, _extends3["default"])({}, errcodeInfo.serverErr);
            }

            handler(res);
          } else {
            handler(resText);
          }
        };

        if (typeof onResponseProgress === 'function' && typeof TextDecoder === 'function') {
          var reader = response.body.getReader();
          var decoder = new TextDecoder();
          var bytesReceived = 0;
          var resText = '';
          var conentLength = response.headers.get('content-length');
          conentLength = parseInt(conentLength);
          return reader.read().then(function processResult(result) {
            if (result.done) {
              onResponseProgress(bytesReceived, conentLength);
              handlerRes(resText);
              return;
            }

            bytesReceived += result.value.length;
            resText += decoder.decode(result.value);
            onResponseProgress(bytesReceived, conentLength);
            return reader.read().then(processResult);
          });
        } else {
          response.text().then(function (resText) {
            handlerRes(resText);
          })["catch"](function (err2) {
            (0, _tools.consoleLog)(err2);
            handler(errcodeInfo.requestErr);
          });
        }
      }
    })["catch"](function (err3) {
      (0, _tools.consoleLog)(err3);
      handler(errcodeInfo.requestErr);
    });
  });
};

var __createTimeoutFetch = function () {
  var _ref2 = (0, _asyncToGenerator3["default"])(_regenerator2["default"].mark(function _callee(url, options) {
    return _regenerator2["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _promise2["default"].race([createFetch(url, options), new _promise2["default"](function (resolve) {
              setTimeout(function () {
                var res = (0, _extends3["default"])({}, errcodeInfo.timeoutErr);

                if (typeof options.callback === 'function') {
                  options.callback(res);
                } else {
                  resolve(res);
                }
              }, options.timeout || defaultTimeout);
            })]);

          case 2:
            return _context.abrupt('return', _context.sent);

          case 3:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function __createTimeoutFetch(_x, _x2) {
    return _ref2.apply(this, arguments);
  };
}();

var __XMLHttpRequest = function __XMLHttpRequest(url, options) {
  return new _promise2["default"](function (resolve) {
    var xhr = new window.XMLHttpRequest();
    var _options$method = options.method,
        method = _options$method === undefined ? 'GET' : _options$method,
        _options$body = options.body,
        body = _options$body === undefined ? null : _options$body,
        _options$dataType = options.dataType,
        dataType = _options$dataType === undefined ? 'json' : _options$dataType,
        headers = options.headers,
        callback = options.callback,
        onRequestProgress = options.onRequestProgress,
        onResponseProgress = options.onResponseProgress,
        onProgress = options.onProgress;

    var handler = function handler(res) {
      if (typeof callback === 'function') {
        callback(res);
      } else {
        resolve(res);
      }
    };

    var handlerOnProgress = function handlerOnProgress() {
      var loaded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var total = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

      if (typeof onProgress === 'function') {
        try {
          onProgress(xhr.readyState, xhr.status, loaded, total);
        } catch (error) {
          (0, _tools.consoleLog)(error);
        }
      }
    };

    handlerOnProgress();
    xhr.open(method, url, true);
    handlerOnProgress();

    xhr.ontimeout = function () {
      handler(errcodeInfo.timeoutErr);
      handlerOnProgress();
    };

    if (typeof onRequestProgress === 'function' || typeof onProgress === 'function') {
      xhr.upload.onprogress = function () {
        var evt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (typeof onRequestProgress === 'function') {
          try {
            onRequestProgress(evt.loaded, evt.total);
          } catch (error) {
            (0, _tools.consoleLog)(error);
          }
        }

        handlerOnProgress(evt.loaded, evt.total);
      };
    }

    if (typeof onResponseProgress === 'function' || typeof onProgress === 'function') {
      xhr.onprogress = function () {
        var evt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (typeof onResponseProgress === 'function') {
          try {
            onResponseProgress(evt.loaded, evt.total);
          } catch (error) {
            (0, _tools.consoleLog)(error);
          }
        }

        handlerOnProgress(evt.loaded, evt.total);
      };
    }

    xhr.onreadystatechange = function () {
      handlerOnProgress();
      var readyState = xhr.readyState;
      var status = xhr.status;

      if (readyState === 4 && status === 200) {
        var resText = xhr.responseText;
        var res = void 0;

        if (dataType === 'json') {
          try {
            res = JSON.parse(resText);
          } catch (err1) {
            (0, _tools.consoleLog)(err1);
            res = (0, _extends3["default"])({}, errcodeInfo.serverErr);
          }

          handler(res);
        } else {
          console && console.warn('xhr onreadystatechange resText', resText);
          handler(resText);
        }

        xhr = null;
      }
    };

    xhr.onerror = function (error) {
      (0, _tools.consoleLog)('xhr error: ', error);
      handler(errcodeInfo.requestErr);
      handlerOnProgress();
    };

    if (headers && headers['Content-Type']) {
      xhr.setRequestHeader('Content-Type', headers['Content-Type']);
    }

    if (headers && headers['x-csrf-token']) {
      xhr.setRequestHeader('x-csrf-token', headers['x-csrf-token']);
    }

    if (dataType === 'json') {
      xhr.responseType = 'text';
    }

    xhr.timeout = options.timeout || defaultTimeout;

    if (method.toLowerCase() === 'post') {
      xhr.send(body);
    } else {
      xhr.send(null);
    }

    handlerOnProgress();
  });
};

var __XDomainRequest = function () {
  var _ref3 = (0, _asyncToGenerator3["default"])(_regenerator2["default"].mark(function _callee2(url, options) {
    var __innerXdr;

    return _regenerator2["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            __innerXdr = new _promise2["default"](function (resolve) {
              var xdr = new window.XDomainRequest();
              var _options$method2 = options.method,
                  method = _options$method2 === undefined ? 'GET' : _options$method2,
                  _options$body2 = options.body,
                  body = _options$body2 === undefined ? null : _options$body2,
                  callback = options.callback,
                  _options$dataType2 = options.dataType,
                  dataType = _options$dataType2 === undefined ? 'json' : _options$dataType2;

              var handler = function handler(res) {
                if (typeof callback === 'function') {
                  callback(res);
                } else {
                  resolve(res);
                }
              };

              xdr.open(method, url);

              xdr.ontimeout = function () {
                handler(errcodeInfo.timeoutErr);
              };

              xdr.onerror = function (error) {
                (0, _tools.consoleLog)(error);
                handler(errcodeInfo.requestErr);
              };

              xdr.onload = function () {
                var resText = xhr.responseText;
                var res = void 0;

                if (dataType === 'json') {
                  try {
                    res = JSON.parse(resText);
                  } catch (err1) {
                    (0, _tools.consoleLog)(err1);
                    res = (0, _extends3["default"])({}, errcodeInfo.serverErr);
                  }

                  handler(res);
                } else {
                  handler(resText);
                }
              };

              if (method.toLowerCase() === 'post') {
                xdr.send(body);
              } else {
                xdr.send(null);
              }
            });
            _context2.next = 3;
            return _promise2["default"].race([__innerXdr, new _promise2["default"](function (r) {
              setTimeout(function () {
                var res = (0, _extends3["default"])({}, errcodeInfo.timeoutErr);

                if (typeof callback === 'function') {
                  callback(res);
                } else {
                  r(res);
                }
              }, options.timeout || defaultTimeout);
            })]);

          case 3:
            return _context2.abrupt('return', _context2.sent);

          case 4:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function __XDomainRequest(_x7, _x8) {
    return _ref3.apply(this, arguments);
  };
}();

var pwyFetch = exports.pwyFetch = function () {
  var _ref4 = (0, _asyncToGenerator3["default"])(_regenerator2["default"].mark(function _callee3(url, options) {
    var method, body, headers, upperMethod, contentType, csrfToken, res;
    return _regenerator2["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            method = options.method || 'GET';
            body = options.data || options.body;
            headers = options.headers || {};
            upperMethod = method.toUpperCase();
            contentType = options.contentType || 'json';

            if (contentType === 'json') {
              headers['Content-Type'] = 'application/json; charset=UTF-8';
            }

            csrfToken = (0, _cookie_helps.getCookie)('csrfToken');
            if (!csrfToken) csrfToken = sessionStorage.getItem('csrfToken');

            if (url.indexOf('?') === -1) {
              url = url + '?_csrf=' + csrfToken;
            } else {
              url = url + '&_csrf=' + csrfToken;
            }

            if (csrfToken) {
              try {
                headers['x-csrf-token'] = csrfToken;
                (0, _cookie_helps.setCookie)('csrfToken', csrfToken, 30 * 60);
              } catch (e) {
                (0, _cookie_helps.setCookie)('csrfToken', csrfToken, 30 * 60);
              }
            }

            options = (0, _extends3["default"])({}, options, {
              headers: headers,
              body: body
            });

            if (upperMethod === 'GET') {
              if (typeof options.disabledCache === 'undefined' || options.disabledCache === false) {
                if (url.indexOf('?') === -1) {
                  url = url + '?random=' + Math.random();
                } else {
                  url = url + '&random=' + Math.random();
                }
              }

              if (body && (typeof body === 'undefined' ? 'undefined' : (0, _typeof3["default"])(body)) === 'object') {
                body = (0, _kdRequest.param)(body, true);

                if (body) {
                  url += '&' + body;
                }
              }
            }

            if (upperMethod === 'POST' && body && (typeof body === 'undefined' ? 'undefined' : (0, _typeof3["default"])(body)) === 'object' && contentType === 'json') {
              options = (0, _extends3["default"])({}, options, {
                body: (0, _stringify2["default"])(body)
              });
            }

            res = void 0;

            if (!(window.fetch && !options.onRequestProgress && !options.disabledFetch && !options.onProgress)) {
              _context3.next = 18;
              break;
            }

            res = __createTimeoutFetch(url, options);
            _context3.next = 28;
            break;

          case 18:
            if (!window.XMLHttpRequest) {
              _context3.next = 24;
              break;
            }

            _context3.next = 21;
            return __XMLHttpRequest(url, options);

          case 21:
            res = _context3.sent;
            _context3.next = 28;
            break;

          case 24:
            if (!window.XDomainRequest) {
              _context3.next = 28;
              break;
            }

            _context3.next = 27;
            return __XDomainRequest(url, options);

          case 27:
            res = _context3.sent;

          case 28:
            return _context3.abrupt('return', res);

          case 29:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function pwyFetch(_x9, _x10) {
    return _ref4.apply(this, arguments);
  };
}();

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _assign = __webpack_require__(107);

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _assign2.default || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(108), __esModule: true };

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(109);
module.exports = __webpack_require__(24).Object.assign;


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(22);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(110) });


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var DESCRIPTORS = __webpack_require__(32);
var getKeys = __webpack_require__(43);
var gOPS = __webpack_require__(96);
var pIE = __webpack_require__(97);
var toObject = __webpack_require__(59);
var IObject = __webpack_require__(46);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(33)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readAsBinaryString = exports.getInvoiceErrInfo = exports.isInVisualArea = exports.consoleLog = exports.getUUId = exports.downloadFile = exports.blobToFile = exports.getInvoiceQrInfoNew = exports.getInvoiceQrInfo = exports.checkInvoiceTin = exports.checkInvoiceTitle = exports.getInvoiceTypeName = undefined;

var _promise = __webpack_require__(13);

var _promise2 = _interopRequireDefault(_promise);

var _typeof2 = __webpack_require__(86);

var _typeof3 = _interopRequireDefault(_typeof2);

var _stringify = __webpack_require__(84);

var _stringify2 = _interopRequireDefault(_stringify);

var _defineProperty2 = __webpack_require__(112);

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _assign = __webpack_require__(107);

var _assign2 = _interopRequireDefault(_assign);

var _kdRequest = __webpack_require__(8);

var _cookie_helps = __webpack_require__(104);

var _pwyConstants = __webpack_require__(116);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var INPUT_INVOICE_TYPES_DICT = _pwyConstants.invoiceTypes.INPUT_INVOICE_TYPES_DICT;

var getInvoiceTypeName = exports.getInvoiceTypeName = function getInvoiceTypeName(i) {
  var dict = {
    'k1': '普通电子发票',
    'k2': '电子发票专票',
    'k3': '普通纸质发票',
    'k4': '专用纸质发票',
    'k5': '普通纸质卷式发票',
    'k7': '通用机打票',
    'k8': '的士票',
    'k9': '火车票',
    'k10': '飞机票',
    'k11': '其他票',
    'k12': '机动车发票',
    'k13': '二手车发票',
    'k14': '定额发票',
    'k15': '通行费电子发票',
    'k16': '客运发票',
    'k17': '过路过桥费'
  };
  return dict['k' + i] || '--';
};

var checkInvoiceTitle = exports.checkInvoiceTitle = function checkInvoiceTitle(fplx) {
  var invoiceGhf_mc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var ghf_mc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var checkMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'simple';
  var checkInvoiceTypes = [1, 3, 4, 5, 15];
  var filterReg = /[^A-Za-z0-9\u4e00-\u9fa5]/g;

  if (checkInvoiceTypes.indexOf(parseInt(fplx)) !== -1) {
    invoiceGhf_mc = invoiceGhf_mc.replace(filterReg, '').trim();
    ghf_mc = ghf_mc.replace(filterReg, '').trim();

    if (checkMode === 'strict') {
      if (invoiceGhf_mc === ghf_mc) {
        return 1;
      } else {
        return 2;
      }
    } else if (checkMode === 'simple') {
      if (invoiceGhf_mc.length < 6 || invoiceGhf_mc === ghf_mc) {
        return 1;
      } else {
        return 2;
      }
    }
  } else {
    return 3;
  }
};

var checkInvoiceTin = exports.checkInvoiceTin = function checkInvoiceTin(fplx) {
  var invoiceGhf_tin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var ghf_tin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var invoiceGhf_mc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
  var checkMode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'simple';
  var checkInvoiceTypes = [1, 3, 4, 5, 15];
  var filterReg = /[^A-Za-z0-9\u4e00-\u9fa5]/g;

  if (checkInvoiceTypes.indexOf(parseInt(fplx)) !== -1) {
    if (checkMode === 'strict') {
      if (invoiceGhf_tin === ghf_tin) {
        return 1;
      } else {
        return 2;
      }
    } else if (checkMode === 'simple') {
      invoiceGhf_mc = invoiceGhf_mc.replace(filterReg, '').trim();

      if (invoiceGhf_mc.length < 6 || invoiceGhf_tin === ghf_tin) {
        return 1;
      } else {
        return 2;
      }
    }
  } else {
    return 3;
  }
};

var getInvoiceQrInfo = exports.getInvoiceQrInfo = function getInvoiceQrInfo(qrStr) {
  var fpInfo = qrStr.replace(/[，]/g, ',').split(',');

  try {
    var fpdm = fpInfo[2];
    var fphm = fpInfo[3];
    var kprq = fpInfo[5];
    var amount = fpInfo[4];
    var jym = fpInfo[6].substr(-6);

    if (!fpdm || !fphm || !kprq) {
      return false;
    } else {
      return fpInfo = {
        fpdm: fpdm,
        fphm: fphm,
        kprq: kprq,
        amount: amount,
        jym: jym
      };
    }
  } catch (e) {
    return false;
  }
};

function urlSearch() {
  var search = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  search = search.replace('?', '&');
  if (typeof search !== "string" || !search) return search;
  return search.split("&").reduce(function (res, cur) {
    var arr = cur.split("=");
    return (0, _assign2["default"])((0, _defineProperty3["default"])({}, arr[0], arr[1]), res);
  }, {});
}

function checkInvoiceType(fpdm) {
  var last3Str = fpdm.substr(fpdm.length - 3);
  var last2Str = fpdm.substr(fpdm.length - 2);
  var firstStr = fpdm.substr(0, 1);
  var eighthStr = fpdm.substr(7, 1);
  var sixthStr = fpdm.substr(5, 1);

  if (fpdm.length == '10') {
    if (last3Str === '130' || last3Str === '140' || last3Str === '160' || last3Str === '170') {
      return 4;
    } else {
      return 3;
    }
  } else {
    if (fpdm.length == 12) {
      if (firstStr == '0' && last2Str == '12') {
        return 15;
      }

      if (firstStr == '0' && last2Str == '11') {
        return 1;
      }

      if (firstStr == '0' && last2Str == '06') {
        return 5;
      }

      if (firstStr == '0' && last2Str == '07') {
        return 5;
      }

      if (firstStr == '0' && last2Str == '17') {
        return 13;
      }

      if (sixthStr == '1' || sixthStr == '2') {
        if (eighthStr == '2') {
          return 12;
        }
      }

      if (firstStr == '0' && last2Str == '13') {
        return 2;
      }
    }
  }

  return 3;
}

var getInvoiceQrInfoNew = exports.getInvoiceQrInfoNew = function getInvoiceQrInfoNew(qrStr) {
  if (qrStr.indexOf('https' || false) > -1 && qrStr.indexOf('?')) {
    var _urlSearch = urlSearch(qrStr),
        _urlSearch$bill_num = _urlSearch.bill_num,
        bill_num = _urlSearch$bill_num === undefined ? '' : _urlSearch$bill_num,
        _urlSearch$total_amou = _urlSearch.total_amount,
        total_amount = _urlSearch$total_amou === undefined ? '' : _urlSearch$total_amou,
        _urlSearch$hash = _urlSearch.hash,
        hash = _urlSearch$hash === undefined ? '' : _urlSearch$hash;

    if (bill_num != '' && total_amount != '' && hash != '') {
      return {
        errcode: '0000',
        qrcodeType: 'web',
        data: {
          bill_num: bill_num,
          total_amount: total_amount,
          hash: hash
        },
        description: '成功'
      };
    } else {
      return {
        errcode: 'fail',
        qrcodeType: 'web',
        description: '请扫描发票（电，普，专）'
      };
    }
  } else {
    var fpInfo = qrStr.replace(/[，]/g, ',').split(',');

    try {
      var index = fpInfo[6].indexOf('20');
      var fpdm = fpInfo[2];
      var fphm = fpInfo[3];

      if (fpInfo[6].length == 8 && index == 0) {
        var kprq = fpInfo[6];
        var amount = fpInfo[5];
        var jym = fpInfo[7].substr(-5);
        return {
          errcode: '0000',
          qrcodeType: 'string',
          data: {
            fpdm: fpdm,
            fphm: fphm,
            kprq: kprq,
            amount: amount,
            jym: jym
          },
          description: '成功'
        };
      } else {
        var _kprq = fpInfo[5];
        var _amount = fpInfo[4];

        var _jym = fpInfo[6].substr(-6);

        if (!fpdm || !fphm || !_kprq) {
          return {
            errcode: 'fail',
            qrcodeType: 'string',
            description: '请扫描发票（电，普，专）'
          };
        } else {
          if (_amount == '' && _jym == '') {
            return {
              errcode: 'fail',
              description: '请扫描发票（电，普，专）'
            };
          } else {
            var fplxArr = [1, 2, 3, 4, 15];
            var fplx = checkInvoiceType(fpdm);

            if (fplxArr.indexOf(fplx) == '-1') {
              return {
                errcode: 'fail',
                description: '请扫描发票（电，普，专）'
              };
            } else {
              return {
                errcode: '0000',
                qrcodeType: 'string',
                data: {
                  fpdm: fpdm,
                  fphm: fphm,
                  kprq: _kprq,
                  amount: _amount,
                  jym: _jym
                },
                description: '成功'
              };
            }
          }
        }
      }
    } catch (e) {
      return {
        errcode: 'fail',
        description: '请扫描发票（电，普，专）'
      };
    }
  }
};

var blobToFile = exports.blobToFile = function blobToFile(blobData, filename) {
  var nameArr = filename.split('.');
  var ext = nameArr[nameArr.length - 1];
  var type = 'image/jpeg';

  if (ext === 'png') {
    type = 'image/png';
  } else if (ext === 'bmp') {
    type = 'image/bmp';
  } else if (ext === 'jpg') {
    type = 'image/jpeg';
  } else if (ext === 'pdf') {
    type = 'application/pdf';
  } else {
    type = 'application/octet-stream';
  }

  if (window.File && typeof window.File === 'function') {
    var targetFile = new window.File([blobData], filename, {
      type: type
    });
    return targetFile;
  } else {
    return false;
  }
};

var downloadFileXhr = function downloadFileXhr(_ref) {
  var url = _ref.url,
      _ref$key = _ref.key,
      key = _ref$key === undefined ? 'downloadParams' : _ref$key,
      _ref$data = _ref.data,
      data = _ref$data === undefined ? {} : _ref$data,
      _ref$method = _ref.method,
      method = _ref$method === undefined ? 'POST' : _ref$method,
      startCallback = _ref.startCallback,
      endCallback = _ref.endCallback,
      _ref$timeout = _ref.timeout,
      timeout = _ref$timeout === undefined ? 60000 : _ref$timeout;
  method = method.toLocaleLowerCase();
  startCallback();

  var myEndCallback = function myEndCallback(res) {
    (0, _cookie_helps.clearCookie)('downloadResult');
    typeof endCallback === 'function' && endCallback(res);
  };

  var xhr = new window.XMLHttpRequest();

  if (method === 'get') {
    url += '?' + (0, _kdRequest.param)(data);
  }

  ;
  xhr.open(method, url, true);
  xhr.responseType = 'blob';
  xhr.setRequestHeader('Content-Type', 'application/json');
  xhr.timeout = timeout;

  xhr.onerror = function () {
    myEndCallback({
      errcode: '5000',
      description: '服务端异常，请稍后再试'
    });
  };

  xhr.ontimeout = function () {
    myEndCallback({
      errcode: '5004',
      description: '请求超时，请稍后再试'
    });
  };

  xhr.onload = function () {
    if (xhr.status === 200) {
      var blob = xhr.response;
      var ctype = xhr.getResponseHeader('Content-Type');

      if (ctype.indexOf('text/html') !== -1) {
        myEndCallback({
          errcode: '5000',
          description: '服务端异常，请稍后再试'
        });
      } else if (ctype.indexOf('application/json') !== -1) {
        var reader = new window.FileReader();

        reader.onload = function () {
          var content = reader.result;

          try {
            content = JSON.parse(content);
          } catch (error) {
            content = {
              errcode: '5000',
              description: '服务端异常，请稍后再试'
            };
            console.error(error);
          }

          myEndCallback(content);
        };

        reader.readAsText(blob);
      } else {
        var disposition = xhr.getResponseHeader('Content-Disposition');
        var dispositionArr = disposition.replace(/\s/g, '').split(';');
        var dispositionObj = {};

        for (var i = 0, len = dispositionArr.length; i < len; i++) {
          var param = dispositionArr[i].split('=');
          var temValue = '';
          if (param[1]) temValue = param[1].replace(/^"/, '').replace(/"$/, '');
          dispositionObj[param[0]] = temValue;
        }

        var filename = dispositionObj['filename*'] || dispositionObj.filename || 'file';

        if (navigator.msSaveOrOpenBlob) {
          navigator.msSaveOrOpenBlob(new Blob([blob]), filename);
        } else {
          var eleLink = document.createElement('a');
          eleLink.download = decodeURIComponent(filename);
          eleLink.style.display = 'none';
          eleLink.href = URL.createObjectURL(new Blob([blob]));
          document.body.appendChild(eleLink);
          eleLink.click();
          document.body.removeChild(eleLink);
        }

        myEndCallback({
          errcode: '0000',
          description: '下载成功'
        });
      }
    } else {
      myEndCallback({
        errcode: '5000',
        description: '请求异常，请稍后再试'
      });
    }
  };

  if (method === 'post') {
    var dataStr = (0, _stringify2["default"])(data);
    var newData = {};
    newData[key] = dataStr;
    xhr.send((0, _stringify2["default"])(newData));
  } else {
    xhr.send();
  }
};

var downloadFile = exports.downloadFile = function downloadFile(opt) {
  var url = opt.url,
      _opt$key = opt.key,
      key = _opt$key === undefined ? 'downloadParams' : _opt$key,
      _opt$data = opt.data,
      data = _opt$data === undefined ? {} : _opt$data,
      _opt$method = opt.method,
      method = _opt$method === undefined ? 'POST' : _opt$method,
      startCallback = opt.startCallback,
      endCallback = opt.endCallback,
      _opt$downloadType = opt.downloadType,
      downloadType = _opt$downloadType === undefined ? 'form' : _opt$downloadType,
      _opt$timeout = opt.timeout,
      timeout = _opt$timeout === undefined ? 60000 : _opt$timeout;

  if (window.XMLHttpRequest && window.Blob && window.FileReader && downloadType === 'xhr') {
    downloadFileXhr(opt);
  } else {
    startCallback();
    var iframeId = 'tempDownloadIframe' + +new Date();
    var formId = 'tempFormId_' + +new Date();
    (0, _cookie_helps.clearCookie)('downloadResult');

    var myEndCallback = function myEndCallback(res) {
      var iframEl = document.getElementById(iframeId);
      var formEl = document.getElementById(formId);
      (0, _cookie_helps.clearCookie)('downloadResult');
      iframEl.innerHTML = '';
      iframEl.parentNode.removeChild(iframEl);
      formEl.parentNode.removeChild(formEl);
      typeof endCallback === 'function' && endCallback(res);
    };

    var checkStatus = function checkStatus(startTime) {
      if (+new Date() - startTime > timeout) {
        myEndCallback({
          errcode: '5004',
          description: '请求超时，请稍后再试！'
        });
      } else {
        var result = (0, _cookie_helps.getCookie)('downloadResult');

        if (result) {
          if (result === '1') {
            myEndCallback({
              errcode: '0000',
              description: '下载成功'
            });
          } else {
            result = JSON.parse(unescape(result));
            myEndCallback(result);
          }
        } else {
          setTimeout(function () {
            checkStatus(startTime);
          }, 1000);
        }
      }
    };

    var iframe = document.createElement('iframe');
    iframe.id = iframeId;
    iframe.name = iframeId;
    iframe.enctype = 'application/x-www-form-urlencoded';
    iframe.style.display = 'none';
    document.body.appendChild(iframe);
    var formEl = document.createElement('form');
    formEl.id = formId;
    formEl.target = iframeId;
    formEl.style.display = 'none';
    formEl.method = method;
    formEl.action = url;
    var inputEl = document.createElement('input');
    inputEl.type = 'hidden';
    inputEl.name = key;
    inputEl.value = (typeof data === 'undefined' ? 'undefined' : (0, _typeof3["default"])(data)) === 'object' ? (0, _stringify2["default"])(data) : data;
    formEl.appendChild(inputEl);
    document.body.appendChild(formEl);
    formEl.submit();
    checkStatus(+new Date());
  }
};

var getUUId = exports.getUUId = function getUUId() {
  var d = new Date().getTime();
  var uuid = 'xxxxxxxxxxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = (d + Math.random() * 16) % 16 | 0;
    d = Math.floor(d / 16);
    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);
  });
  return uuid;
};

var consoleLog = exports.consoleLog = function consoleLog(tip) {
  var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'error';
  var title = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  if ((0, _typeof3["default"])(window.console) === 'object') {
    if (level === 'error') {
      if (title) {
        window.console.error(title, tip);
      } else {
        window.console.error(tip);
      }
    } else if (level === 'warn') {
      if (title) {
        window.console.warn(title, tip);
      } else {
        window.console.warn(tip);
      }
    } else {
      if (title) {
        window.console.log(title, tip);
      } else {
        window.console.log(tip);
      }
    }
  }
};

var isInVisualArea = exports.isInVisualArea = function isInVisualArea(elCls, pObj) {
  var items = pObj.getElementsByClassName(elCls);
  var boxInfo = pObj.getBoundingClientRect();
  var top = boxInfo.top,
      left = boxInfo.left,
      bottom = boxInfo.bottom,
      right = boxInfo.right;
  var result = [];

  for (var i = 0; i < items.length; i++) {
    var itemInfo = items[i].getBoundingClientRect();

    if (itemInfo.top >= top && itemInfo.left >= left && itemInfo.top <= bottom && itemInfo.left <= right) {
      result.push(true);
    } else {
      result.push(false);
    }
  }

  return result;
};

var getInvoiceErrInfo = exports.getInvoiceErrInfo = function getInvoiceErrInfo(invoice) {
  var waringResult = [];
  var errorResult = [];
  var invoiceStatusDict = {
    k1: '该发票已失控',
    k2: '该发票已作废',
    k3: '该发票已红冲',
    k4: '该处于异常状态'
  };
  var invoiceType = invoice.invoiceType,
      invoiceStatus = invoice.invoiceStatus,
      checkStatus = invoice.checkStatus,
      isNotEqualTaxNo = invoice.isNotEqualTaxNo,
      isNotEqualBuyerName = invoice.isNotEqualBuyerName,
      repeatBx = invoice.repeatBx,
      isBlacklist = invoice.isBlacklist,
      isSensitiveWords = invoice.isSensitiveWords,
      _invoice$continuousNo = invoice.continuousNos,
      continuousNos = _invoice$continuousNo === undefined ? [] : _invoice$continuousNo,
      _invoice$warningCode = invoice.warningCode,
      warningCode = _invoice$warningCode === undefined ? '' : _invoice$warningCode,
      isOverdueInvoice = invoice.isOverdueInvoice,
      isRevise = invoice.isRevise;
  var invoiceTypeInfo = INPUT_INVOICE_TYPES_DICT['k' + invoiceType] || {};

  if (invoiceTypeInfo.isAddedTax) {
    if (parseInt(checkStatus) === 2) {
      errorResult.push('查验数据不相符！');
    } else if (parseInt(checkStatus) === 3) {
      errorResult.push('发票还未进行查验！');
    }

    if (invoiceStatusDict['k' + invoiceStatus]) {
      errorResult.push(invoiceStatusDict['k' + invoiceStatus]);
    }
  }

  if (isNotEqualTaxNo) {
    errorResult.push('企业税号与发票购方税号不一致！');
  }

  if (isNotEqualBuyerName) {
    errorResult.push('企业抬头与发票抬头不一致！');
  }

  if (repeatBx === 2) {
    errorResult.push('发票重复报销！');
  }

  if (isBlacklist === 2) {
    errorResult.push('该发票在黑名单中！');
  }

  if (isSensitiveWords === 2) {
    waringResult.push('发票中包含敏感词！');
  }

  if (continuousNos && continuousNos.length > 0) {
    if (parseInt(invoiceType) === 8) {
      waringResult.push('的士票连号，连号号码' + continuousNos.join(','));
    }
  }

  var warningCodeArr = warningCode.split(',');

  if (warningCodeArr.indexOf('3') !== -1) {
    waringResult.push('疑似串号发票！');
  }

  if (isOverdueInvoice === 2) {
    waringResult.push('该发票已过期！');
  }

  if (isRevise === 2) {
    waringResult.push('手工修改过发票字段！');
  }

  return {
    errorResult: errorResult,
    waringResult: waringResult
  };
};

var readAsBinaryString = exports.readAsBinaryString = function readAsBinaryString(file) {
  return new _promise2["default"](function (resolve) {
    var reader = new FileReader();

    if (typeof FileReader.prototype.readAsBinaryString === 'function') {
      reader.onload = function (e) {
        resolve(reader.result);
      };

      reader.onerror = function () {
        resolve(null);
      };

      reader.readAsBinaryString(file);
    } else {
      var binary = '';

      reader.onload = function (e) {
        var bytes = new Uint8Array(reader.result);
        var length = bytes.byteLength;

        for (var i = 0; i < length; i++) {
          binary += String.fromCharCode(bytes[i]);
        }

        resolve(binary);
      };

      reader.onerror = function () {
        resolve(null);
      };

      reader.readAsArrayBuffer(file);
    }
  });
};

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperty = __webpack_require__(113);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (obj, key, value) {
  if (key in obj) {
    (0, _defineProperty2.default)(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(114), __esModule: true };

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(115);
var $Object = __webpack_require__(24).Object;
module.exports = function defineProperty(it, key, desc) {
  return $Object.defineProperty(it, key, desc);
};


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(22);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(32), 'Object', { defineProperty: __webpack_require__(28).f });


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

var invoiceEditInfo = __webpack_require__(117);

var invoiceTypes = __webpack_require__(119);

var selectSource = __webpack_require__(118);

var invoiceStatus = __webpack_require__(120);

var warningCodesInfo = __webpack_require__(121);

module.exports = {
  invoiceEditInfo: invoiceEditInfo,
  invoiceTypes: invoiceTypes,
  selectSource: selectSource,
  invoiceStatus: invoiceStatus,
  waringCodes: warningCodesInfo.waringCodes,
  getWaringCodesResult: warningCodesInfo.getWaringCodesResult
};

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(118),
    trainSeatSelectSource = _require.trainSeatSelectSource,
    airSeatSelectSource = _require.airSeatSelectSource,
    currencySelectSource = _require.currencySelectSource; // 禁止选择的日期


var disabledDate = function disabledDate(d) {
  return moment(d.format('YYYY-MM-DD')).format('X') > moment().format('X');
}; // 字符串长度最长控制


var maxStringLength = 50;
var bigStringLength = 200; // 增值税发票,通过校验码查验

var invoiceAdded1 = [{
  title: '发票代码',
  dataIndex: 'invoiceCode',
  type: 'string',
  maxLength: 12,
  required: true
}, {
  title: '发票号码',
  dataIndex: 'invoiceNo',
  type: 'string',
  maxLength: 10,
  required: true
}, {
  title: '开票日期',
  dataIndex: 'invoiceDate',
  type: 'date',
  disabledDate: disabledDate,
  required: true
}, {
  title: '校验码后六位',
  dataIndex: 'checkCode',
  type: 'string',
  maxLength: 6,
  required: true
} // 注意区块链发票类型是1，校验码为5位
]; // 增值税发票,通过不含税金额查验

var invoiceAdded2 = [{
  title: '发票代码',
  dataIndex: 'invoiceCode',
  type: 'string',
  maxLength: 12,
  required: true
}, {
  title: '发票号码',
  dataIndex: 'invoiceNo',
  type: 'string',
  maxLength: 10,
  required: true
}, {
  title: '开票日期',
  dataIndex: 'invoiceDate',
  type: 'date',
  disabledDate: disabledDate,
  required: true
}, {
  title: '不含税金额',
  dataIndex: 'invoiceAmount',
  type: 'number',
  required: true
}]; // 飞机票

var airBill = [{
  title: '电子客票号',
  dataIndex: 'electronicTicketNum',
  type: 'string',
  maxLength: maxStringLength,
  required: true
}, {
  title: '身份证号码',
  dataIndex: 'customerIdentityNum',
  type: 'string',
  maxLength: 18,
  required: true
}, {
  title: '行程',
  subCols: [{
    title: '开始行程',
    dataIndex: 'placeOfDeparture',
    type: 'string',
    maxLength: maxStringLength,
    required: true
  }, {
    title: '结束行程',
    dataIndex: 'destination',
    type: 'string',
    maxLength: maxStringLength,
    required: true
  }]
}, {
  title: '票价',
  dataIndex: 'invoiceAmount',
  type: 'number',
  required: true
}, {
  title: '顾客姓名',
  dataIndex: 'customerName',
  type: 'string',
  maxLength: maxStringLength,
  required: true
}, {
  title: '乘机日期',
  dataIndex: 'invoiceDate',
  type: 'date',
  disabledDate: disabledDate,
  required: true
}, {
  title: '航班号',
  dataIndex: 'flightNum',
  type: 'string',
  maxLength: maxStringLength
}, {
  title: '机场建设费',
  dataIndex: 'airportConstructionFee',
  type: 'number'
}, {
  title: '燃油附加费',
  dataIndex: 'fuelSurcharge',
  type: 'number'
}, {
  title: '印刷序列号',
  dataIndex: 'printNum',
  type: 'string',
  maxLength: maxStringLength
}, {
  title: '座位等级',
  dataIndex: 'seatGrade',
  type: 'select',
  selectSource: airSeatSelectSource
}]; // 通用机打

var generalMachineBill = [{
  title: '发票代码',
  dataIndex: 'invoiceCode',
  type: 'string',
  maxLength: 12,
  required: true
}, {
  title: '发票号码',
  dataIndex: 'invoiceNo',
  type: 'string',
  maxLength: 10,
  required: true
}, {
  title: '开票日期',
  dataIndex: 'invoiceDate',
  type: 'date',
  disabledDate: disabledDate,
  required: true
}, {
  title: '合计金额',
  dataIndex: 'totalAmount',
  type: 'number',
  required: true
}, {
  title: '销方名称',
  dataIndex: 'salerName',
  type: 'string',
  maxLength: bigStringLength
}, {
  title: '销方税号',
  dataIndex: 'salerTaxNo',
  type: 'string',
  maxLength: maxStringLength
}, {
  title: '购方名称',
  dataIndex: 'buyerName',
  type: 'string',
  maxLength: bigStringLength
}]; // 其它发票

var otherBill = [{
  title: '金额',
  dataIndex: 'totalAmount',
  type: 'number',
  required: true
}, {
  title: '备注',
  dataIndex: 'salerName',
  type: 'string',
  maxLength: bigStringLength,
  required: true
}, {
  title: '发票代码',
  dataIndex: 'invoiceCode',
  type: 'string',
  maxLength: 12
}, {
  title: '发票号码',
  dataIndex: 'invoiceNo',
  type: 'string',
  maxLength: 10
}, {
  title: '开票日期',
  dataIndex: 'invoiceDate',
  type: 'date',
  disabledDate: disabledDate
}]; // 购置税发票

var purchaseTaxBill = [{
  title: '纳税人识别号',
  dataIndex: 'buyerTaxNo',
  type: 'string',
  maxLength: maxStringLength,
  required: true
}, {
  title: '完税证明号码',
  dataIndex: 'taxPaidProofNo',
  type: 'string',
  maxLength: maxStringLength,
  required: true
}, {
  title: '填发日期',
  dataIndex: 'invoiceDate',
  type: 'date',
  disabledDate: disabledDate,
  required: true
}, {
  title: '税务机关名称',
  dataIndex: 'taxAuthorityName',
  type: 'string',
  maxLength: bigStringLength,
  required: true
}, {
  title: '金额',
  dataIndex: 'totalAmount',
  type: 'number',
  required: true
}]; // 定额发票

var quotaBill = [{
  title: '发票代码',
  dataIndex: 'invoiceCode',
  type: 'string',
  maxLength: 12,
  required: true
}, {
  title: '发票号码',
  dataIndex: 'invoiceNo',
  type: 'string',
  maxLength: 10,
  required: true
}, {
  title: '金额',
  dataIndex: 'totalAmount',
  type: 'number',
  required: true
}, {
  title: '所在地',
  dataIndex: 'place',
  type: 'string',
  maxLength: maxStringLength,
  required: true
}]; // 过路过桥

var roadBridgeBill = [{
  title: '发票代码',
  dataIndex: 'invoiceCode',
  type: 'string',
  maxLength: 12
}, {
  title: '发票号码',
  dataIndex: 'invoiceNo',
  type: 'string',
  maxLength: 10,
  required: true
}, {
  title: '开票日期',
  dataIndex: 'invoiceDate',
  type: 'date',
  disabledDate: disabledDate,
  required: true
}, {
  title: '金额',
  dataIndex: 'totalAmount',
  type: 'number',
  required: true
}, {
  title: '入口',
  dataIndex: 'entrance',
  type: 'string',
  maxLength: maxStringLength
}, {
  title: '出口',
  dataIndex: 'exit',
  type: 'string',
  maxLength: maxStringLength,
  required: true
}, {
  title: '时间',
  dataIndex: 'time',
  type: 'time'
}, {
  title: '所在地',
  dataIndex: 'place',
  type: 'string',
  maxLength: maxStringLength
}]; // 轮船票

var shipBill = [{
  title: '发票代码',
  dataIndex: 'invoiceCode',
  type: 'string',
  maxLength: 12,
  required: true
}, {
  title: '发票号码',
  dataIndex: 'invoiceNo',
  type: 'string',
  maxLength: 10,
  required: true
}, {
  title: '乘船人',
  dataIndex: 'passengerName',
  type: 'string',
  maxLength: maxStringLength,
  required: true
}, {
  title: '乘船日期',
  dataIndex: 'invoiceDate',
  type: 'date',
  disabledDate: disabledDate,
  required: true
}, {
  title: '出发地',
  dataIndex: 'stationGetOn',
  type: 'string',
  maxLength: maxStringLength
}, {
  title: '到达地',
  dataIndex: 'stationGetOff',
  type: 'string',
  maxLength: maxStringLength,
  required: true
}, {
  title: '金额',
  dataIndex: 'totalAmount',
  type: 'number',
  required: true
}, {
  title: '币别',
  dataIndex: 'currency',
  type: 'select',
  selectSource: currencySelectSource
}]; // 的士票

var taxBill = [{
  title: '发票代码',
  dataIndex: 'invoiceCode',
  type: 'string',
  maxLength: 12,
  required: true
}, {
  title: '发票号码',
  dataIndex: 'invoiceNo',
  type: 'string',
  maxLength: 10,
  required: true
}, {
  title: '乘车日期',
  dataIndex: 'invoiceDate',
  type: 'date',
  disabledDate: disabledDate,
  required: true
}, {
  title: '金额（含税）',
  dataIndex: 'totalAmount',
  type: 'number',
  required: true
}, {
  title: '所在地',
  dataIndex: 'place',
  type: 'string',
  maxLength: maxStringLength,
  required: true
}, {
  title: '打车里程',
  dataIndex: 'mileage',
  type: 'number'
}, {
  title: '上车时间',
  dataIndex: 'timeGetOn',
  type: 'time'
}, {
  title: '下车时间',
  dataIndex: 'timeGetOff',
  type: 'time'
}]; // 客运票

var trafficBill = [{
  title: '发票代码',
  dataIndex: 'invoiceCode',
  type: 'string',
  maxLength: 12,
  required: true
}, {
  title: '发票号码',
  dataIndex: 'invoiceNo',
  type: 'string',
  maxLength: 10,
  required: true
}, {
  title: '日期',
  dataIndex: 'invoiceDate',
  type: 'date',
  disabledDate: disabledDate,
  required: true
}, {
  title: '票价',
  dataIndex: 'totalAmount',
  type: 'number',
  required: true
}, {
  title: '出发站',
  dataIndex: 'stationGetOn',
  type: 'string',
  maxLength: maxStringLength,
  required: true
}, {
  title: '到达站',
  dataIndex: 'stationGetOff',
  type: 'string',
  maxLength: maxStringLength,
  required: true
}, {
  title: '姓名',
  dataIndex: 'passengerName',
  type: 'string',
  maxLength: maxStringLength,
  required: true
}, {
  title: '时间',
  dataIndex: 'timeGetOn',
  type: 'time'
}, {
  title: '币别',
  dataIndex: 'currency',
  type: 'select',
  selectSource: currencySelectSource
}]; // 高铁票

var trainBill = [{
  title: '姓名',
  dataIndex: 'passengerName',
  type: 'string',
  maxLength: maxStringLength,
  required: true
}, {
  title: '车次',
  dataIndex: 'trainNum',
  type: 'string',
  maxLength: maxStringLength,
  required: true
}, {
  title: '印刷序号',
  dataIndex: 'printingSequenceNo',
  type: 'string',
  maxLength: maxStringLength,
  required: true
}, {
  title: '乘车日期',
  dataIndex: 'invoiceDate',
  type: 'date',
  disabledDate: disabledDate,
  required: true
}, {
  title: '金额（含税）',
  dataIndex: 'totalAmount',
  type: 'number',
  required: true
}, {
  title: '行程',
  subCols: [{
    title: '开始行程',
    dataIndex: 'stationGetOn',
    type: 'string',
    maxLength: maxStringLength,
    required: true
  }, {
    title: '结束行程',
    dataIndex: 'stationGetOff',
    type: 'string',
    maxLength: maxStringLength,
    required: true
  }]
}, {
  title: '座位等级',
  dataIndex: 'currency',
  type: 'select',
  selectSource: trainSeatSelectSource
}];
module.exports = {
  k1: invoiceAdded1,
  k3: invoiceAdded1,
  k4: invoiceAdded2,
  k5: invoiceAdded1,
  k12: invoiceAdded2,
  k13: invoiceAdded2,
  k15: invoiceAdded1,
  k7: generalMachineBill,
  k8: taxBill,
  k9: trainBill,
  k10: airBill,
  k14: quotaBill,
  k16: trafficBill,
  k17: roadBridgeBill,
  k19: purchaseTaxBill,
  k20: shipBill,
  k23: generalMachineBill,
  k11: otherBill
};

/***/ }),
/* 118 */
/***/ (function(module, exports) {

var trainSeatSelectSource = ['二等座', '一等座', '特等座', '商务座', '无座'];
var airSeatSelectSource = [{
  value: 'F',
  text: '头等舱'
}, {
  value: 'C',
  text: '公务舱（商务舱）'
}, {
  value: 'Y',
  text: '普通舱（经济舱）'
}];
var currencySelectSource = [{
  value: 'CNY',
  text: '人民币'
}, {
  value: 'HKD',
  text: '港币'
}, {
  value: 'USD',
  text: '美元'
}];
module.exports = {
  trainSeatSelectSource: trainSeatSelectSource,
  airSeatSelectSource: airSeatSelectSource,
  currencySelectSource: currencySelectSource
};

/***/ }),
/* 119 */
/***/ (function(module, exports) {

var INPUT_INVOICE_TYPES = [{
  text: '电子普通发票',
  value: 1,
  allowDeduction: 1,
  isAddedTax: true
}, {
  text: '电子专用发票',
  value: 2,
  allowDeduction: 1,
  isAddedTax: true,
  allowGovdk: 1
}, {
  text: '增值税普通发票',
  value: 3,
  isAddedTax: true
}, {
  text: '增值税专用发票',
  value: 4,
  allowDeduction: 1,
  isAddedTax: true,
  allowGovdk: 1
}, {
  text: '普通纸质卷票',
  value: 5,
  isAddedTax: true
}, {
  text: '通用机打发票',
  value: 7
}, {
  text: '出租车票',
  value: 8
}, {
  text: '火车/高铁票',
  value: 9,
  allowDeduction: 1
}, {
  text: '飞机行程单',
  value: 10,
  allowDeduction: 1
}, {
  text: '机动车销售发票',
  value: 12,
  allowDeduction: 1,
  isAddedTax: true,
  allowGovdk: 1
}, {
  text: '二手车销售发票',
  value: 13,
  isAddedTax: true
}, {
  text: '定额发票',
  value: 14
}, {
  text: '通行费电子发票',
  value: 15,
  allowDeduction: 1,
  isAddedTax: true,
  allowGovdk: 1
}, // 允许抵扣，增值税发票
{
  text: '公路汽车票',
  value: 16,
  allowDeduction: 1
}, {
  text: '过路桥费发票',
  value: 17
}, {
  text: '完税证明',
  value: 19
}, {
  text: '轮船票',
  value: 20,
  allowDeduction: 1
}, // 允许抵扣
{
  text: '通用机打电子发票',
  value: 23
}, // { text: '海关缴款书', value: 21,  allowDeduction: 1, allowGovdk: 1 },
{
  text: '火车票退票凭证',
  value: 24
}, {
  text: '财政电子票据',
  value: 25
}, {
  text: '其它票',
  value: 11,
  allowDeduction: 1
}];
var inputFullInvoiceDict = {};
var addedInvoiceTypes = [];
var allowDkInvoiceTypes = [];

for (var i = 0; i < INPUT_INVOICE_TYPES.length; i++) {
  var curData = INPUT_INVOICE_TYPES[i];
  inputFullInvoiceDict['k' + curData.value] = curData;

  if (curData.isAddedTax) {
    addedInvoiceTypes.push(curData.value);
  }

  if (curData.allowDeduction === 1) {
    allowDkInvoiceTypes.push(curData.value);
  }
}

module.exports = {
  INPUT_INVOICE_TYPES: INPUT_INVOICE_TYPES,
  INPUT_INVOICE_TYPES_DICT: inputFullInvoiceDict,
  // INPUT_INVOICE__TYPES_DICT
  ADDED_INVOICE_TYPES: addedInvoiceTypes,
  ALLOW_DK_TYPES: allowDkInvoiceTypes
};

/***/ }),
/* 120 */
/***/ (function(module, exports) {

var invoiceStatus = [{
  text: '正常',
  value: 0
}, {
  text: '失控',
  value: 1
}, {
  text: '作废',
  value: 2
}, {
  text: '红冲',
  value: 3
}, {
  text: '异常',
  value: 4
}];
var invoiceStatuDict = {};

for (var i = 0; i < invoiceStatus.length; i++) {
  invoiceStatuDict['k' + invoiceStatus[i].value] = invoiceStatus[i].text;
}

module.exports = {
  INVOICE_STATUS: invoiceStatus,
  INVOICE_STATUS_DICT: invoiceStatuDict
};

/***/ }),
/* 121 */
/***/ (function(module, exports) {

var waringCodes = {
  'k1': '',
  //正常
  'k2': '' //'疑似使用旧的监制章'

};

function getWaringCodesResult() {
  var codeStr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var codeArr = codeStr.split(',');
  var result = [];

  for (var i = 0; i < codeArr.length; i++) {
    var curCode = codeArr[i];
    var description = waringCodes['k' + curCode] || '';

    if (description) {
      result.push(description);
    }
  }

  return result;
}

module.exports = {
  waringCodes: waringCodes,
  getWaringCodesResult: getWaringCodesResult
};

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(86);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

Object.setPrototypeOf = __webpack_require__(123);

if ((typeof window === 'undefined' ? 'undefined' : (0, _typeof3["default"])(window)) === 'object') {
  window.requestAnimationFrame = function () {
    return window.requestAnimationFrame || window.requestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function (func) {
      return setTimeout(func, 1 / 60);
    };
  }();
}

Function.prototype.method = function (name, func) {
  if (!this.prototype[name]) {
    this.prototype[name] = func;
  }

  return this;
};

Number.method('integer', function () {
  return Math[this < 0 ? 'ceil' : 'floor'](this);
});
String.method('trim', function () {
  return this.replace(/^\s+/g, '').replace(/\s+$/g, '');
});
String.method('replaceInclude', function () {
  return this.replace('）', ')').replace('（', '(');
});
String.method('entityify', function (opt) {
  var entity = {
    '"': '&quot;',
    '<': '&lt;',
    '>': '&gt;',
    '&': '&amp;'
  };

  if ((typeof opt === 'undefined' ? 'undefined' : (0, _typeof3["default"])(opt)) !== undefined) {
    entity = opt;
  }

  return function () {
    return this.replace(/(["<>&])/g, function (c) {
      return entity[c];
    });
  };
}());
String.method('isEmail', function () {
  return /^([a-zA-Z0-9_\.-]+)@([a-zA-Z0-9\.-]+)\.([a-zA-Z\.]{2,6})$/.test(this);
});
String.method('isEmpty', function () {
  return /^[\s]*$/.test(this);
});
String.method('isNotEmpty', function () {
  return /[\S]+/.test(this);
});
String.method('isPhone', function () {
  return /^(1[0-9]{10}$)/.test(this);
});
String.method('isPhoneOrMail', function () {
  if (this.isEmail()) {
    return 2;
  } else if (this.isPhone()) {
    return 1;
  } else {
    return false;
  }
});
String.method('getLength', function () {
  var r = /[\x00-\xff]/g;
  var cnLen = this.replace(r, '').length;
  return this.length + cnLen;
});
String.method('isNumber', function () {
  return /[0-9.]*/.test(this) && isFinite(this);
});
String.method('getSub', function (n, flag) {
  var r = /[^\x00-\xff]/g;

  if (this.replace(r, "mm").length <= n) {
    return this;
  }

  var m = Math.floor(n / 2);

  for (var i = m; i < this.length; i++) {
    if (this.substr(0, i).replace(r, "mm").length >= n) {
      if (flag) {
        return this.substr(0, i) + '...';
      } else {
        return this.substr(0, i);
      }
    }
  }

  return this;
});
String.method('trimUnNumber', function () {
  var v = parseFloat(this.trim());

  if (isNaN(v)) {
    return '';
  } else {
    return v + '';
  }
});
Array.method('indexOf', function (value) {
  var i,
      len = this.length;

  for (i = 0; i < len; i++) {
    if (this[i] === value) {
      return i;
    }
  }

  return -1;
});

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint no-proto: 0 */
module.exports = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties)

function setProtoOf (obj, proto) {
  obj.__proto__ = proto
  return obj
}

function mixinProperties (obj, proto) {
  for (var prop in proto) {
    if (!obj.hasOwnProperty(prop)) {
      obj[prop] = proto[prop]
    }
  }
  return obj
}


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearCache = exports.getCache = exports.setCache = undefined;

var _stringify = __webpack_require__(84);

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = __webpack_require__(86);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var _require = __webpack_require__(104),
    setCookie = _require.setCookie,
    clearCookie = _require.clearCookie;

var setCache = exports.setCache = function setCache(key, value, flag) {
  if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3["default"])(value)) === 'object') {
    value = escape((0, _stringify2["default"])(value));
  } else {
    value = escape(value);
  }

  if (!localStorage && !sessionStorage) {
    try {
      var timeout = 60 * 60;

      if (!isNaN(parseInt(flag))) {
        timeout = flag;
      }

      setCookie(key, value, timeout);
      return true;
    } catch (e) {
      return false;
    }
  } else {
    if (flag == 'localStorage' && localStorage) {
      try {
        localStorage.setItem(key, value);
        return true;
      } catch (e) {
        return false;
      }
    } else if (!isNaN(parseInt(flag))) {
      try {
        setCookie(key, value, flag);
        return true;
      } catch (e) {
        return false;
      }
    } else {
      try {
        sessionStorage.setItem(key, value);
        return true;
      } catch (e) {
        return false;
      }
    }
  }
};

var getCache = exports.getCache = function getCache(key, flag, type) {
  if (!localStorage && !sessionStorage) {
    if (type === 'string') {
      return unescape(getCookie(key));
    } else {
      try {
        var v = unescape(getCookie(key));
        return JSON.parse(v);
      } catch (e) {
        return v;
      }
    }
  } else {
    if (flag == 'localStorage' && localStorage) {
      if (type === 'string') {
        return unescape(localStorage.getItem(key));
      } else {
        try {
          var v = unescape(localStorage.getItem(key));
          return JSON.parse(v);
        } catch (e) {
          return v;
        }
      }
    } else if (flag == 'cookie' || !isNaN(parseInt(flag))) {
      if (type === 'string') {
        return unescape(getCookie(key));
      } else {
        try {
          var v = unescape(getCookie(key));
          return JSON.parse(v);
        } catch (e) {
          return v;
        }
      }
    } else {
      if (type === 'string') {
        return unescape(sessionStorage.getItem(key));
      } else {
        try {
          var v = unescape(sessionStorage.getItem(key));
          return JSON.parse(v);
        } catch (e) {
          return v;
        }
      }
    }
  }
};

var clearCache = exports.clearCache = function clearCache(key, flag) {
  if (!localStorage && !sessionStorage) {
    try {
      clearCookie(key);
      return true;
    } catch (e) {
      return false;
    }
  } else {
    if (flag == 'localStorage' && localStorage) {
      try {
        localStorage.removeItem(key);
        return true;
      } catch (e) {
        return false;
      }
    } else if (flag == 'cookie' || !isNaN(parseInt(flag))) {
      try {
        clearCookie(key);
        return true;
      } catch (e) {
        return false;
      }
    } else {
      try {
        sessionStorage.removeItem(key);
        return true;
      } catch (e) {
        return false;
      }
    }
  }
};

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadScripts = exports.use = exports.syncUse = exports.getLoadedJs = undefined;

var _promise = __webpack_require__(13);

var _promise2 = _interopRequireDefault(_promise);

var _typeof2 = __webpack_require__(86);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var getLoadedJs = exports.getLoadedJs = function getLoadedJs() {
  var loadedUnAMDScripts = [];

  if ((typeof document === 'undefined' ? 'undefined' : (0, _typeof3["default"])(document)) === 'object' && document.getElementsByTagName) {
    var scriptsObj = document.getElementsByTagName('script');

    for (var i = scriptsObj.length; i--;) {
      var src = scriptsObj[i].src || '';

      if (src != '') {
        loadedUnAMDScripts.push(src);
      }
    }
  }

  return loadedUnAMDScripts;
};

var getFullPath = function getFullPath(path, basePath) {
  if (/^https?:\/\/.*$/.test(path)) {
    return path;
  }

  basePath = basePath || window.location.href.replace(/\/[0-0a-zA-Z._-]*$/, '');
  var rootPath = window.location.origin;

  if (/^\/.*$/.test(path)) {
    return rootPath + path;
  } else if (/^\.\/.*$/.test(path)) {
    return basePath + path.replace(/^\./, '');
  } else if (/^\.\.\/.*/.test(path)) {
    var puri = path.split('/');
    var newUri = [];

    for (var i = 0; i < puri.length; i++) {
      if (puri[i] == '..' && rootPath != basePath) {
        basePath = basePath.replace(/\/[0-0a-zA-Z._-]*$/, '');
      } else if (puri[i] != '.' && puri[i] != '..') {
        newUri.push(puri[i]);
      }
    }

    return basePath + '/' + newUri.join('/');
  } else {
    return basePath + path;
  }
};

var syncUse = exports.syncUse = function syncUse(sUrls, callback) {
  var loadedUnAMDScripts = getLoadedJs();
  var urls = [];

  if (typeof sUrls === 'string') {
    urls.push(getFullPath(sUrls));
  } else {
    for (var i = 0, len = sUrls.length; i < len; i++) {
      urls.push(getFullPath(sUrls[i]));
    }
  }

  return function next(i) {
    if (loadedUnAMDScripts.indexOf(urls[i]) == -1) {
      if (i < urls.length) {
        var script = document.createElement('script');
        script.type = 'text/javascript';

        if (script.readyState) {
          script.onreadystatechange = function () {
            if (script.readyState == 'loaded' || script.readyState == 'complete') {
              script.onreadystatechange = null;
              next(i + 1);
            }
          };
        } else {
          script.onload = function () {
            next(i + 1);
          };
        }

        script.src = urls[i];

        if (/^.*sea\.js\/?$/.test(urls[i])) {
          script.id = 'seajsnode';
        }

        document.getElementsByTagName('head')[0].appendChild(script);
        loadedUnAMDScripts.push(urls[i]);
      } else {
        callback();
      }
    } else {
      next(i + 1);
    }
  }(0);
};

var use = exports.use = function use(sUrls, callback) {
  var loadedUnAMDScripts = getLoadedJs();
  var loadedNumber = 0;
  var jsNumber;
  var urls = [];

  if (typeof sUrls === 'string') {
    urls.push(getFullPath(sUrls));
  } else {
    for (var i = sUrls.length; i--;) {
      urls.push(getFullPath(sUrls[i]));
    }
  }

  jsNumber = urls.length;

  for (var _i = jsNumber; _i--;) {
    var jsSrc = urls[_i];

    if (loadedUnAMDScripts.indexOf(jsSrc) == -1) {
      var script = document.createElement('script');
      script.type = 'text/javascript';

      if (script.readyState) {
        script.onreadystatechange = function () {
          if (script.readyState == 'loaded' || script.readyState == 'complete') {
            script.onreadystatechange = null;

            if (++loadedNumber == jsNumber) {
              callback();
            }
          }
        };
      } else {
        script.onload = function () {
          if (++loadedNumber == jsNumber) {
            callback();
          }
        };
      }

      script.src = urls[_i];

      if (/^.*sea\.js\/?$/.test(jsSrc)) {
        script.id = 'seajsnode';
      }

      document.getElementsByTagName('head')[0].appendChild(script);
      loadedUnAMDScripts.push(urls[_i]);
    } else {
      if (++loadedNumber == jsNumber) {
        callback();
      }
    }
  }
};

var loadScripts = exports.loadScripts = function loadScripts(sUrls, syncFlag) {
  return new _promise2["default"](function (resolve) {
    try {
      if (syncFlag) {
        syncUse(sUrls, function () {
          resolve(true);
        });
      } else {
        use(sUrls, function () {
          resolve(true);
        });
      }
    } catch (error) {
      resolve(false);
    }
  });
};

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var urlSearch = exports.urlSearch = function urlSearch() {
  var search = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  search = search.replace(/^\?/, '');
  var urlParams = {};
  var urlParamArr = search.split('&');

  for (var i = 0, len = urlParamArr.length; i < len; i++) {
    var param = urlParamArr[i].split('=');
    var tempValue = '';

    if (param.length > 1) {
      tempValue = param[1];
    }

    urlParams[param[0]] = tempValue;
  }

  return urlParams;
};

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkInvoiceTypeFull = checkInvoiceTypeFull;

var blockchain_filter = function blockchain_filter(fpInfo) {
  var flag = false;
  var invoiceCode = fpInfo.invoiceCode,
      invoiceNo = fpInfo.invoiceNo;

  if (invoiceCode && invoiceNo) {
    if (invoiceCode.length == 12 && invoiceNo.length == 8) {
      var str5 = invoiceCode.substr(0, 5);
      var str9 = invoiceCode.substr(8, 1);

      if (str5 == '14403' && str9 == '9') {
        flag = true;
      }
    }
  }

  return flag;
};

var checkInvoiceType = exports.checkInvoiceType = function checkInvoiceType(fpdm, fphm) {
  if (fpdm) {
    fpdm += '';
  }

  if (fphm) {
    fphm += '';
  }

  var last3Str = fpdm.substr(fpdm.length - 3);
  var last2Str = fpdm.substr(fpdm.length - 2);
  var firstStr = fpdm.substr(0, 1);
  var sixthStr = fpdm.substr(5, 1);
  var eighthStr = fpdm.substr(7, 1);

  if (last3Str === '130' || last3Str === '140' || last3Str === '160' || last3Str === '170') {
    return 4;
  }

  if (fpdm.length == 12) {
    if (firstStr == '0' && last2Str == '12') {
      return 15;
    }

    if (firstStr === '0' && last2Str === '17') {
      return 13;
    }

    if (firstStr === '0' && (last2Str === '06' || last2Str === '07')) {
      return 5;
    }

    if (firstStr === '0' && last2Str === '13') {
      return 2;
    }

    if (sixthStr == '1' || sixthStr == '2') {
      if (eighthStr == '2') {
        return 12;
      }
    }
  }

  return 3;
};

function checkInvoiceTypeFull(fpdm, fphm) {
  if (fpdm) {
    fpdm += '';
  }

  if (fphm) {
    fphm += '';
  }

  if (!fphm || !fpdm) {
    return 5;
  }

  var fpdmLength = fpdm.length;

  if (fpdmLength == 12) {
    if (fpdm.length == 12 && fphm.length == 8) {
      if (fpdm.startsWith('14403') && '9' === fpdm.substr(8, 9)) {
        return 1;
      }

      if (fpdm.startsWith('0') && fpdm.endsWith('13')) {
        return 2;
      }
    }

    if (fpdm.startsWith('1') && fpdm.substr(7, 8).equals('2')) {
      return 12;
    }

    if (fpdm.endsWith('11') && fpdm.startsWith('0')) {
      return 1;
    }

    if (fpdm.endsWith('12') && fpdm.startsWith('0')) {
      return 15;
    }

    if (fpdm.endsWith('04') || fpdm.endsWith('05')) {
      return 3;
    }

    if (fpdm.endsWith('06') || fpdm.endsWith('07')) {
      return 5;
    }

    if (fpdm.endsWith('17') && fpdm.startsWith('0')) {
      return 13;
    } else {
      return 3;
    }
  } else if (fpdmLength == 10) {
    if (fpdm.endsWith('130') || fpdm.endsWith('140') || fpdm.endsWith('160') || fpdm.endsWith('170')) {
      return 4;
    } else {
      return 3;
    }
  } else {
    return 3;
  }
}

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = __webpack_require__(84);

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = __webpack_require__(86);

var _typeof3 = _interopRequireDefault(_typeof2);

var _promise = __webpack_require__(13);

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var crossHttp = function crossHttp(_ref) {
  var _ref$method = _ref.method,
      method = _ref$method === undefined ? 'POST' : _ref$method,
      _ref$data = _ref.data,
      data = _ref$data === undefined ? '' : _ref$data,
      _ref$withCredentials = _ref.withCredentials,
      withCredentials = _ref$withCredentials === undefined ? false : _ref$withCredentials,
      _ref$dataType = _ref.dataType,
      dataType = _ref$dataType === undefined ? 'json' : _ref$dataType,
      _ref$contentType = _ref.contentType,
      contentType = _ref$contentType === undefined ? 'text/plain' : _ref$contentType,
      _ref$timeout = _ref.timeout,
      timeout = _ref$timeout === undefined ? 60000 : _ref$timeout,
      _ref$url = _ref.url,
      url = _ref$url === undefined ? 'http://127.0.0.1:52320/cryptctl' : _ref$url,
      onTimeout = _ref.onTimeout,
      onError = _ref.onError,
      success = _ref.success;
  return new _promise2["default"](function (resolve, reject) {
    var xhr = null;

    if (XMLHttpRequest) {
      xhr = new XMLHttpRequest();
    }

    if (withCredentials && typeof xhr.withCredentials !== 'undefined') {
      xhr.withCredentials = true;
    }

    if (!xhr && typeof XDomainRequest !== 'undefined') {
      xhr = new XDomainRequest();
    }

    if (xhr) {
      try {
        xhr.timeout = timeout;
        xhr.contentLength = data.length;
      } catch (e) {
        console.warn('设置超时时间异常');
      }

      try {
        xhr.contentType = contentType;
      } catch (e) {
        console.warn('设置contentType异常');
      }

      xhr.onload = function () {
        var result = xhr.responseText;

        if (dataType === 'json') {
          try {
            result = JSON.parse(result);
            resolve(result);
          } catch (e) {
            resolve({
              description: '服务端异常',
              errcode: 'serverErr'
            });
          }
        } else {
          resolve(result);
        }
      };

      xhr.ontimeout = function () {
        resolve({
          errcode: 'timeout',
          description: '请求超时,请安装且启动“金蝶发票管理组件”后重试！'
        }, xhr);
      };

      xhr.onerror = function () {
        resolve({
          errcode: 'err',
          description: '请求异常,请安装且启动“金蝶发票管理组件”后重试！'
        }, xhr);
      };

      xhr.open(method, url, true);

      if ((typeof data === 'undefined' ? 'undefined' : (0, _typeof3["default"])(data)) === 'object') {
        data = (0, _stringify2["default"])(data);
      }

      if (typeof data === 'string') {
        xhr.send(data);
      } else {
        resolve({
          errcode: 'argsErr',
          description: '参数格式不正确'
        });
      }
    } else {
      xhr = null;
      resolve({
        errcode: 'accessErr',
        description: '税盘不支持访问'
      });
    }
  });
};

exports["default"] = crossHttp;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var clientCheck = function clientCheck() {
  var engine = {
    ie: 0,
    gecko: 0,
    webkit: 0,
    khtml: 0,
    opera: 0,
    ver: null
  };
  var browser = {
    ie: 0,
    firefox: 0,
    safari: 0,
    konq: 0,
    opera: 0,
    chrome: 0,
    ver: null
  };
  var system = {
    win: false,
    mac: false,
    x11: false,
    iphone: false,
    ipod: false,
    ipad: false,
    ios: false,
    android: false,
    nokiaN: false,
    winMobile: false,
    wii: false,
    ps: false
  };
  var ua = navigator.userAgent;

  if (window.opera) {
    engine.ver = browser.ver = window.opera.version();
    engine.opera = browser.opera = parseFloat(engine.ver);
  } else if (/AppleWebKit\/(\S+)/.test(ua)) {
    engine.ver = RegExp['$1'];
    engine.webkit = parseFloat(engine.ver);

    if (/Chrome\/(\S+)/.test(ua)) {
      browser.ver = RegExp['$1'];
      browser.chrome = parseFloat(browser.ver);
    } else if (/Version\/(\S+)/.test(ua)) {
      browser.ver = RegExp['$1'];
      browser.safari = parseFloat(browser.ver);
    } else {
      var safariVersion = 1;

      if (engine.webkit < 100) {
        safariVersion = 1;
      } else if (engine.webkit < 312) {
        safariVersion = 1.2;
      } else if (engine.webkit < 412) {
        safariVersion = 1.3;
      } else {
        safariVersion = 2;
      }

      browser.safari = browser.ver = safariVersion;
    }
  } else if (/KHTML\/(\S+)/.test(ua) || /Konqueror\/([^;]+)/.test(ua)) {
    engine.ver = browser.ver = RegExp['$1'];
    engine.khtml = browser.konq = parseFloat(engine.ver);
  } else if (/rv:([^\)]+)\) Gecko\/\d{8}/.test(ua)) {
    engine.ver = RegExp['$1'];
    engine.gecko = parseFloat(engine.ver);

    if (/Firefox\/(\S+)/.test(ua)) {
      browser.ver = RegExp['$1'];
      browser.firefox = parseFloat(browser.ver);
    }
  } else if (/MSIE ([^;]+)/.test(ua)) {
    engine.ver = browser.ver = RegExp['$1'];
    engine.ie = browser.ie = parseFloat(engine.ver);
  } else if (/Trident\/7.0/.test(ua) && /rv:([^\)]+)\)/.test(ua)) {
    engine.ver = browser.ver = RegExp['$1'];
    engine.ie = browser.ie = parseFloat(engine.ver);
  } else if (/Edge\/(\S+)/.test(ua)) {
    engine.ver = browser.ver = RegExp['$1'];
    engine.ie = browser.ie = parseFloat(engine.ver);
  }

  browser.ie = engine.ie;
  browser.opera = engine.opera;
  var p = navigator.platform;
  system.win = p.indexOf('Win') == 0;
  system.mac = p.indexOf('Mac') == 0;
  system.x11 = p == 'X11' || p.indexOf('Linux') == 0;

  if (system.win) {
    if (/Win(?:dows )?([^do]{2})\s?(\d+\.\d+)?/.test(ua)) {
      if (RegExp['$1'] == 'NT') {
        switch (RegExp['$2']) {
          case '5.0':
            system.win = '2000';
            break;

          case '5.1':
            system.win = 'XP';
            break;

          case '6.0':
            system.win = 'Vista';
            break;

          case '6.1':
            system.win = '7';
            break;

          default:
            system.win = 'NT';
            break;
        }
      } else if (RegExp['$1'] == '9x') {
        system.win = 'ME';
      } else {
        system.win = RegExp['$1'];
      }
    }
  }

  system.iphone = ua.indexOf('iPhone') > -1;
  system.ipod = ua.indexOf('iPod') > -1;
  system.ipad = ua.indexOf('iPad') > -1;
  system.nokiaN = ua.indexOf('NokiaN') > -1;

  if (system.win == 'CE') {
    system.winMobile = system.win;
  } else if (system.win == 'Ph') {
    if (/Windows Phone OS (\d+.\d+)/.test(ua)) {
      ;
      system.win = 'Phone';
      system.winMobile = parseFloat(RegExp['$1']);
    }
  }

  if (system.mac && ua.indexOf('Mobile') > -1) {
    if (/CPU (?:iPhone )?OS (\d+_\d+)/.test(ua)) {
      system.ios = parseFloat(RegExp.$1.replace('_', '.'));
    } else {
      system.ios = 2;
    }
  }

  if (/Android (\d+\.\d+)/.test(ua)) {
    system.android = parseFloat(RegExp.$1);
  }

  system.wii = ua.indexOf('Wii') > -1;
  system.ps = /playstation/i.test(ua);
  return {
    engine: engine,
    browser: browser,
    system: system
  };
};

exports["default"] = clientCheck;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(134), __webpack_require__(135), __webpack_require__(136), __webpack_require__(137), __webpack_require__(138), __webpack_require__(139), __webpack_require__(140), __webpack_require__(141), __webpack_require__(142), __webpack_require__(143), __webpack_require__(144), __webpack_require__(145), __webpack_require__(146), __webpack_require__(147), __webpack_require__(148), __webpack_require__(149), __webpack_require__(150), __webpack_require__(151), __webpack_require__(152), __webpack_require__(153), __webpack_require__(154), __webpack_require__(155), __webpack_require__(156), __webpack_require__(157), __webpack_require__(158), __webpack_require__(159), __webpack_require__(160), __webpack_require__(161), __webpack_require__(162), __webpack_require__(163), __webpack_require__(164), __webpack_require__(165), __webpack_require__(166));
	}
	else {}
}(this, function (CryptoJS) {

	return CryptoJS;

}));

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory();
	}
	else {}
}(this, function () {

	/*globals window, global, require*/

	/**
	 * CryptoJS core components.
	 */
	var CryptoJS = CryptoJS || (function (Math, undefined) {

	    var crypto;

	    // Native crypto from window (Browser)
	    if (typeof window !== 'undefined' && window.crypto) {
	        crypto = window.crypto;
	    }

	    // Native crypto in web worker (Browser)
	    if (typeof self !== 'undefined' && self.crypto) {
	        crypto = self.crypto;
	    }

	    // Native crypto from worker
	    if (typeof globalThis !== 'undefined' && globalThis.crypto) {
	        crypto = globalThis.crypto;
	    }

	    // Native (experimental IE 11) crypto from window (Browser)
	    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {
	        crypto = window.msCrypto;
	    }

	    // Native crypto from global (NodeJS)
	    if (!crypto && typeof global !== 'undefined' && global.crypto) {
	        crypto = global.crypto;
	    }

	    // Native crypto import via require (NodeJS)
	    if (!crypto && "function" === 'function') {
	        try {
	            crypto = __webpack_require__(133);
	        } catch (err) {}
	    }

	    /*
	     * Cryptographically secure pseudorandom number generator
	     *
	     * As Math.random() is cryptographically not safe to use
	     */
	    var cryptoSecureRandomInt = function () {
	        if (crypto) {
	            // Use getRandomValues method (Browser)
	            if (typeof crypto.getRandomValues === 'function') {
	                try {
	                    return crypto.getRandomValues(new Uint32Array(1))[0];
	                } catch (err) {}
	            }

	            // Use randomBytes method (NodeJS)
	            if (typeof crypto.randomBytes === 'function') {
	                try {
	                    return crypto.randomBytes(4).readInt32LE();
	                } catch (err) {}
	            }
	        }

	        throw new Error('Native crypto module could not be used to get secure random number.');
	    };

	    /*
	     * Local polyfill of Object.create

	     */
	    var create = Object.create || (function () {
	        function F() {}

	        return function (obj) {
	            var subtype;

	            F.prototype = obj;

	            subtype = new F();

	            F.prototype = null;

	            return subtype;
	        };
	    }());

	    /**
	     * CryptoJS namespace.
	     */
	    var C = {};

	    /**
	     * Library namespace.
	     */
	    var C_lib = C.lib = {};

	    /**
	     * Base object for prototypal inheritance.
	     */
	    var Base = C_lib.Base = (function () {


	        return {
	            /**
	             * Creates a new object that inherits from this object.
	             *
	             * @param {Object} overrides Properties to copy into the new object.
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
	             */
	            extend: function (overrides) {
	                // Spawn
	                var subtype = create(this);

	                // Augment
	                if (overrides) {
	                    subtype.mixIn(overrides);
	                }

	                // Create default initializer
	                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
	                    subtype.init = function () {
	                        subtype.$super.init.apply(this, arguments);
	                    };
	                }

	                // Initializer's prototype is the subtype object
	                subtype.init.prototype = subtype;

	                // Reference supertype
	                subtype.$super = this;

	                return subtype;
	            },

	            /**
	             * Extends this object and runs the init method.
	             * Arguments to create() will be passed to init().
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var instance = MyType.create();
	             */
	            create: function () {
	                var instance = this.extend();
	                instance.init.apply(instance, arguments);

	                return instance;
	            },

	            /**
	             * Initializes a newly created object.
	             * Override this method to add some logic when your objects are created.
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
	             */
	            init: function () {
	            },

	            /**
	             * Copies properties into this object.
	             *
	             * @param {Object} properties The properties to mix in.
	             *
	             * @example
	             *
	             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
	             */
	            mixIn: function (properties) {
	                for (var propertyName in properties) {
	                    if (properties.hasOwnProperty(propertyName)) {
	                        this[propertyName] = properties[propertyName];
	                    }
	                }

	                // IE won't copy toString using the loop above
	                if (properties.hasOwnProperty('toString')) {
	                    this.toString = properties.toString;
	                }
	            },

	            /**
	             * Creates a copy of this object.
	             *
	             * @return {Object} The clone.
	             *
	             * @example
	             *
	             *     var clone = instance.clone();
	             */
	            clone: function () {
	                return this.init.prototype.extend(this);
	            }
	        };
	    }());

	    /**
	     * An array of 32-bit words.
	     *
	     * @property {Array} words The array of 32-bit words.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var WordArray = C_lib.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of 32-bit words.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.create();
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 4;
	            }
	        },

	        /**
	         * Converts this word array to a string.
	         *
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	         *
	         * @return {string} The stringified word array.
	         *
	         * @example
	         *
	         *     var string = wordArray + '';
	         *     var string = wordArray.toString();
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	         */
	        toString: function (encoder) {
	            return (encoder || Hex).stringify(this);
	        },

	        /**
	         * Concatenates a word array to this word array.
	         *
	         * @param {WordArray} wordArray The word array to append.
	         *
	         * @return {WordArray} This word array.
	         *
	         * @example
	         *
	         *     wordArray1.concat(wordArray2);
	         */
	        concat: function (wordArray) {
	            // Shortcuts
	            var thisWords = this.words;
	            var thatWords = wordArray.words;
	            var thisSigBytes = this.sigBytes;
	            var thatSigBytes = wordArray.sigBytes;

	            // Clamp excess bits
	            this.clamp();

	            // Concat
	            if (thisSigBytes % 4) {
	                // Copy one byte at a time
	                for (var i = 0; i < thatSigBytes; i++) {
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
	                }
	            } else {
	                // Copy one word at a time
	                for (var j = 0; j < thatSigBytes; j += 4) {
	                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];
	                }
	            }
	            this.sigBytes += thatSigBytes;

	            // Chainable
	            return this;
	        },

	        /**
	         * Removes insignificant bits.
	         *
	         * @example
	         *
	         *     wordArray.clamp();
	         */
	        clamp: function () {
	            // Shortcuts
	            var words = this.words;
	            var sigBytes = this.sigBytes;

	            // Clamp
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
	            words.length = Math.ceil(sigBytes / 4);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = wordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone.words = this.words.slice(0);

	            return clone;
	        },

	        /**
	         * Creates a word array filled with random bytes.
	         *
	         * @param {number} nBytes The number of random bytes to generate.
	         *
	         * @return {WordArray} The random word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
	         */
	        random: function (nBytes) {
	            var words = [];

	            for (var i = 0; i < nBytes; i += 4) {
	                words.push(cryptoSecureRandomInt());
	            }

	            return new WordArray.init(words, nBytes);
	        }
	    });

	    /**
	     * Encoder namespace.
	     */
	    var C_enc = C.enc = {};

	    /**
	     * Hex encoding strategy.
	     */
	    var Hex = C_enc.Hex = {
	        /**
	         * Converts a word array to a hex string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The hex string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var hexChars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                hexChars.push((bite >>> 4).toString(16));
	                hexChars.push((bite & 0x0f).toString(16));
	            }

	            return hexChars.join('');
	        },

	        /**
	         * Converts a hex string to a word array.
	         *
	         * @param {string} hexStr The hex string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	         */
	        parse: function (hexStr) {
	            // Shortcut
	            var hexStrLength = hexStr.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < hexStrLength; i += 2) {
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
	            }

	            return new WordArray.init(words, hexStrLength / 2);
	        }
	    };

	    /**
	     * Latin1 encoding strategy.
	     */
	    var Latin1 = C_enc.Latin1 = {
	        /**
	         * Converts a word array to a Latin1 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Latin1 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var latin1Chars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                latin1Chars.push(String.fromCharCode(bite));
	            }

	            return latin1Chars.join('');
	        },

	        /**
	         * Converts a Latin1 string to a word array.
	         *
	         * @param {string} latin1Str The Latin1 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	         */
	        parse: function (latin1Str) {
	            // Shortcut
	            var latin1StrLength = latin1Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < latin1StrLength; i++) {
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
	            }

	            return new WordArray.init(words, latin1StrLength);
	        }
	    };

	    /**
	     * UTF-8 encoding strategy.
	     */
	    var Utf8 = C_enc.Utf8 = {
	        /**
	         * Converts a word array to a UTF-8 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-8 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            try {
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
	            } catch (e) {
	                throw new Error('Malformed UTF-8 data');
	            }
	        },

	        /**
	         * Converts a UTF-8 string to a word array.
	         *
	         * @param {string} utf8Str The UTF-8 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	         */
	        parse: function (utf8Str) {
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
	        }
	    };

	    /**
	     * Abstract buffered block algorithm template.
	     *
	     * The property blockSize must be implemented in a concrete subtype.
	     *
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
	        /**
	         * Resets this block algorithm's data buffer to its initial state.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm.reset();
	         */
	        reset: function () {
	            // Initial values
	            this._data = new WordArray.init();
	            this._nDataBytes = 0;
	        },

	        /**
	         * Adds new data to this block algorithm's buffer.
	         *
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm._append('data');
	         *     bufferedBlockAlgorithm._append(wordArray);
	         */
	        _append: function (data) {
	            // Convert string to WordArray, else assume WordArray already
	            if (typeof data == 'string') {
	                data = Utf8.parse(data);
	            }

	            // Append
	            this._data.concat(data);
	            this._nDataBytes += data.sigBytes;
	        },

	        /**
	         * Processes available data blocks.
	         *
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	         *
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	         *
	         * @return {WordArray} The processed data.
	         *
	         * @example
	         *
	         *     var processedData = bufferedBlockAlgorithm._process();
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	         */
	        _process: function (doFlush) {
	            var processedWords;

	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var dataSigBytes = data.sigBytes;
	            var blockSize = this.blockSize;
	            var blockSizeBytes = blockSize * 4;

	            // Count blocks ready
	            var nBlocksReady = dataSigBytes / blockSizeBytes;
	            if (doFlush) {
	                // Round up to include partial blocks
	                nBlocksReady = Math.ceil(nBlocksReady);
	            } else {
	                // Round down to include only full blocks,
	                // less the number of blocks that must remain in the buffer
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
	            }

	            // Count words ready
	            var nWordsReady = nBlocksReady * blockSize;

	            // Count bytes ready
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

	            // Process blocks
	            if (nWordsReady) {
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
	                    // Perform concrete-algorithm logic
	                    this._doProcessBlock(dataWords, offset);
	                }

	                // Remove processed words
	                processedWords = dataWords.splice(0, nWordsReady);
	                data.sigBytes -= nBytesReady;
	            }

	            // Return processed words
	            return new WordArray.init(processedWords, nBytesReady);
	        },

	        /**
	         * Creates a copy of this object.
	         *
	         * @return {Object} The clone.
	         *
	         * @example
	         *
	         *     var clone = bufferedBlockAlgorithm.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone._data = this._data.clone();

	            return clone;
	        },

	        _minBufferSize: 0
	    });

	    /**
	     * Abstract hasher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	     */
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         */
	        cfg: Base.extend(),

	        /**
	         * Initializes a newly created hasher.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	         *
	         * @example
	         *
	         *     var hasher = CryptoJS.algo.SHA256.create();
	         */
	        init: function (cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this hasher to its initial state.
	         *
	         * @example
	         *
	         *     hasher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-hasher logic
	            this._doReset();
	        },

	        /**
	         * Updates this hasher with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {Hasher} This hasher.
	         *
	         * @example
	         *
	         *     hasher.update('message');
	         *     hasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            // Append
	            this._append(messageUpdate);

	            // Update the hash
	            this._process();

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the hash computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The hash.
	         *
	         * @example
	         *
	         *     var hash = hasher.finalize();
	         *     var hash = hasher.finalize('message');
	         *     var hash = hasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Final message update
	            if (messageUpdate) {
	                this._append(messageUpdate);
	            }

	            // Perform concrete-hasher logic
	            var hash = this._doFinalize();

	            return hash;
	        },

	        blockSize: 512/32,

	        /**
	         * Creates a shortcut function to a hasher's object interface.
	         *
	         * @param {Hasher} hasher The hasher to create a helper for.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	         */
	        _createHelper: function (hasher) {
	            return function (message, cfg) {
	                return new hasher.init(cfg).finalize(message);
	            };
	        },

	        /**
	         * Creates a shortcut function to the HMAC's object interface.
	         *
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	         */
	        _createHmacHelper: function (hasher) {
	            return function (message, key) {
	                return new C_algo.HMAC.init(hasher, key).finalize(message);
	            };
	        }
	    });

	    /**
	     * Algorithm namespace.
	     */
	    var C_algo = C.algo = {};

	    return C;
	}(Math));


	return CryptoJS;

}));
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(132)))

/***/ }),
/* 132 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 133 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131));
	}
	else {}
}(this, function (CryptoJS) {

	(function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var X32WordArray = C_lib.WordArray;

	    /**
	     * x64 namespace.
	     */
	    var C_x64 = C.x64 = {};

	    /**
	     * A 64-bit word.
	     */
	    var X64Word = C_x64.Word = Base.extend({
	        /**
	         * Initializes a newly created 64-bit word.
	         *
	         * @param {number} high The high 32 bits.
	         * @param {number} low The low 32 bits.
	         *
	         * @example
	         *
	         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
	         */
	        init: function (high, low) {
	            this.high = high;
	            this.low = low;
	        }

	        /**
	         * Bitwise NOTs this word.
	         *
	         * @return {X64Word} A new x64-Word object after negating.
	         *
	         * @example
	         *
	         *     var negated = x64Word.not();
	         */
	        // not: function () {
	            // var high = ~this.high;
	            // var low = ~this.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise ANDs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to AND with this word.
	         *
	         * @return {X64Word} A new x64-Word object after ANDing.
	         *
	         * @example
	         *
	         *     var anded = x64Word.and(anotherX64Word);
	         */
	        // and: function (word) {
	            // var high = this.high & word.high;
	            // var low = this.low & word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise ORs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to OR with this word.
	         *
	         * @return {X64Word} A new x64-Word object after ORing.
	         *
	         * @example
	         *
	         *     var ored = x64Word.or(anotherX64Word);
	         */
	        // or: function (word) {
	            // var high = this.high | word.high;
	            // var low = this.low | word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise XORs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to XOR with this word.
	         *
	         * @return {X64Word} A new x64-Word object after XORing.
	         *
	         * @example
	         *
	         *     var xored = x64Word.xor(anotherX64Word);
	         */
	        // xor: function (word) {
	            // var high = this.high ^ word.high;
	            // var low = this.low ^ word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Shifts this word n bits to the left.
	         *
	         * @param {number} n The number of bits to shift.
	         *
	         * @return {X64Word} A new x64-Word object after shifting.
	         *
	         * @example
	         *
	         *     var shifted = x64Word.shiftL(25);
	         */
	        // shiftL: function (n) {
	            // if (n < 32) {
	                // var high = (this.high << n) | (this.low >>> (32 - n));
	                // var low = this.low << n;
	            // } else {
	                // var high = this.low << (n - 32);
	                // var low = 0;
	            // }

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Shifts this word n bits to the right.
	         *
	         * @param {number} n The number of bits to shift.
	         *
	         * @return {X64Word} A new x64-Word object after shifting.
	         *
	         * @example
	         *
	         *     var shifted = x64Word.shiftR(7);
	         */
	        // shiftR: function (n) {
	            // if (n < 32) {
	                // var low = (this.low >>> n) | (this.high << (32 - n));
	                // var high = this.high >>> n;
	            // } else {
	                // var low = this.high >>> (n - 32);
	                // var high = 0;
	            // }

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Rotates this word n bits to the left.
	         *
	         * @param {number} n The number of bits to rotate.
	         *
	         * @return {X64Word} A new x64-Word object after rotating.
	         *
	         * @example
	         *
	         *     var rotated = x64Word.rotL(25);
	         */
	        // rotL: function (n) {
	            // return this.shiftL(n).or(this.shiftR(64 - n));
	        // },

	        /**
	         * Rotates this word n bits to the right.
	         *
	         * @param {number} n The number of bits to rotate.
	         *
	         * @return {X64Word} A new x64-Word object after rotating.
	         *
	         * @example
	         *
	         *     var rotated = x64Word.rotR(7);
	         */
	        // rotR: function (n) {
	            // return this.shiftR(n).or(this.shiftL(64 - n));
	        // },

	        /**
	         * Adds this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to add with this word.
	         *
	         * @return {X64Word} A new x64-Word object after adding.
	         *
	         * @example
	         *
	         *     var added = x64Word.add(anotherX64Word);
	         */
	        // add: function (word) {
	            // var low = (this.low + word.low) | 0;
	            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
	            // var high = (this.high + word.high + carry) | 0;

	            // return X64Word.create(high, low);
	        // }
	    });

	    /**
	     * An array of 64-bit words.
	     *
	     * @property {Array} words The array of CryptoJS.x64.Word objects.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var X64WordArray = C_x64.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create();
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create([
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	         *     ]);
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create([
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	         *     ], 10);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 8;
	            }
	        },

	        /**
	         * Converts this 64-bit word array to a 32-bit word array.
	         *
	         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
	         *
	         * @example
	         *
	         *     var x32WordArray = x64WordArray.toX32();
	         */
	        toX32: function () {
	            // Shortcuts
	            var x64Words = this.words;
	            var x64WordsLength = x64Words.length;

	            // Convert
	            var x32Words = [];
	            for (var i = 0; i < x64WordsLength; i++) {
	                var x64Word = x64Words[i];
	                x32Words.push(x64Word.high);
	                x32Words.push(x64Word.low);
	            }

	            return X32WordArray.create(x32Words, this.sigBytes);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {X64WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = x64WordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);

	            // Clone "words" array
	            var words = clone.words = this.words.slice(0);

	            // Clone each X64Word object
	            var wordsLength = words.length;
	            for (var i = 0; i < wordsLength; i++) {
	                words[i] = words[i].clone();
	            }

	            return clone;
	        }
	    });
	}());


	return CryptoJS;

}));

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Check if typed arrays are supported
	    if (typeof ArrayBuffer != 'function') {
	        return;
	    }

	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;

	    // Reference original init
	    var superInit = WordArray.init;

	    // Augment WordArray.init to handle typed arrays
	    var subInit = WordArray.init = function (typedArray) {
	        // Convert buffers to uint8
	        if (typedArray instanceof ArrayBuffer) {
	            typedArray = new Uint8Array(typedArray);
	        }

	        // Convert other array views to uint8
	        if (
	            typedArray instanceof Int8Array ||
	            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
	            typedArray instanceof Int16Array ||
	            typedArray instanceof Uint16Array ||
	            typedArray instanceof Int32Array ||
	            typedArray instanceof Uint32Array ||
	            typedArray instanceof Float32Array ||
	            typedArray instanceof Float64Array
	        ) {
	            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
	        }

	        // Handle Uint8Array
	        if (typedArray instanceof Uint8Array) {
	            // Shortcut
	            var typedArrayByteLength = typedArray.byteLength;

	            // Extract bytes
	            var words = [];
	            for (var i = 0; i < typedArrayByteLength; i++) {
	                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
	            }

	            // Initialize this word array
	            superInit.call(this, words, typedArrayByteLength);
	        } else {
	            // Else call normal init
	            superInit.apply(this, arguments);
	        }
	    };

	    subInit.prototype = WordArray;
	}());


	return CryptoJS.lib.WordArray;

}));

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_enc = C.enc;

	    /**
	     * UTF-16 BE encoding strategy.
	     */
	    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
	        /**
	         * Converts a word array to a UTF-16 BE string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-16 BE string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var utf16Chars = [];
	            for (var i = 0; i < sigBytes; i += 2) {
	                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
	                utf16Chars.push(String.fromCharCode(codePoint));
	            }

	            return utf16Chars.join('');
	        },

	        /**
	         * Converts a UTF-16 BE string to a word array.
	         *
	         * @param {string} utf16Str The UTF-16 BE string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
	         */
	        parse: function (utf16Str) {
	            // Shortcut
	            var utf16StrLength = utf16Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < utf16StrLength; i++) {
	                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
	            }

	            return WordArray.create(words, utf16StrLength * 2);
	        }
	    };

	    /**
	     * UTF-16 LE encoding strategy.
	     */
	    C_enc.Utf16LE = {
	        /**
	         * Converts a word array to a UTF-16 LE string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-16 LE string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var utf16Chars = [];
	            for (var i = 0; i < sigBytes; i += 2) {
	                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
	                utf16Chars.push(String.fromCharCode(codePoint));
	            }

	            return utf16Chars.join('');
	        },

	        /**
	         * Converts a UTF-16 LE string to a word array.
	         *
	         * @param {string} utf16Str The UTF-16 LE string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
	         */
	        parse: function (utf16Str) {
	            // Shortcut
	            var utf16StrLength = utf16Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < utf16StrLength; i++) {
	                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
	            }

	            return WordArray.create(words, utf16StrLength * 2);
	        }
	    };

	    function swapEndian(word) {
	        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
	    }
	}());


	return CryptoJS.enc.Utf16;

}));

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_enc = C.enc;

	    /**
	     * Base64 encoding strategy.
	     */
	    var Base64 = C_enc.Base64 = {
	        /**
	         * Converts a word array to a Base64 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Base64 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;
	            var map = this._map;

	            // Clamp excess bits
	            wordArray.clamp();

	            // Convert
	            var base64Chars = [];
	            for (var i = 0; i < sigBytes; i += 3) {
	                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
	                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
	                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

	                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

	                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
	                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
	                }
	            }

	            // Add padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                while (base64Chars.length % 4) {
	                    base64Chars.push(paddingChar);
	                }
	            }

	            return base64Chars.join('');
	        },

	        /**
	         * Converts a Base64 string to a word array.
	         *
	         * @param {string} base64Str The Base64 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
	         */
	        parse: function (base64Str) {
	            // Shortcuts
	            var base64StrLength = base64Str.length;
	            var map = this._map;
	            var reverseMap = this._reverseMap;

	            if (!reverseMap) {
	                    reverseMap = this._reverseMap = [];
	                    for (var j = 0; j < map.length; j++) {
	                        reverseMap[map.charCodeAt(j)] = j;
	                    }
	            }

	            // Ignore padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                var paddingIndex = base64Str.indexOf(paddingChar);
	                if (paddingIndex !== -1) {
	                    base64StrLength = paddingIndex;
	                }
	            }

	            // Convert
	            return parseLoop(base64Str, base64StrLength, reverseMap);

	        },

	        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
	    };

	    function parseLoop(base64Str, base64StrLength, reverseMap) {
	      var words = [];
	      var nBytes = 0;
	      for (var i = 0; i < base64StrLength; i++) {
	          if (i % 4) {
	              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
	              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
	              var bitsCombined = bits1 | bits2;
	              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);
	              nBytes++;
	          }
	      }
	      return WordArray.create(words, nBytes);
	    }
	}());


	return CryptoJS.enc.Base64;

}));

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_enc = C.enc;

	    /**
	     * Base64url encoding strategy.
	     */
	    var Base64url = C_enc.Base64url = {
	        /**
	         * Converts a word array to a Base64url string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @param {boolean} urlSafe Whether to use url safe
	         *
	         * @return {string} The Base64url string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);
	         */
	        stringify: function (wordArray, urlSafe=true) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;
	            var map = urlSafe ? this._safe_map : this._map;

	            // Clamp excess bits
	            wordArray.clamp();

	            // Convert
	            var base64Chars = [];
	            for (var i = 0; i < sigBytes; i += 3) {
	                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
	                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
	                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

	                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

	                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
	                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
	                }
	            }

	            // Add padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                while (base64Chars.length % 4) {
	                    base64Chars.push(paddingChar);
	                }
	            }

	            return base64Chars.join('');
	        },

	        /**
	         * Converts a Base64url string to a word array.
	         *
	         * @param {string} base64Str The Base64url string.
	         *
	         * @param {boolean} urlSafe Whether to use url safe
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);
	         */
	        parse: function (base64Str, urlSafe=true) {
	            // Shortcuts
	            var base64StrLength = base64Str.length;
	            var map = urlSafe ? this._safe_map : this._map;
	            var reverseMap = this._reverseMap;

	            if (!reverseMap) {
	                reverseMap = this._reverseMap = [];
	                for (var j = 0; j < map.length; j++) {
	                    reverseMap[map.charCodeAt(j)] = j;
	                }
	            }

	            // Ignore padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                var paddingIndex = base64Str.indexOf(paddingChar);
	                if (paddingIndex !== -1) {
	                    base64StrLength = paddingIndex;
	                }
	            }

	            // Convert
	            return parseLoop(base64Str, base64StrLength, reverseMap);

	        },

	        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
	        _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',
	    };

	    function parseLoop(base64Str, base64StrLength, reverseMap) {
	        var words = [];
	        var nBytes = 0;
	        for (var i = 0; i < base64StrLength; i++) {
	            if (i % 4) {
	                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
	                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
	                var bitsCombined = bits1 | bits2;
	                words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);
	                nBytes++;
	            }
	        }
	        return WordArray.create(words, nBytes);
	    }
	}());

	return CryptoJS.enc.Base64url;

}));

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131));
	}
	else {}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Constants table
	    var T = [];

	    // Compute constants
	    (function () {
	        for (var i = 0; i < 64; i++) {
	            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
	        }
	    }());

	    /**
	     * MD5 hash algorithm.
	     */
	    var MD5 = C_algo.MD5 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Swap endian
	            for (var i = 0; i < 16; i++) {
	                // Shortcuts
	                var offset_i = offset + i;
	                var M_offset_i = M[offset_i];

	                M[offset_i] = (
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	                );
	            }

	            // Shortcuts
	            var H = this._hash.words;

	            var M_offset_0  = M[offset + 0];
	            var M_offset_1  = M[offset + 1];
	            var M_offset_2  = M[offset + 2];
	            var M_offset_3  = M[offset + 3];
	            var M_offset_4  = M[offset + 4];
	            var M_offset_5  = M[offset + 5];
	            var M_offset_6  = M[offset + 6];
	            var M_offset_7  = M[offset + 7];
	            var M_offset_8  = M[offset + 8];
	            var M_offset_9  = M[offset + 9];
	            var M_offset_10 = M[offset + 10];
	            var M_offset_11 = M[offset + 11];
	            var M_offset_12 = M[offset + 12];
	            var M_offset_13 = M[offset + 13];
	            var M_offset_14 = M[offset + 14];
	            var M_offset_15 = M[offset + 15];

	            // Working varialbes
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];

	            // Computation
	            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
	            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
	            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
	            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
	            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
	            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
	            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
	            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
	            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
	            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
	            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
	            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
	            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
	            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
	            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
	            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

	            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
	            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
	            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
	            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
	            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
	            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
	            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
	            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
	            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
	            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
	            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
	            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
	            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
	            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
	            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
	            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

	            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
	            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
	            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
	            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
	            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
	            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
	            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
	            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
	            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
	            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
	            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
	            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
	            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
	            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
	            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
	            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

	            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
	            d = II(d, a, b, c, M_offset_7,  10, T[49]);
	            c = II(c, d, a, b, M_offset_14, 15, T[50]);
	            b = II(b, c, d, a, M_offset_5,  21, T[51]);
	            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
	            d = II(d, a, b, c, M_offset_3,  10, T[53]);
	            c = II(c, d, a, b, M_offset_10, 15, T[54]);
	            b = II(b, c, d, a, M_offset_1,  21, T[55]);
	            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
	            d = II(d, a, b, c, M_offset_15, 10, T[57]);
	            c = II(c, d, a, b, M_offset_6,  15, T[58]);
	            b = II(b, c, d, a, M_offset_13, 21, T[59]);
	            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
	            d = II(d, a, b, c, M_offset_11, 10, T[61]);
	            c = II(c, d, a, b, M_offset_2,  15, T[62]);
	            b = II(b, c, d, a, M_offset_9,  21, T[63]);

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

	            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
	            var nBitsTotalL = nBitsTotal;
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
	                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
	            );
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
	            );

	            data.sigBytes = (dataWords.length + 1) * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var hash = this._hash;
	            var H = hash.words;

	            // Swap endian
	            for (var i = 0; i < 4; i++) {
	                // Shortcut
	                var H_i = H[i];

	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	            }

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    function FF(a, b, c, d, x, s, t) {
	        var n = a + ((b & c) | (~b & d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function GG(a, b, c, d, x, s, t) {
	        var n = a + ((b & d) | (c & ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function HH(a, b, c, d, x, s, t) {
	        var n = a + (b ^ c ^ d) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function II(a, b, c, d, x, s, t) {
	        var n = a + (c ^ (b | ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.MD5('message');
	     *     var hash = CryptoJS.MD5(wordArray);
	     */
	    C.MD5 = Hasher._createHelper(MD5);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacMD5(message, key);
	     */
	    C.HmacMD5 = Hasher._createHmacHelper(MD5);
	}(Math));


	return CryptoJS.MD5;

}));

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Reusable object
	    var W = [];

	    /**
	     * SHA-1 hash algorithm.
	     */
	    var SHA1 = C_algo.SHA1 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476,
	                0xc3d2e1f0
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;

	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];

	            // Computation
	            for (var i = 0; i < 80; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
	                    W[i] = (n << 1) | (n >>> 31);
	                }

	                var t = ((a << 5) | (a >>> 27)) + e + W[i];
	                if (i < 20) {
	                    t += ((b & c) | (~b & d)) + 0x5a827999;
	                } else if (i < 40) {
	                    t += (b ^ c ^ d) + 0x6ed9eba1;
	                } else if (i < 60) {
	                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
	                } else /* if (i < 80) */ {
	                    t += (b ^ c ^ d) - 0x359d3e2a;
	                }

	                e = d;
	                d = c;
	                c = (b << 30) | (b >>> 2);
	                b = a;
	                a = t;
	            }

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Return final computed hash
	            return this._hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA1('message');
	     *     var hash = CryptoJS.SHA1(wordArray);
	     */
	    C.SHA1 = Hasher._createHelper(SHA1);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA1(message, key);
	     */
	    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
	}());


	return CryptoJS.SHA1;

}));

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131));
	}
	else {}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Initialization and round constants tables
	    var H = [];
	    var K = [];

	    // Compute constants
	    (function () {
	        function isPrime(n) {
	            var sqrtN = Math.sqrt(n);
	            for (var factor = 2; factor <= sqrtN; factor++) {
	                if (!(n % factor)) {
	                    return false;
	                }
	            }

	            return true;
	        }

	        function getFractionalBits(n) {
	            return ((n - (n | 0)) * 0x100000000) | 0;
	        }

	        var n = 2;
	        var nPrime = 0;
	        while (nPrime < 64) {
	            if (isPrime(n)) {
	                if (nPrime < 8) {
	                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
	                }
	                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

	                nPrime++;
	            }

	            n++;
	        }
	    }());

	    // Reusable object
	    var W = [];

	    /**
	     * SHA-256 hash algorithm.
	     */
	    var SHA256 = C_algo.SHA256 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init(H.slice(0));
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;

	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];
	            var f = H[5];
	            var g = H[6];
	            var h = H[7];

	            // Computation
	            for (var i = 0; i < 64; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var gamma0x = W[i - 15];
	                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
	                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
	                                   (gamma0x >>> 3);

	                    var gamma1x = W[i - 2];
	                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
	                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
	                                   (gamma1x >>> 10);

	                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
	                }

	                var ch  = (e & f) ^ (~e & g);
	                var maj = (a & b) ^ (a & c) ^ (b & c);

	                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
	                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

	                var t1 = h + sigma1 + ch + K[i] + W[i];
	                var t2 = sigma0 + maj;

	                h = g;
	                g = f;
	                f = e;
	                e = (d + t1) | 0;
	                d = c;
	                c = b;
	                b = a;
	                a = (t1 + t2) | 0;
	            }

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	            H[5] = (H[5] + f) | 0;
	            H[6] = (H[6] + g) | 0;
	            H[7] = (H[7] + h) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Return final computed hash
	            return this._hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA256('message');
	     *     var hash = CryptoJS.SHA256(wordArray);
	     */
	    C.SHA256 = Hasher._createHelper(SHA256);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA256(message, key);
	     */
	    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
	}(Math));


	return CryptoJS.SHA256;

}));

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(141));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var SHA256 = C_algo.SHA256;

	    /**
	     * SHA-224 hash algorithm.
	     */
	    var SHA224 = C_algo.SHA224 = SHA256.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
	            ]);
	        },

	        _doFinalize: function () {
	            var hash = SHA256._doFinalize.call(this);

	            hash.sigBytes -= 4;

	            return hash;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA224('message');
	     *     var hash = CryptoJS.SHA224(wordArray);
	     */
	    C.SHA224 = SHA256._createHelper(SHA224);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA224(message, key);
	     */
	    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
	}());


	return CryptoJS.SHA224;

}));

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(134));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Hasher = C_lib.Hasher;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var X64WordArray = C_x64.WordArray;
	    var C_algo = C.algo;

	    function X64Word_create() {
	        return X64Word.create.apply(X64Word, arguments);
	    }

	    // Constants
	    var K = [
	        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
	        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
	        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
	        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
	        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
	        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
	        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
	        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
	        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
	        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
	        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
	        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
	        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
	        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
	        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
	        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
	        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
	        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
	        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
	        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
	        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
	        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
	        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
	        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
	        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
	        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
	        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
	        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
	        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
	        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
	        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
	        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
	        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
	        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
	        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
	        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
	        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
	        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
	        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
	        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
	    ];

	    // Reusable objects
	    var W = [];
	    (function () {
	        for (var i = 0; i < 80; i++) {
	            W[i] = X64Word_create();
	        }
	    }());

	    /**
	     * SHA-512 hash algorithm.
	     */
	    var SHA512 = C_algo.SHA512 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new X64WordArray.init([
	                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
	                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
	                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
	                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcuts
	            var H = this._hash.words;

	            var H0 = H[0];
	            var H1 = H[1];
	            var H2 = H[2];
	            var H3 = H[3];
	            var H4 = H[4];
	            var H5 = H[5];
	            var H6 = H[6];
	            var H7 = H[7];

	            var H0h = H0.high;
	            var H0l = H0.low;
	            var H1h = H1.high;
	            var H1l = H1.low;
	            var H2h = H2.high;
	            var H2l = H2.low;
	            var H3h = H3.high;
	            var H3l = H3.low;
	            var H4h = H4.high;
	            var H4l = H4.low;
	            var H5h = H5.high;
	            var H5l = H5.low;
	            var H6h = H6.high;
	            var H6l = H6.low;
	            var H7h = H7.high;
	            var H7l = H7.low;

	            // Working variables
	            var ah = H0h;
	            var al = H0l;
	            var bh = H1h;
	            var bl = H1l;
	            var ch = H2h;
	            var cl = H2l;
	            var dh = H3h;
	            var dl = H3l;
	            var eh = H4h;
	            var el = H4l;
	            var fh = H5h;
	            var fl = H5l;
	            var gh = H6h;
	            var gl = H6l;
	            var hh = H7h;
	            var hl = H7l;

	            // Rounds
	            for (var i = 0; i < 80; i++) {
	                var Wil;
	                var Wih;

	                // Shortcut
	                var Wi = W[i];

	                // Extend message
	                if (i < 16) {
	                    Wih = Wi.high = M[offset + i * 2]     | 0;
	                    Wil = Wi.low  = M[offset + i * 2 + 1] | 0;
	                } else {
	                    // Gamma0
	                    var gamma0x  = W[i - 15];
	                    var gamma0xh = gamma0x.high;
	                    var gamma0xl = gamma0x.low;
	                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
	                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));

	                    // Gamma1
	                    var gamma1x  = W[i - 2];
	                    var gamma1xh = gamma1x.high;
	                    var gamma1xl = gamma1x.low;
	                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
	                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));

	                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	                    var Wi7  = W[i - 7];
	                    var Wi7h = Wi7.high;
	                    var Wi7l = Wi7.low;

	                    var Wi16  = W[i - 16];
	                    var Wi16h = Wi16.high;
	                    var Wi16l = Wi16.low;

	                    Wil = gamma0l + Wi7l;
	                    Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
	                    Wil = Wil + gamma1l;
	                    Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
	                    Wil = Wil + Wi16l;
	                    Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);

	                    Wi.high = Wih;
	                    Wi.low  = Wil;
	                }

	                var chh  = (eh & fh) ^ (~eh & gh);
	                var chl  = (el & fl) ^ (~el & gl);
	                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
	                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);

	                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
	                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
	                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
	                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));

	                // t1 = h + sigma1 + ch + K[i] + W[i]
	                var Ki  = K[i];
	                var Kih = Ki.high;
	                var Kil = Ki.low;

	                var t1l = hl + sigma1l;
	                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
	                var t1l = t1l + chl;
	                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
	                var t1l = t1l + Kil;
	                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
	                var t1l = t1l + Wil;
	                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);

	                // t2 = sigma0 + maj
	                var t2l = sigma0l + majl;
	                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);

	                // Update working variables
	                hh = gh;
	                hl = gl;
	                gh = fh;
	                gl = fl;
	                fh = eh;
	                fl = el;
	                el = (dl + t1l) | 0;
	                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
	                dh = ch;
	                dl = cl;
	                ch = bh;
	                cl = bl;
	                bh = ah;
	                bl = al;
	                al = (t1l + t2l) | 0;
	                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
	            }

	            // Intermediate hash value
	            H0l = H0.low  = (H0l + al);
	            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
	            H1l = H1.low  = (H1l + bl);
	            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
	            H2l = H2.low  = (H2l + cl);
	            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
	            H3l = H3.low  = (H3l + dl);
	            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
	            H4l = H4.low  = (H4l + el);
	            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
	            H5l = H5.low  = (H5l + fl);
	            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
	            H6l = H6.low  = (H6l + gl);
	            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
	            H7l = H7.low  = (H7l + hl);
	            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Convert hash to 32-bit word array before returning
	            var hash = this._hash.toX32();

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        },

	        blockSize: 1024/32
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA512('message');
	     *     var hash = CryptoJS.SHA512(wordArray);
	     */
	    C.SHA512 = Hasher._createHelper(SHA512);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA512(message, key);
	     */
	    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
	}());


	return CryptoJS.SHA512;

}));

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(134), __webpack_require__(143));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var X64WordArray = C_x64.WordArray;
	    var C_algo = C.algo;
	    var SHA512 = C_algo.SHA512;

	    /**
	     * SHA-384 hash algorithm.
	     */
	    var SHA384 = C_algo.SHA384 = SHA512.extend({
	        _doReset: function () {
	            this._hash = new X64WordArray.init([
	                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
	                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
	                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
	                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
	            ]);
	        },

	        _doFinalize: function () {
	            var hash = SHA512._doFinalize.call(this);

	            hash.sigBytes -= 16;

	            return hash;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA384('message');
	     *     var hash = CryptoJS.SHA384(wordArray);
	     */
	    C.SHA384 = SHA512._createHelper(SHA384);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA384(message, key);
	     */
	    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
	}());


	return CryptoJS.SHA384;

}));

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(134));
	}
	else {}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var C_algo = C.algo;

	    // Constants tables
	    var RHO_OFFSETS = [];
	    var PI_INDEXES  = [];
	    var ROUND_CONSTANTS = [];

	    // Compute Constants
	    (function () {
	        // Compute rho offset constants
	        var x = 1, y = 0;
	        for (var t = 0; t < 24; t++) {
	            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;

	            var newX = y % 5;
	            var newY = (2 * x + 3 * y) % 5;
	            x = newX;
	            y = newY;
	        }

	        // Compute pi index constants
	        for (var x = 0; x < 5; x++) {
	            for (var y = 0; y < 5; y++) {
	                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
	            }
	        }

	        // Compute round constants
	        var LFSR = 0x01;
	        for (var i = 0; i < 24; i++) {
	            var roundConstantMsw = 0;
	            var roundConstantLsw = 0;

	            for (var j = 0; j < 7; j++) {
	                if (LFSR & 0x01) {
	                    var bitPosition = (1 << j) - 1;
	                    if (bitPosition < 32) {
	                        roundConstantLsw ^= 1 << bitPosition;
	                    } else /* if (bitPosition >= 32) */ {
	                        roundConstantMsw ^= 1 << (bitPosition - 32);
	                    }
	                }

	                // Compute next LFSR
	                if (LFSR & 0x80) {
	                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
	                    LFSR = (LFSR << 1) ^ 0x71;
	                } else {
	                    LFSR <<= 1;
	                }
	            }

	            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
	        }
	    }());

	    // Reusable objects for temporary values
	    var T = [];
	    (function () {
	        for (var i = 0; i < 25; i++) {
	            T[i] = X64Word.create();
	        }
	    }());

	    /**
	     * SHA-3 hash algorithm.
	     */
	    var SHA3 = C_algo.SHA3 = Hasher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} outputLength
	         *   The desired number of bits in the output hash.
	         *   Only values permitted are: 224, 256, 384, 512.
	         *   Default: 512
	         */
	        cfg: Hasher.cfg.extend({
	            outputLength: 512
	        }),

	        _doReset: function () {
	            var state = this._state = []
	            for (var i = 0; i < 25; i++) {
	                state[i] = new X64Word.init();
	            }

	            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcuts
	            var state = this._state;
	            var nBlockSizeLanes = this.blockSize / 2;

	            // Absorb
	            for (var i = 0; i < nBlockSizeLanes; i++) {
	                // Shortcuts
	                var M2i  = M[offset + 2 * i];
	                var M2i1 = M[offset + 2 * i + 1];

	                // Swap endian
	                M2i = (
	                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |
	                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)
	                );
	                M2i1 = (
	                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |
	                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)
	                );

	                // Absorb message into state
	                var lane = state[i];
	                lane.high ^= M2i1;
	                lane.low  ^= M2i;
	            }

	            // Rounds
	            for (var round = 0; round < 24; round++) {
	                // Theta
	                for (var x = 0; x < 5; x++) {
	                    // Mix column lanes
	                    var tMsw = 0, tLsw = 0;
	                    for (var y = 0; y < 5; y++) {
	                        var lane = state[x + 5 * y];
	                        tMsw ^= lane.high;
	                        tLsw ^= lane.low;
	                    }

	                    // Temporary values
	                    var Tx = T[x];
	                    Tx.high = tMsw;
	                    Tx.low  = tLsw;
	                }
	                for (var x = 0; x < 5; x++) {
	                    // Shortcuts
	                    var Tx4 = T[(x + 4) % 5];
	                    var Tx1 = T[(x + 1) % 5];
	                    var Tx1Msw = Tx1.high;
	                    var Tx1Lsw = Tx1.low;

	                    // Mix surrounding columns
	                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
	                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
	                    for (var y = 0; y < 5; y++) {
	                        var lane = state[x + 5 * y];
	                        lane.high ^= tMsw;
	                        lane.low  ^= tLsw;
	                    }
	                }

	                // Rho Pi
	                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
	                    var tMsw;
	                    var tLsw;

	                    // Shortcuts
	                    var lane = state[laneIndex];
	                    var laneMsw = lane.high;
	                    var laneLsw = lane.low;
	                    var rhoOffset = RHO_OFFSETS[laneIndex];

	                    // Rotate lanes
	                    if (rhoOffset < 32) {
	                        tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
	                        tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
	                    } else /* if (rhoOffset >= 32) */ {
	                        tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
	                        tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
	                    }

	                    // Transpose lanes
	                    var TPiLane = T[PI_INDEXES[laneIndex]];
	                    TPiLane.high = tMsw;
	                    TPiLane.low  = tLsw;
	                }

	                // Rho pi at x = y = 0
	                var T0 = T[0];
	                var state0 = state[0];
	                T0.high = state0.high;
	                T0.low  = state0.low;

	                // Chi
	                for (var x = 0; x < 5; x++) {
	                    for (var y = 0; y < 5; y++) {
	                        // Shortcuts
	                        var laneIndex = x + 5 * y;
	                        var lane = state[laneIndex];
	                        var TLane = T[laneIndex];
	                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];
	                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];

	                        // Mix rows
	                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
	                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);
	                    }
	                }

	                // Iota
	                var lane = state[0];
	                var roundConstant = ROUND_CONSTANTS[round];
	                lane.high ^= roundConstant.high;
	                lane.low  ^= roundConstant.low;
	            }
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;
	            var blockSizeBits = this.blockSize * 32;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
	            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var state = this._state;
	            var outputLengthBytes = this.cfg.outputLength / 8;
	            var outputLengthLanes = outputLengthBytes / 8;

	            // Squeeze
	            var hashWords = [];
	            for (var i = 0; i < outputLengthLanes; i++) {
	                // Shortcuts
	                var lane = state[i];
	                var laneMsw = lane.high;
	                var laneLsw = lane.low;

	                // Swap endian
	                laneMsw = (
	                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |
	                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)
	                );
	                laneLsw = (
	                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |
	                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)
	                );

	                // Squeeze state to retrieve hash
	                hashWords.push(laneLsw);
	                hashWords.push(laneMsw);
	            }

	            // Return final computed hash
	            return new WordArray.init(hashWords, outputLengthBytes);
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);

	            var state = clone._state = this._state.slice(0);
	            for (var i = 0; i < 25; i++) {
	                state[i] = state[i].clone();
	            }

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA3('message');
	     *     var hash = CryptoJS.SHA3(wordArray);
	     */
	    C.SHA3 = Hasher._createHelper(SHA3);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA3(message, key);
	     */
	    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
	}(Math));


	return CryptoJS.SHA3;

}));

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131));
	}
	else {}
}(this, function (CryptoJS) {

	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Constants table
	    var _zl = WordArray.create([
	        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);
	    var _zr = WordArray.create([
	        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);
	    var _sl = WordArray.create([
	         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);
	    var _sr = WordArray.create([
	        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);

	    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
	    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

	    /**
	     * RIPEMD160 hash algorithm.
	     */
	    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
	        _doReset: function () {
	            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
	        },

	        _doProcessBlock: function (M, offset) {

	            // Swap endian
	            for (var i = 0; i < 16; i++) {
	                // Shortcuts
	                var offset_i = offset + i;
	                var M_offset_i = M[offset_i];

	                // Swap
	                M[offset_i] = (
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	                );
	            }
	            // Shortcut
	            var H  = this._hash.words;
	            var hl = _hl.words;
	            var hr = _hr.words;
	            var zl = _zl.words;
	            var zr = _zr.words;
	            var sl = _sl.words;
	            var sr = _sr.words;

	            // Working variables
	            var al, bl, cl, dl, el;
	            var ar, br, cr, dr, er;

	            ar = al = H[0];
	            br = bl = H[1];
	            cr = cl = H[2];
	            dr = dl = H[3];
	            er = el = H[4];
	            // Computation
	            var t;
	            for (var i = 0; i < 80; i += 1) {
	                t = (al +  M[offset+zl[i]])|0;
	                if (i<16){
		            t +=  f1(bl,cl,dl) + hl[0];
	                } else if (i<32) {
		            t +=  f2(bl,cl,dl) + hl[1];
	                } else if (i<48) {
		            t +=  f3(bl,cl,dl) + hl[2];
	                } else if (i<64) {
		            t +=  f4(bl,cl,dl) + hl[3];
	                } else {// if (i<80) {
		            t +=  f5(bl,cl,dl) + hl[4];
	                }
	                t = t|0;
	                t =  rotl(t,sl[i]);
	                t = (t+el)|0;
	                al = el;
	                el = dl;
	                dl = rotl(cl, 10);
	                cl = bl;
	                bl = t;

	                t = (ar + M[offset+zr[i]])|0;
	                if (i<16){
		            t +=  f5(br,cr,dr) + hr[0];
	                } else if (i<32) {
		            t +=  f4(br,cr,dr) + hr[1];
	                } else if (i<48) {
		            t +=  f3(br,cr,dr) + hr[2];
	                } else if (i<64) {
		            t +=  f2(br,cr,dr) + hr[3];
	                } else {// if (i<80) {
		            t +=  f1(br,cr,dr) + hr[4];
	                }
	                t = t|0;
	                t =  rotl(t,sr[i]) ;
	                t = (t+er)|0;
	                ar = er;
	                er = dr;
	                dr = rotl(cr, 10);
	                cr = br;
	                br = t;
	            }
	            // Intermediate hash value
	            t    = (H[1] + cl + dr)|0;
	            H[1] = (H[2] + dl + er)|0;
	            H[2] = (H[3] + el + ar)|0;
	            H[3] = (H[4] + al + br)|0;
	            H[4] = (H[0] + bl + cr)|0;
	            H[0] =  t;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	            );
	            data.sigBytes = (dataWords.length + 1) * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var hash = this._hash;
	            var H = hash.words;

	            // Swap endian
	            for (var i = 0; i < 5; i++) {
	                // Shortcut
	                var H_i = H[i];

	                // Swap
	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	            }

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });


	    function f1(x, y, z) {
	        return ((x) ^ (y) ^ (z));

	    }

	    function f2(x, y, z) {
	        return (((x)&(y)) | ((~x)&(z)));
	    }

	    function f3(x, y, z) {
	        return (((x) | (~(y))) ^ (z));
	    }

	    function f4(x, y, z) {
	        return (((x) & (z)) | ((y)&(~(z))));
	    }

	    function f5(x, y, z) {
	        return ((x) ^ ((y) |(~(z))));

	    }

	    function rotl(x,n) {
	        return (x<<n) | (x>>>(32-n));
	    }


	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.RIPEMD160('message');
	     *     var hash = CryptoJS.RIPEMD160(wordArray);
	     */
	    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
	     */
	    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
	}(Math));


	return CryptoJS.RIPEMD160;

}));

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var C_algo = C.algo;

	    /**
	     * HMAC algorithm.
	     */
	    var HMAC = C_algo.HMAC = Base.extend({
	        /**
	         * Initializes a newly created HMAC.
	         *
	         * @param {Hasher} hasher The hash algorithm to use.
	         * @param {WordArray|string} key The secret key.
	         *
	         * @example
	         *
	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
	         */
	        init: function (hasher, key) {
	            // Init hasher
	            hasher = this._hasher = new hasher.init();

	            // Convert string to WordArray, else assume WordArray already
	            if (typeof key == 'string') {
	                key = Utf8.parse(key);
	            }

	            // Shortcuts
	            var hasherBlockSize = hasher.blockSize;
	            var hasherBlockSizeBytes = hasherBlockSize * 4;

	            // Allow arbitrary length keys
	            if (key.sigBytes > hasherBlockSizeBytes) {
	                key = hasher.finalize(key);
	            }

	            // Clamp excess bits
	            key.clamp();

	            // Clone key for inner and outer pads
	            var oKey = this._oKey = key.clone();
	            var iKey = this._iKey = key.clone();

	            // Shortcuts
	            var oKeyWords = oKey.words;
	            var iKeyWords = iKey.words;

	            // XOR keys with pad constants
	            for (var i = 0; i < hasherBlockSize; i++) {
	                oKeyWords[i] ^= 0x5c5c5c5c;
	                iKeyWords[i] ^= 0x36363636;
	            }
	            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this HMAC to its initial state.
	         *
	         * @example
	         *
	         *     hmacHasher.reset();
	         */
	        reset: function () {
	            // Shortcut
	            var hasher = this._hasher;

	            // Reset
	            hasher.reset();
	            hasher.update(this._iKey);
	        },

	        /**
	         * Updates this HMAC with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {HMAC} This HMAC instance.
	         *
	         * @example
	         *
	         *     hmacHasher.update('message');
	         *     hmacHasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            this._hasher.update(messageUpdate);

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the HMAC computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The HMAC.
	         *
	         * @example
	         *
	         *     var hmac = hmacHasher.finalize();
	         *     var hmac = hmacHasher.finalize('message');
	         *     var hmac = hmacHasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Shortcut
	            var hasher = this._hasher;

	            // Compute HMAC
	            var innerHash = hasher.finalize(messageUpdate);
	            hasher.reset();
	            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

	            return hmac;
	        }
	    });
	}());


}));

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(140), __webpack_require__(147));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var SHA1 = C_algo.SHA1;
	    var HMAC = C_algo.HMAC;

	    /**
	     * Password-Based Key Derivation Function 2 algorithm.
	     */
	    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hasher to use. Default: SHA1
	         * @property {number} iterations The number of iterations to perform. Default: 1
	         */
	        cfg: Base.extend({
	            keySize: 128/32,
	            hasher: SHA1,
	            iterations: 1
	        }),

	        /**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.PBKDF2.create();
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
	         */
	        init: function (cfg) {
	            this.cfg = this.cfg.extend(cfg);
	        },

	        /**
	         * Computes the Password-Based Key Derivation Function 2.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */
	        compute: function (password, salt) {
	            // Shortcut
	            var cfg = this.cfg;

	            // Init HMAC
	            var hmac = HMAC.create(cfg.hasher, password);

	            // Initial values
	            var derivedKey = WordArray.create();
	            var blockIndex = WordArray.create([0x00000001]);

	            // Shortcuts
	            var derivedKeyWords = derivedKey.words;
	            var blockIndexWords = blockIndex.words;
	            var keySize = cfg.keySize;
	            var iterations = cfg.iterations;

	            // Generate key
	            while (derivedKeyWords.length < keySize) {
	                var block = hmac.update(salt).finalize(blockIndex);
	                hmac.reset();

	                // Shortcuts
	                var blockWords = block.words;
	                var blockWordsLength = blockWords.length;

	                // Iterations
	                var intermediate = block;
	                for (var i = 1; i < iterations; i++) {
	                    intermediate = hmac.finalize(intermediate);
	                    hmac.reset();

	                    // Shortcut
	                    var intermediateWords = intermediate.words;

	                    // XOR intermediate with block
	                    for (var j = 0; j < blockWordsLength; j++) {
	                        blockWords[j] ^= intermediateWords[j];
	                    }
	                }

	                derivedKey.concat(block);
	                blockIndexWords[0]++;
	            }
	            derivedKey.sigBytes = keySize * 4;

	            return derivedKey;
	        }
	    });

	    /**
	     * Computes the Password-Based Key Derivation Function 2.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.PBKDF2(password, salt);
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
	     */
	    C.PBKDF2 = function (password, salt, cfg) {
	        return PBKDF2.create(cfg).compute(password, salt);
	    };
	}());


	return CryptoJS.PBKDF2;

}));

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(140), __webpack_require__(147));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var MD5 = C_algo.MD5;

	    /**
	     * This key derivation function is meant to conform with EVP_BytesToKey.
	     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
	     */
	    var EvpKDF = C_algo.EvpKDF = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
	         * @property {number} iterations The number of iterations to perform. Default: 1
	         */
	        cfg: Base.extend({
	            keySize: 128/32,
	            hasher: MD5,
	            iterations: 1
	        }),

	        /**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.EvpKDF.create();
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
	         */
	        init: function (cfg) {
	            this.cfg = this.cfg.extend(cfg);
	        },

	        /**
	         * Derives a key from a password.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */
	        compute: function (password, salt) {
	            var block;

	            // Shortcut
	            var cfg = this.cfg;

	            // Init hasher
	            var hasher = cfg.hasher.create();

	            // Initial values
	            var derivedKey = WordArray.create();

	            // Shortcuts
	            var derivedKeyWords = derivedKey.words;
	            var keySize = cfg.keySize;
	            var iterations = cfg.iterations;

	            // Generate key
	            while (derivedKeyWords.length < keySize) {
	                if (block) {
	                    hasher.update(block);
	                }
	                block = hasher.update(password).finalize(salt);
	                hasher.reset();

	                // Iterations
	                for (var i = 1; i < iterations; i++) {
	                    block = hasher.finalize(block);
	                    hasher.reset();
	                }

	                derivedKey.concat(block);
	            }
	            derivedKey.sigBytes = keySize * 4;

	            return derivedKey;
	        }
	    });

	    /**
	     * Derives a key from a password.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.EvpKDF(password, salt);
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
	     */
	    C.EvpKDF = function (password, salt, cfg) {
	        return EvpKDF.create(cfg).compute(password, salt);
	    };
	}());


	return CryptoJS.EvpKDF;

}));

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(149));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * Cipher core components.
	 */
	CryptoJS.lib.Cipher || (function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var Base64 = C_enc.Base64;
	    var C_algo = C.algo;
	    var EvpKDF = C_algo.EvpKDF;

	    /**
	     * Abstract base cipher template.
	     *
	     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
	     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
	     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
	     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
	     */
	    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {WordArray} iv The IV to use for this operation.
	         */
	        cfg: Base.extend(),

	        /**
	         * Creates this cipher in encryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
	         */
	        createEncryptor: function (key, cfg) {
	            return this.create(this._ENC_XFORM_MODE, key, cfg);
	        },

	        /**
	         * Creates this cipher in decryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
	         */
	        createDecryptor: function (key, cfg) {
	            return this.create(this._DEC_XFORM_MODE, key, cfg);
	        },

	        /**
	         * Initializes a newly created cipher.
	         *
	         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
	         */
	        init: function (xformMode, key, cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Store transform mode and key
	            this._xformMode = xformMode;
	            this._key = key;

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this cipher to its initial state.
	         *
	         * @example
	         *
	         *     cipher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-cipher logic
	            this._doReset();
	        },

	        /**
	         * Adds data to be encrypted or decrypted.
	         *
	         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.process('data');
	         *     var encrypted = cipher.process(wordArray);
	         */
	        process: function (dataUpdate) {
	            // Append
	            this._append(dataUpdate);

	            // Process available blocks
	            return this._process();
	        },

	        /**
	         * Finalizes the encryption or decryption process.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after final processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.finalize();
	         *     var encrypted = cipher.finalize('data');
	         *     var encrypted = cipher.finalize(wordArray);
	         */
	        finalize: function (dataUpdate) {
	            // Final data update
	            if (dataUpdate) {
	                this._append(dataUpdate);
	            }

	            // Perform concrete-cipher logic
	            var finalProcessedData = this._doFinalize();

	            return finalProcessedData;
	        },

	        keySize: 128/32,

	        ivSize: 128/32,

	        _ENC_XFORM_MODE: 1,

	        _DEC_XFORM_MODE: 2,

	        /**
	         * Creates shortcut functions to a cipher's object interface.
	         *
	         * @param {Cipher} cipher The cipher to create a helper for.
	         *
	         * @return {Object} An object with encrypt and decrypt shortcut functions.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
	         */
	        _createHelper: (function () {
	            function selectCipherStrategy(key) {
	                if (typeof key == 'string') {
	                    return PasswordBasedCipher;
	                } else {
	                    return SerializableCipher;
	                }
	            }

	            return function (cipher) {
	                return {
	                    encrypt: function (message, key, cfg) {
	                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
	                    },

	                    decrypt: function (ciphertext, key, cfg) {
	                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
	                    }
	                };
	            };
	        }())
	    });

	    /**
	     * Abstract base stream cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
	     */
	    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
	        _doFinalize: function () {
	            // Process partial blocks
	            var finalProcessedBlocks = this._process(!!'flush');

	            return finalProcessedBlocks;
	        },

	        blockSize: 1
	    });

	    /**
	     * Mode namespace.
	     */
	    var C_mode = C.mode = {};

	    /**
	     * Abstract base block cipher mode template.
	     */
	    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
	        /**
	         * Creates this mode for encryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
	         */
	        createEncryptor: function (cipher, iv) {
	            return this.Encryptor.create(cipher, iv);
	        },

	        /**
	         * Creates this mode for decryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
	         */
	        createDecryptor: function (cipher, iv) {
	            return this.Decryptor.create(cipher, iv);
	        },

	        /**
	         * Initializes a newly created mode.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
	         */
	        init: function (cipher, iv) {
	            this._cipher = cipher;
	            this._iv = iv;
	        }
	    });

	    /**
	     * Cipher Block Chaining mode.
	     */
	    var CBC = C_mode.CBC = (function () {
	        /**
	         * Abstract base CBC mode.
	         */
	        var CBC = BlockCipherMode.extend();

	        /**
	         * CBC encryptor.
	         */
	        CBC.Encryptor = CBC.extend({
	            /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */
	            processBlock: function (words, offset) {
	                // Shortcuts
	                var cipher = this._cipher;
	                var blockSize = cipher.blockSize;

	                // XOR and encrypt
	                xorBlock.call(this, words, offset, blockSize);
	                cipher.encryptBlock(words, offset);

	                // Remember this block to use with next block
	                this._prevBlock = words.slice(offset, offset + blockSize);
	            }
	        });

	        /**
	         * CBC decryptor.
	         */
	        CBC.Decryptor = CBC.extend({
	            /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */
	            processBlock: function (words, offset) {
	                // Shortcuts
	                var cipher = this._cipher;
	                var blockSize = cipher.blockSize;

	                // Remember this block to use with next block
	                var thisBlock = words.slice(offset, offset + blockSize);

	                // Decrypt and XOR
	                cipher.decryptBlock(words, offset);
	                xorBlock.call(this, words, offset, blockSize);

	                // This block becomes the previous block
	                this._prevBlock = thisBlock;
	            }
	        });

	        function xorBlock(words, offset, blockSize) {
	            var block;

	            // Shortcut
	            var iv = this._iv;

	            // Choose mixing block
	            if (iv) {
	                block = iv;

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            } else {
	                block = this._prevBlock;
	            }

	            // XOR blocks
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= block[i];
	            }
	        }

	        return CBC;
	    }());

	    /**
	     * Padding namespace.
	     */
	    var C_pad = C.pad = {};

	    /**
	     * PKCS #5/7 padding strategy.
	     */
	    var Pkcs7 = C_pad.Pkcs7 = {
	        /**
	         * Pads data using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to pad.
	         * @param {number} blockSize The multiple that the data should be padded to.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
	         */
	        pad: function (data, blockSize) {
	            // Shortcut
	            var blockSizeBytes = blockSize * 4;

	            // Count padding bytes
	            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

	            // Create padding word
	            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

	            // Create padding
	            var paddingWords = [];
	            for (var i = 0; i < nPaddingBytes; i += 4) {
	                paddingWords.push(paddingWord);
	            }
	            var padding = WordArray.create(paddingWords, nPaddingBytes);

	            // Add padding
	            data.concat(padding);
	        },

	        /**
	         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to unpad.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
	         */
	        unpad: function (data) {
	            // Get number of padding bytes from last byte
	            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	            // Remove padding
	            data.sigBytes -= nPaddingBytes;
	        }
	    };

	    /**
	     * Abstract base block cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
	     */
	    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {Mode} mode The block mode to use. Default: CBC
	         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
	         */
	        cfg: Cipher.cfg.extend({
	            mode: CBC,
	            padding: Pkcs7
	        }),

	        reset: function () {
	            var modeCreator;

	            // Reset cipher
	            Cipher.reset.call(this);

	            // Shortcuts
	            var cfg = this.cfg;
	            var iv = cfg.iv;
	            var mode = cfg.mode;

	            // Reset block mode
	            if (this._xformMode == this._ENC_XFORM_MODE) {
	                modeCreator = mode.createEncryptor;
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
	                modeCreator = mode.createDecryptor;
	                // Keep at least one block in the buffer for unpadding
	                this._minBufferSize = 1;
	            }

	            if (this._mode && this._mode.__creator == modeCreator) {
	                this._mode.init(this, iv && iv.words);
	            } else {
	                this._mode = modeCreator.call(mode, this, iv && iv.words);
	                this._mode.__creator = modeCreator;
	            }
	        },

	        _doProcessBlock: function (words, offset) {
	            this._mode.processBlock(words, offset);
	        },

	        _doFinalize: function () {
	            var finalProcessedBlocks;

	            // Shortcut
	            var padding = this.cfg.padding;

	            // Finalize
	            if (this._xformMode == this._ENC_XFORM_MODE) {
	                // Pad data
	                padding.pad(this._data, this.blockSize);

	                // Process final blocks
	                finalProcessedBlocks = this._process(!!'flush');
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
	                // Process final blocks
	                finalProcessedBlocks = this._process(!!'flush');

	                // Unpad data
	                padding.unpad(finalProcessedBlocks);
	            }

	            return finalProcessedBlocks;
	        },

	        blockSize: 128/32
	    });

	    /**
	     * A collection of cipher parameters.
	     *
	     * @property {WordArray} ciphertext The raw ciphertext.
	     * @property {WordArray} key The key to this ciphertext.
	     * @property {WordArray} iv The IV used in the ciphering operation.
	     * @property {WordArray} salt The salt used with a key derivation function.
	     * @property {Cipher} algorithm The cipher algorithm.
	     * @property {Mode} mode The block mode used in the ciphering operation.
	     * @property {Padding} padding The padding scheme used in the ciphering operation.
	     * @property {number} blockSize The block size of the cipher.
	     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
	     */
	    var CipherParams = C_lib.CipherParams = Base.extend({
	        /**
	         * Initializes a newly created cipher params object.
	         *
	         * @param {Object} cipherParams An object with any of the possible cipher parameters.
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.lib.CipherParams.create({
	         *         ciphertext: ciphertextWordArray,
	         *         key: keyWordArray,
	         *         iv: ivWordArray,
	         *         salt: saltWordArray,
	         *         algorithm: CryptoJS.algo.AES,
	         *         mode: CryptoJS.mode.CBC,
	         *         padding: CryptoJS.pad.PKCS7,
	         *         blockSize: 4,
	         *         formatter: CryptoJS.format.OpenSSL
	         *     });
	         */
	        init: function (cipherParams) {
	            this.mixIn(cipherParams);
	        },

	        /**
	         * Converts this cipher params object to a string.
	         *
	         * @param {Format} formatter (Optional) The formatting strategy to use.
	         *
	         * @return {string} The stringified cipher params.
	         *
	         * @throws Error If neither the formatter nor the default formatter is set.
	         *
	         * @example
	         *
	         *     var string = cipherParams + '';
	         *     var string = cipherParams.toString();
	         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
	         */
	        toString: function (formatter) {
	            return (formatter || this.formatter).stringify(this);
	        }
	    });

	    /**
	     * Format namespace.
	     */
	    var C_format = C.format = {};

	    /**
	     * OpenSSL formatting strategy.
	     */
	    var OpenSSLFormatter = C_format.OpenSSL = {
	        /**
	         * Converts a cipher params object to an OpenSSL-compatible string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The OpenSSL-compatible string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
	         */
	        stringify: function (cipherParams) {
	            var wordArray;

	            // Shortcuts
	            var ciphertext = cipherParams.ciphertext;
	            var salt = cipherParams.salt;

	            // Format
	            if (salt) {
	                wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
	            } else {
	                wordArray = ciphertext;
	            }

	            return wordArray.toString(Base64);
	        },

	        /**
	         * Converts an OpenSSL-compatible string to a cipher params object.
	         *
	         * @param {string} openSSLStr The OpenSSL-compatible string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
	         */
	        parse: function (openSSLStr) {
	            var salt;

	            // Parse base64
	            var ciphertext = Base64.parse(openSSLStr);

	            // Shortcut
	            var ciphertextWords = ciphertext.words;

	            // Test for salt
	            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
	                // Extract salt
	                salt = WordArray.create(ciphertextWords.slice(2, 4));

	                // Remove salt from ciphertext
	                ciphertextWords.splice(0, 4);
	                ciphertext.sigBytes -= 16;
	            }

	            return CipherParams.create({ ciphertext: ciphertext, salt: salt });
	        }
	    };

	    /**
	     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
	     */
	    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
	         */
	        cfg: Base.extend({
	            format: OpenSSLFormatter
	        }),

	        /**
	         * Encrypts a message.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */
	        encrypt: function (cipher, message, key, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Encrypt
	            var encryptor = cipher.createEncryptor(key, cfg);
	            var ciphertext = encryptor.finalize(message);

	            // Shortcut
	            var cipherCfg = encryptor.cfg;

	            // Create and return serializable cipher params
	            return CipherParams.create({
	                ciphertext: ciphertext,
	                key: key,
	                iv: cipherCfg.iv,
	                algorithm: cipher,
	                mode: cipherCfg.mode,
	                padding: cipherCfg.padding,
	                blockSize: cipher.blockSize,
	                formatter: cfg.format
	            });
	        },

	        /**
	         * Decrypts serialized ciphertext.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */
	        decrypt: function (cipher, ciphertext, key, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Convert string to CipherParams
	            ciphertext = this._parse(ciphertext, cfg.format);

	            // Decrypt
	            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

	            return plaintext;
	        },

	        /**
	         * Converts serialized ciphertext to CipherParams,
	         * else assumed CipherParams already and returns ciphertext unchanged.
	         *
	         * @param {CipherParams|string} ciphertext The ciphertext.
	         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
	         *
	         * @return {CipherParams} The unserialized ciphertext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
	         */
	        _parse: function (ciphertext, format) {
	            if (typeof ciphertext == 'string') {
	                return format.parse(ciphertext, this);
	            } else {
	                return ciphertext;
	            }
	        }
	    });

	    /**
	     * Key derivation function namespace.
	     */
	    var C_kdf = C.kdf = {};

	    /**
	     * OpenSSL key derivation function.
	     */
	    var OpenSSLKdf = C_kdf.OpenSSL = {
	        /**
	         * Derives a key and IV from a password.
	         *
	         * @param {string} password The password to derive from.
	         * @param {number} keySize The size in words of the key to generate.
	         * @param {number} ivSize The size in words of the IV to generate.
	         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
	         *
	         * @return {CipherParams} A cipher params object with the key, IV, and salt.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
	         */
	        execute: function (password, keySize, ivSize, salt) {
	            // Generate random salt
	            if (!salt) {
	                salt = WordArray.random(64/8);
	            }

	            // Derive key and IV
	            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

	            // Separate key and IV
	            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
	            key.sigBytes = keySize * 4;

	            // Return params
	            return CipherParams.create({ key: key, iv: iv, salt: salt });
	        }
	    };

	    /**
	     * A serializable cipher wrapper that derives the key from a password,
	     * and returns ciphertext as a serializable cipher params object.
	     */
	    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
	         */
	        cfg: SerializableCipher.cfg.extend({
	            kdf: OpenSSLKdf
	        }),

	        /**
	         * Encrypts a message using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
	         */
	        encrypt: function (cipher, message, password, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Derive key and other params
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

	            // Add IV to config
	            cfg.iv = derivedParams.iv;

	            // Encrypt
	            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

	            // Mix in derived params
	            ciphertext.mixIn(derivedParams);

	            return ciphertext;
	        },

	        /**
	         * Decrypts serialized ciphertext using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
	         */
	        decrypt: function (cipher, ciphertext, password, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Convert string to CipherParams
	            ciphertext = this._parse(ciphertext, cfg.format);

	            // Derive key and other params
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

	            // Add IV to config
	            cfg.iv = derivedParams.iv;

	            // Decrypt
	            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

	            return plaintext;
	        }
	    });
	}());


}));

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(150));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * Cipher Feedback block mode.
	 */
	CryptoJS.mode.CFB = (function () {
	    var CFB = CryptoJS.lib.BlockCipherMode.extend();

	    CFB.Encryptor = CFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher;
	            var blockSize = cipher.blockSize;

	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

	            // Remember this block to use with next block
	            this._prevBlock = words.slice(offset, offset + blockSize);
	        }
	    });

	    CFB.Decryptor = CFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher;
	            var blockSize = cipher.blockSize;

	            // Remember this block to use with next block
	            var thisBlock = words.slice(offset, offset + blockSize);

	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

	            // This block becomes the previous block
	            this._prevBlock = thisBlock;
	        }
	    });

	    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
	        var keystream;

	        // Shortcut
	        var iv = this._iv;

	        // Generate keystream
	        if (iv) {
	            keystream = iv.slice(0);

	            // Remove IV for subsequent blocks
	            this._iv = undefined;
	        } else {
	            keystream = this._prevBlock;
	        }
	        cipher.encryptBlock(keystream, 0);

	        // Encrypt
	        for (var i = 0; i < blockSize; i++) {
	            words[offset + i] ^= keystream[i];
	        }
	    }

	    return CFB;
	}());


	return CryptoJS.mode.CFB;

}));

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(150));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * Counter block mode.
	 */
	CryptoJS.mode.CTR = (function () {
	    var CTR = CryptoJS.lib.BlockCipherMode.extend();

	    var Encryptor = CTR.Encryptor = CTR.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var counter = this._counter;

	            // Generate keystream
	            if (iv) {
	                counter = this._counter = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }
	            var keystream = counter.slice(0);
	            cipher.encryptBlock(keystream, 0);

	            // Increment counter
	            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    CTR.Decryptor = Encryptor;

	    return CTR;
	}());


	return CryptoJS.mode.CTR;

}));

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(150));
	}
	else {}
}(this, function (CryptoJS) {

	/** @preserve
	 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
	 * derived from CryptoJS.mode.CTR
	 * Jan Hruby jhruby.web@gmail.com
	 */
	CryptoJS.mode.CTRGladman = (function () {
	    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

		function incWord(word)
		{
			if (((word >> 24) & 0xff) === 0xff) { //overflow
			var b1 = (word >> 16)&0xff;
			var b2 = (word >> 8)&0xff;
			var b3 = word & 0xff;

			if (b1 === 0xff) // overflow b1
			{
			b1 = 0;
			if (b2 === 0xff)
			{
				b2 = 0;
				if (b3 === 0xff)
				{
					b3 = 0;
				}
				else
				{
					++b3;
				}
			}
			else
			{
				++b2;
			}
			}
			else
			{
			++b1;
			}

			word = 0;
			word += (b1 << 16);
			word += (b2 << 8);
			word += b3;
			}
			else
			{
			word += (0x01 << 24);
			}
			return word;
		}

		function incCounter(counter)
		{
			if ((counter[0] = incWord(counter[0])) === 0)
			{
				// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
				counter[1] = incWord(counter[1]);
			}
			return counter;
		}

	    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var counter = this._counter;

	            // Generate keystream
	            if (iv) {
	                counter = this._counter = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }

				incCounter(counter);

				var keystream = counter.slice(0);
	            cipher.encryptBlock(keystream, 0);

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    CTRGladman.Decryptor = Encryptor;

	    return CTRGladman;
	}());




	return CryptoJS.mode.CTRGladman;

}));

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(150));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * Output Feedback block mode.
	 */
	CryptoJS.mode.OFB = (function () {
	    var OFB = CryptoJS.lib.BlockCipherMode.extend();

	    var Encryptor = OFB.Encryptor = OFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var keystream = this._keystream;

	            // Generate keystream
	            if (iv) {
	                keystream = this._keystream = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }
	            cipher.encryptBlock(keystream, 0);

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    OFB.Decryptor = Encryptor;

	    return OFB;
	}());


	return CryptoJS.mode.OFB;

}));

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(150));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * Electronic Codebook block mode.
	 */
	CryptoJS.mode.ECB = (function () {
	    var ECB = CryptoJS.lib.BlockCipherMode.extend();

	    ECB.Encryptor = ECB.extend({
	        processBlock: function (words, offset) {
	            this._cipher.encryptBlock(words, offset);
	        }
	    });

	    ECB.Decryptor = ECB.extend({
	        processBlock: function (words, offset) {
	            this._cipher.decryptBlock(words, offset);
	        }
	    });

	    return ECB;
	}());


	return CryptoJS.mode.ECB;

}));

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(150));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * ANSI X.923 padding strategy.
	 */
	CryptoJS.pad.AnsiX923 = {
	    pad: function (data, blockSize) {
	        // Shortcuts
	        var dataSigBytes = data.sigBytes;
	        var blockSizeBytes = blockSize * 4;

	        // Count padding bytes
	        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

	        // Compute last byte position
	        var lastBytePos = dataSigBytes + nPaddingBytes - 1;

	        // Pad
	        data.clamp();
	        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
	        data.sigBytes += nPaddingBytes;
	    },

	    unpad: function (data) {
	        // Get number of padding bytes from last byte
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	        // Remove padding
	        data.sigBytes -= nPaddingBytes;
	    }
	};


	return CryptoJS.pad.Ansix923;

}));

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(150));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * ISO 10126 padding strategy.
	 */
	CryptoJS.pad.Iso10126 = {
	    pad: function (data, blockSize) {
	        // Shortcut
	        var blockSizeBytes = blockSize * 4;

	        // Count padding bytes
	        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

	        // Pad
	        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).
	             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
	    },

	    unpad: function (data) {
	        // Get number of padding bytes from last byte
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	        // Remove padding
	        data.sigBytes -= nPaddingBytes;
	    }
	};


	return CryptoJS.pad.Iso10126;

}));

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(150));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * ISO/IEC 9797-1 Padding Method 2.
	 */
	CryptoJS.pad.Iso97971 = {
	    pad: function (data, blockSize) {
	        // Add 0x80 byte
	        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

	        // Zero pad the rest
	        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
	    },

	    unpad: function (data) {
	        // Remove zero padding
	        CryptoJS.pad.ZeroPadding.unpad(data);

	        // Remove one more byte -- the 0x80 byte
	        data.sigBytes--;
	    }
	};


	return CryptoJS.pad.Iso97971;

}));

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(150));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * Zero padding strategy.
	 */
	CryptoJS.pad.ZeroPadding = {
	    pad: function (data, blockSize) {
	        // Shortcut
	        var blockSizeBytes = blockSize * 4;

	        // Pad
	        data.clamp();
	        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
	    },

	    unpad: function (data) {
	        // Shortcut
	        var dataWords = data.words;

	        // Unpad
	        var i = data.sigBytes - 1;
	        for (var i = data.sigBytes - 1; i >= 0; i--) {
	            if (((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
	                data.sigBytes = i + 1;
	                break;
	            }
	        }
	    }
	};


	return CryptoJS.pad.ZeroPadding;

}));

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(150));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * A noop padding strategy.
	 */
	CryptoJS.pad.NoPadding = {
	    pad: function () {
	    },

	    unpad: function () {
	    }
	};


	return CryptoJS.pad.NoPadding;

}));

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(150));
	}
	else {}
}(this, function (CryptoJS) {

	(function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var CipherParams = C_lib.CipherParams;
	    var C_enc = C.enc;
	    var Hex = C_enc.Hex;
	    var C_format = C.format;

	    var HexFormatter = C_format.Hex = {
	        /**
	         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The hexadecimally encoded string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
	         */
	        stringify: function (cipherParams) {
	            return cipherParams.ciphertext.toString(Hex);
	        },

	        /**
	         * Converts a hexadecimally encoded ciphertext string to a cipher params object.
	         *
	         * @param {string} input The hexadecimally encoded string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
	         */
	        parse: function (input) {
	            var ciphertext = Hex.parse(input);
	            return CipherParams.create({ ciphertext: ciphertext });
	        }
	    };
	}());


	return CryptoJS.format.Hex;

}));

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(137), __webpack_require__(139), __webpack_require__(149), __webpack_require__(150));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var BlockCipher = C_lib.BlockCipher;
	    var C_algo = C.algo;

	    // Lookup tables
	    var SBOX = [];
	    var INV_SBOX = [];
	    var SUB_MIX_0 = [];
	    var SUB_MIX_1 = [];
	    var SUB_MIX_2 = [];
	    var SUB_MIX_3 = [];
	    var INV_SUB_MIX_0 = [];
	    var INV_SUB_MIX_1 = [];
	    var INV_SUB_MIX_2 = [];
	    var INV_SUB_MIX_3 = [];

	    // Compute lookup tables
	    (function () {
	        // Compute double table
	        var d = [];
	        for (var i = 0; i < 256; i++) {
	            if (i < 128) {
	                d[i] = i << 1;
	            } else {
	                d[i] = (i << 1) ^ 0x11b;
	            }
	        }

	        // Walk GF(2^8)
	        var x = 0;
	        var xi = 0;
	        for (var i = 0; i < 256; i++) {
	            // Compute sbox
	            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
	            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
	            SBOX[x] = sx;
	            INV_SBOX[sx] = x;

	            // Compute multiplication
	            var x2 = d[x];
	            var x4 = d[x2];
	            var x8 = d[x4];

	            // Compute sub bytes, mix columns tables
	            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
	            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
	            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
	            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
	            SUB_MIX_3[x] = t;

	            // Compute inv sub bytes, inv mix columns tables
	            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
	            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
	            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
	            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
	            INV_SUB_MIX_3[sx] = t;

	            // Compute next counter
	            if (!x) {
	                x = xi = 1;
	            } else {
	                x = x2 ^ d[d[d[x8 ^ x2]]];
	                xi ^= d[d[xi]];
	            }
	        }
	    }());

	    // Precomputed Rcon lookup
	    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

	    /**
	     * AES block cipher algorithm.
	     */
	    var AES = C_algo.AES = BlockCipher.extend({
	        _doReset: function () {
	            var t;

	            // Skip reset of nRounds has been set before and key did not change
	            if (this._nRounds && this._keyPriorReset === this._key) {
	                return;
	            }

	            // Shortcuts
	            var key = this._keyPriorReset = this._key;
	            var keyWords = key.words;
	            var keySize = key.sigBytes / 4;

	            // Compute number of rounds
	            var nRounds = this._nRounds = keySize + 6;

	            // Compute number of key schedule rows
	            var ksRows = (nRounds + 1) * 4;

	            // Compute key schedule
	            var keySchedule = this._keySchedule = [];
	            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
	                if (ksRow < keySize) {
	                    keySchedule[ksRow] = keyWords[ksRow];
	                } else {
	                    t = keySchedule[ksRow - 1];

	                    if (!(ksRow % keySize)) {
	                        // Rot word
	                        t = (t << 8) | (t >>> 24);

	                        // Sub word
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

	                        // Mix Rcon
	                        t ^= RCON[(ksRow / keySize) | 0] << 24;
	                    } else if (keySize > 6 && ksRow % keySize == 4) {
	                        // Sub word
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
	                    }

	                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
	                }
	            }

	            // Compute inv key schedule
	            var invKeySchedule = this._invKeySchedule = [];
	            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
	                var ksRow = ksRows - invKsRow;

	                if (invKsRow % 4) {
	                    var t = keySchedule[ksRow];
	                } else {
	                    var t = keySchedule[ksRow - 4];
	                }

	                if (invKsRow < 4 || ksRow <= 4) {
	                    invKeySchedule[invKsRow] = t;
	                } else {
	                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
	                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
	                }
	            }
	        },

	        encryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
	        },

	        decryptBlock: function (M, offset) {
	            // Swap 2nd and 4th rows
	            var t = M[offset + 1];
	            M[offset + 1] = M[offset + 3];
	            M[offset + 3] = t;

	            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

	            // Inv swap 2nd and 4th rows
	            var t = M[offset + 1];
	            M[offset + 1] = M[offset + 3];
	            M[offset + 3] = t;
	        },

	        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
	            // Shortcut
	            var nRounds = this._nRounds;

	            // Get input, add round key
	            var s0 = M[offset]     ^ keySchedule[0];
	            var s1 = M[offset + 1] ^ keySchedule[1];
	            var s2 = M[offset + 2] ^ keySchedule[2];
	            var s3 = M[offset + 3] ^ keySchedule[3];

	            // Key schedule row counter
	            var ksRow = 4;

	            // Rounds
	            for (var round = 1; round < nRounds; round++) {
	                // Shift rows, sub bytes, mix columns, add round key
	                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
	                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
	                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
	                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

	                // Update state
	                s0 = t0;
	                s1 = t1;
	                s2 = t2;
	                s3 = t3;
	            }

	            // Shift rows, sub bytes, add round key
	            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

	            // Set output
	            M[offset]     = t0;
	            M[offset + 1] = t1;
	            M[offset + 2] = t2;
	            M[offset + 3] = t3;
	        },

	        keySize: 256/32
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
	     */
	    C.AES = BlockCipher._createHelper(AES);
	}());


	return CryptoJS.AES;

}));

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(137), __webpack_require__(139), __webpack_require__(149), __webpack_require__(150));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var BlockCipher = C_lib.BlockCipher;
	    var C_algo = C.algo;

	    // Permuted Choice 1 constants
	    var PC1 = [
	        57, 49, 41, 33, 25, 17, 9,  1,
	        58, 50, 42, 34, 26, 18, 10, 2,
	        59, 51, 43, 35, 27, 19, 11, 3,
	        60, 52, 44, 36, 63, 55, 47, 39,
	        31, 23, 15, 7,  62, 54, 46, 38,
	        30, 22, 14, 6,  61, 53, 45, 37,
	        29, 21, 13, 5,  28, 20, 12, 4
	    ];

	    // Permuted Choice 2 constants
	    var PC2 = [
	        14, 17, 11, 24, 1,  5,
	        3,  28, 15, 6,  21, 10,
	        23, 19, 12, 4,  26, 8,
	        16, 7,  27, 20, 13, 2,
	        41, 52, 31, 37, 47, 55,
	        30, 40, 51, 45, 33, 48,
	        44, 49, 39, 56, 34, 53,
	        46, 42, 50, 36, 29, 32
	    ];

	    // Cumulative bit shift constants
	    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

	    // SBOXes and round permutation constants
	    var SBOX_P = [
	        {
	            0x0: 0x808200,
	            0x10000000: 0x8000,
	            0x20000000: 0x808002,
	            0x30000000: 0x2,
	            0x40000000: 0x200,
	            0x50000000: 0x808202,
	            0x60000000: 0x800202,
	            0x70000000: 0x800000,
	            0x80000000: 0x202,
	            0x90000000: 0x800200,
	            0xa0000000: 0x8200,
	            0xb0000000: 0x808000,
	            0xc0000000: 0x8002,
	            0xd0000000: 0x800002,
	            0xe0000000: 0x0,
	            0xf0000000: 0x8202,
	            0x8000000: 0x0,
	            0x18000000: 0x808202,
	            0x28000000: 0x8202,
	            0x38000000: 0x8000,
	            0x48000000: 0x808200,
	            0x58000000: 0x200,
	            0x68000000: 0x808002,
	            0x78000000: 0x2,
	            0x88000000: 0x800200,
	            0x98000000: 0x8200,
	            0xa8000000: 0x808000,
	            0xb8000000: 0x800202,
	            0xc8000000: 0x800002,
	            0xd8000000: 0x8002,
	            0xe8000000: 0x202,
	            0xf8000000: 0x800000,
	            0x1: 0x8000,
	            0x10000001: 0x2,
	            0x20000001: 0x808200,
	            0x30000001: 0x800000,
	            0x40000001: 0x808002,
	            0x50000001: 0x8200,
	            0x60000001: 0x200,
	            0x70000001: 0x800202,
	            0x80000001: 0x808202,
	            0x90000001: 0x808000,
	            0xa0000001: 0x800002,
	            0xb0000001: 0x8202,
	            0xc0000001: 0x202,
	            0xd0000001: 0x800200,
	            0xe0000001: 0x8002,
	            0xf0000001: 0x0,
	            0x8000001: 0x808202,
	            0x18000001: 0x808000,
	            0x28000001: 0x800000,
	            0x38000001: 0x200,
	            0x48000001: 0x8000,
	            0x58000001: 0x800002,
	            0x68000001: 0x2,
	            0x78000001: 0x8202,
	            0x88000001: 0x8002,
	            0x98000001: 0x800202,
	            0xa8000001: 0x202,
	            0xb8000001: 0x808200,
	            0xc8000001: 0x800200,
	            0xd8000001: 0x0,
	            0xe8000001: 0x8200,
	            0xf8000001: 0x808002
	        },
	        {
	            0x0: 0x40084010,
	            0x1000000: 0x4000,
	            0x2000000: 0x80000,
	            0x3000000: 0x40080010,
	            0x4000000: 0x40000010,
	            0x5000000: 0x40084000,
	            0x6000000: 0x40004000,
	            0x7000000: 0x10,
	            0x8000000: 0x84000,
	            0x9000000: 0x40004010,
	            0xa000000: 0x40000000,
	            0xb000000: 0x84010,
	            0xc000000: 0x80010,
	            0xd000000: 0x0,
	            0xe000000: 0x4010,
	            0xf000000: 0x40080000,
	            0x800000: 0x40004000,
	            0x1800000: 0x84010,
	            0x2800000: 0x10,
	            0x3800000: 0x40004010,
	            0x4800000: 0x40084010,
	            0x5800000: 0x40000000,
	            0x6800000: 0x80000,
	            0x7800000: 0x40080010,
	            0x8800000: 0x80010,
	            0x9800000: 0x0,
	            0xa800000: 0x4000,
	            0xb800000: 0x40080000,
	            0xc800000: 0x40000010,
	            0xd800000: 0x84000,
	            0xe800000: 0x40084000,
	            0xf800000: 0x4010,
	            0x10000000: 0x0,
	            0x11000000: 0x40080010,
	            0x12000000: 0x40004010,
	            0x13000000: 0x40084000,
	            0x14000000: 0x40080000,
	            0x15000000: 0x10,
	            0x16000000: 0x84010,
	            0x17000000: 0x4000,
	            0x18000000: 0x4010,
	            0x19000000: 0x80000,
	            0x1a000000: 0x80010,
	            0x1b000000: 0x40000010,
	            0x1c000000: 0x84000,
	            0x1d000000: 0x40004000,
	            0x1e000000: 0x40000000,
	            0x1f000000: 0x40084010,
	            0x10800000: 0x84010,
	            0x11800000: 0x80000,
	            0x12800000: 0x40080000,
	            0x13800000: 0x4000,
	            0x14800000: 0x40004000,
	            0x15800000: 0x40084010,
	            0x16800000: 0x10,
	            0x17800000: 0x40000000,
	            0x18800000: 0x40084000,
	            0x19800000: 0x40000010,
	            0x1a800000: 0x40004010,
	            0x1b800000: 0x80010,
	            0x1c800000: 0x0,
	            0x1d800000: 0x4010,
	            0x1e800000: 0x40080010,
	            0x1f800000: 0x84000
	        },
	        {
	            0x0: 0x104,
	            0x100000: 0x0,
	            0x200000: 0x4000100,
	            0x300000: 0x10104,
	            0x400000: 0x10004,
	            0x500000: 0x4000004,
	            0x600000: 0x4010104,
	            0x700000: 0x4010000,
	            0x800000: 0x4000000,
	            0x900000: 0x4010100,
	            0xa00000: 0x10100,
	            0xb00000: 0x4010004,
	            0xc00000: 0x4000104,
	            0xd00000: 0x10000,
	            0xe00000: 0x4,
	            0xf00000: 0x100,
	            0x80000: 0x4010100,
	            0x180000: 0x4010004,
	            0x280000: 0x0,
	            0x380000: 0x4000100,
	            0x480000: 0x4000004,
	            0x580000: 0x10000,
	            0x680000: 0x10004,
	            0x780000: 0x104,
	            0x880000: 0x4,
	            0x980000: 0x100,
	            0xa80000: 0x4010000,
	            0xb80000: 0x10104,
	            0xc80000: 0x10100,
	            0xd80000: 0x4000104,
	            0xe80000: 0x4010104,
	            0xf80000: 0x4000000,
	            0x1000000: 0x4010100,
	            0x1100000: 0x10004,
	            0x1200000: 0x10000,
	            0x1300000: 0x4000100,
	            0x1400000: 0x100,
	            0x1500000: 0x4010104,
	            0x1600000: 0x4000004,
	            0x1700000: 0x0,
	            0x1800000: 0x4000104,
	            0x1900000: 0x4000000,
	            0x1a00000: 0x4,
	            0x1b00000: 0x10100,
	            0x1c00000: 0x4010000,
	            0x1d00000: 0x104,
	            0x1e00000: 0x10104,
	            0x1f00000: 0x4010004,
	            0x1080000: 0x4000000,
	            0x1180000: 0x104,
	            0x1280000: 0x4010100,
	            0x1380000: 0x0,
	            0x1480000: 0x10004,
	            0x1580000: 0x4000100,
	            0x1680000: 0x100,
	            0x1780000: 0x4010004,
	            0x1880000: 0x10000,
	            0x1980000: 0x4010104,
	            0x1a80000: 0x10104,
	            0x1b80000: 0x4000004,
	            0x1c80000: 0x4000104,
	            0x1d80000: 0x4010000,
	            0x1e80000: 0x4,
	            0x1f80000: 0x10100
	        },
	        {
	            0x0: 0x80401000,
	            0x10000: 0x80001040,
	            0x20000: 0x401040,
	            0x30000: 0x80400000,
	            0x40000: 0x0,
	            0x50000: 0x401000,
	            0x60000: 0x80000040,
	            0x70000: 0x400040,
	            0x80000: 0x80000000,
	            0x90000: 0x400000,
	            0xa0000: 0x40,
	            0xb0000: 0x80001000,
	            0xc0000: 0x80400040,
	            0xd0000: 0x1040,
	            0xe0000: 0x1000,
	            0xf0000: 0x80401040,
	            0x8000: 0x80001040,
	            0x18000: 0x40,
	            0x28000: 0x80400040,
	            0x38000: 0x80001000,
	            0x48000: 0x401000,
	            0x58000: 0x80401040,
	            0x68000: 0x0,
	            0x78000: 0x80400000,
	            0x88000: 0x1000,
	            0x98000: 0x80401000,
	            0xa8000: 0x400000,
	            0xb8000: 0x1040,
	            0xc8000: 0x80000000,
	            0xd8000: 0x400040,
	            0xe8000: 0x401040,
	            0xf8000: 0x80000040,
	            0x100000: 0x400040,
	            0x110000: 0x401000,
	            0x120000: 0x80000040,
	            0x130000: 0x0,
	            0x140000: 0x1040,
	            0x150000: 0x80400040,
	            0x160000: 0x80401000,
	            0x170000: 0x80001040,
	            0x180000: 0x80401040,
	            0x190000: 0x80000000,
	            0x1a0000: 0x80400000,
	            0x1b0000: 0x401040,
	            0x1c0000: 0x80001000,
	            0x1d0000: 0x400000,
	            0x1e0000: 0x40,
	            0x1f0000: 0x1000,
	            0x108000: 0x80400000,
	            0x118000: 0x80401040,
	            0x128000: 0x0,
	            0x138000: 0x401000,
	            0x148000: 0x400040,
	            0x158000: 0x80000000,
	            0x168000: 0x80001040,
	            0x178000: 0x40,
	            0x188000: 0x80000040,
	            0x198000: 0x1000,
	            0x1a8000: 0x80001000,
	            0x1b8000: 0x80400040,
	            0x1c8000: 0x1040,
	            0x1d8000: 0x80401000,
	            0x1e8000: 0x400000,
	            0x1f8000: 0x401040
	        },
	        {
	            0x0: 0x80,
	            0x1000: 0x1040000,
	            0x2000: 0x40000,
	            0x3000: 0x20000000,
	            0x4000: 0x20040080,
	            0x5000: 0x1000080,
	            0x6000: 0x21000080,
	            0x7000: 0x40080,
	            0x8000: 0x1000000,
	            0x9000: 0x20040000,
	            0xa000: 0x20000080,
	            0xb000: 0x21040080,
	            0xc000: 0x21040000,
	            0xd000: 0x0,
	            0xe000: 0x1040080,
	            0xf000: 0x21000000,
	            0x800: 0x1040080,
	            0x1800: 0x21000080,
	            0x2800: 0x80,
	            0x3800: 0x1040000,
	            0x4800: 0x40000,
	            0x5800: 0x20040080,
	            0x6800: 0x21040000,
	            0x7800: 0x20000000,
	            0x8800: 0x20040000,
	            0x9800: 0x0,
	            0xa800: 0x21040080,
	            0xb800: 0x1000080,
	            0xc800: 0x20000080,
	            0xd800: 0x21000000,
	            0xe800: 0x1000000,
	            0xf800: 0x40080,
	            0x10000: 0x40000,
	            0x11000: 0x80,
	            0x12000: 0x20000000,
	            0x13000: 0x21000080,
	            0x14000: 0x1000080,
	            0x15000: 0x21040000,
	            0x16000: 0x20040080,
	            0x17000: 0x1000000,
	            0x18000: 0x21040080,
	            0x19000: 0x21000000,
	            0x1a000: 0x1040000,
	            0x1b000: 0x20040000,
	            0x1c000: 0x40080,
	            0x1d000: 0x20000080,
	            0x1e000: 0x0,
	            0x1f000: 0x1040080,
	            0x10800: 0x21000080,
	            0x11800: 0x1000000,
	            0x12800: 0x1040000,
	            0x13800: 0x20040080,
	            0x14800: 0x20000000,
	            0x15800: 0x1040080,
	            0x16800: 0x80,
	            0x17800: 0x21040000,
	            0x18800: 0x40080,
	            0x19800: 0x21040080,
	            0x1a800: 0x0,
	            0x1b800: 0x21000000,
	            0x1c800: 0x1000080,
	            0x1d800: 0x40000,
	            0x1e800: 0x20040000,
	            0x1f800: 0x20000080
	        },
	        {
	            0x0: 0x10000008,
	            0x100: 0x2000,
	            0x200: 0x10200000,
	            0x300: 0x10202008,
	            0x400: 0x10002000,
	            0x500: 0x200000,
	            0x600: 0x200008,
	            0x700: 0x10000000,
	            0x800: 0x0,
	            0x900: 0x10002008,
	            0xa00: 0x202000,
	            0xb00: 0x8,
	            0xc00: 0x10200008,
	            0xd00: 0x202008,
	            0xe00: 0x2008,
	            0xf00: 0x10202000,
	            0x80: 0x10200000,
	            0x180: 0x10202008,
	            0x280: 0x8,
	            0x380: 0x200000,
	            0x480: 0x202008,
	            0x580: 0x10000008,
	            0x680: 0x10002000,
	            0x780: 0x2008,
	            0x880: 0x200008,
	            0x980: 0x2000,
	            0xa80: 0x10002008,
	            0xb80: 0x10200008,
	            0xc80: 0x0,
	            0xd80: 0x10202000,
	            0xe80: 0x202000,
	            0xf80: 0x10000000,
	            0x1000: 0x10002000,
	            0x1100: 0x10200008,
	            0x1200: 0x10202008,
	            0x1300: 0x2008,
	            0x1400: 0x200000,
	            0x1500: 0x10000000,
	            0x1600: 0x10000008,
	            0x1700: 0x202000,
	            0x1800: 0x202008,
	            0x1900: 0x0,
	            0x1a00: 0x8,
	            0x1b00: 0x10200000,
	            0x1c00: 0x2000,
	            0x1d00: 0x10002008,
	            0x1e00: 0x10202000,
	            0x1f00: 0x200008,
	            0x1080: 0x8,
	            0x1180: 0x202000,
	            0x1280: 0x200000,
	            0x1380: 0x10000008,
	            0x1480: 0x10002000,
	            0x1580: 0x2008,
	            0x1680: 0x10202008,
	            0x1780: 0x10200000,
	            0x1880: 0x10202000,
	            0x1980: 0x10200008,
	            0x1a80: 0x2000,
	            0x1b80: 0x202008,
	            0x1c80: 0x200008,
	            0x1d80: 0x0,
	            0x1e80: 0x10000000,
	            0x1f80: 0x10002008
	        },
	        {
	            0x0: 0x100000,
	            0x10: 0x2000401,
	            0x20: 0x400,
	            0x30: 0x100401,
	            0x40: 0x2100401,
	            0x50: 0x0,
	            0x60: 0x1,
	            0x70: 0x2100001,
	            0x80: 0x2000400,
	            0x90: 0x100001,
	            0xa0: 0x2000001,
	            0xb0: 0x2100400,
	            0xc0: 0x2100000,
	            0xd0: 0x401,
	            0xe0: 0x100400,
	            0xf0: 0x2000000,
	            0x8: 0x2100001,
	            0x18: 0x0,
	            0x28: 0x2000401,
	            0x38: 0x2100400,
	            0x48: 0x100000,
	            0x58: 0x2000001,
	            0x68: 0x2000000,
	            0x78: 0x401,
	            0x88: 0x100401,
	            0x98: 0x2000400,
	            0xa8: 0x2100000,
	            0xb8: 0x100001,
	            0xc8: 0x400,
	            0xd8: 0x2100401,
	            0xe8: 0x1,
	            0xf8: 0x100400,
	            0x100: 0x2000000,
	            0x110: 0x100000,
	            0x120: 0x2000401,
	            0x130: 0x2100001,
	            0x140: 0x100001,
	            0x150: 0x2000400,
	            0x160: 0x2100400,
	            0x170: 0x100401,
	            0x180: 0x401,
	            0x190: 0x2100401,
	            0x1a0: 0x100400,
	            0x1b0: 0x1,
	            0x1c0: 0x0,
	            0x1d0: 0x2100000,
	            0x1e0: 0x2000001,
	            0x1f0: 0x400,
	            0x108: 0x100400,
	            0x118: 0x2000401,
	            0x128: 0x2100001,
	            0x138: 0x1,
	            0x148: 0x2000000,
	            0x158: 0x100000,
	            0x168: 0x401,
	            0x178: 0x2100400,
	            0x188: 0x2000001,
	            0x198: 0x2100000,
	            0x1a8: 0x0,
	            0x1b8: 0x2100401,
	            0x1c8: 0x100401,
	            0x1d8: 0x400,
	            0x1e8: 0x2000400,
	            0x1f8: 0x100001
	        },
	        {
	            0x0: 0x8000820,
	            0x1: 0x20000,
	            0x2: 0x8000000,
	            0x3: 0x20,
	            0x4: 0x20020,
	            0x5: 0x8020820,
	            0x6: 0x8020800,
	            0x7: 0x800,
	            0x8: 0x8020000,
	            0x9: 0x8000800,
	            0xa: 0x20800,
	            0xb: 0x8020020,
	            0xc: 0x820,
	            0xd: 0x0,
	            0xe: 0x8000020,
	            0xf: 0x20820,
	            0x80000000: 0x800,
	            0x80000001: 0x8020820,
	            0x80000002: 0x8000820,
	            0x80000003: 0x8000000,
	            0x80000004: 0x8020000,
	            0x80000005: 0x20800,
	            0x80000006: 0x20820,
	            0x80000007: 0x20,
	            0x80000008: 0x8000020,
	            0x80000009: 0x820,
	            0x8000000a: 0x20020,
	            0x8000000b: 0x8020800,
	            0x8000000c: 0x0,
	            0x8000000d: 0x8020020,
	            0x8000000e: 0x8000800,
	            0x8000000f: 0x20000,
	            0x10: 0x20820,
	            0x11: 0x8020800,
	            0x12: 0x20,
	            0x13: 0x800,
	            0x14: 0x8000800,
	            0x15: 0x8000020,
	            0x16: 0x8020020,
	            0x17: 0x20000,
	            0x18: 0x0,
	            0x19: 0x20020,
	            0x1a: 0x8020000,
	            0x1b: 0x8000820,
	            0x1c: 0x8020820,
	            0x1d: 0x20800,
	            0x1e: 0x820,
	            0x1f: 0x8000000,
	            0x80000010: 0x20000,
	            0x80000011: 0x800,
	            0x80000012: 0x8020020,
	            0x80000013: 0x20820,
	            0x80000014: 0x20,
	            0x80000015: 0x8020000,
	            0x80000016: 0x8000000,
	            0x80000017: 0x8000820,
	            0x80000018: 0x8020820,
	            0x80000019: 0x8000020,
	            0x8000001a: 0x8000800,
	            0x8000001b: 0x0,
	            0x8000001c: 0x20800,
	            0x8000001d: 0x820,
	            0x8000001e: 0x20020,
	            0x8000001f: 0x8020800
	        }
	    ];

	    // Masks that select the SBOX input
	    var SBOX_MASK = [
	        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
	        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
	    ];

	    /**
	     * DES block cipher algorithm.
	     */
	    var DES = C_algo.DES = BlockCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;

	            // Select 56 bits according to PC1
	            var keyBits = [];
	            for (var i = 0; i < 56; i++) {
	                var keyBitPos = PC1[i] - 1;
	                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
	            }

	            // Assemble 16 subkeys
	            var subKeys = this._subKeys = [];
	            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
	                // Create subkey
	                var subKey = subKeys[nSubKey] = [];

	                // Shortcut
	                var bitShift = BIT_SHIFTS[nSubKey];

	                // Select 48 bits according to PC2
	                for (var i = 0; i < 24; i++) {
	                    // Select from the left 28 key bits
	                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);

	                    // Select from the right 28 key bits
	                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
	                }

	                // Since each subkey is applied to an expanded 32-bit input,
	                // the subkey can be broken into 8 values scaled to 32-bits,
	                // which allows the key to be used without expansion
	                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
	                for (var i = 1; i < 7; i++) {
	                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
	                }
	                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
	            }

	            // Compute inverse subkeys
	            var invSubKeys = this._invSubKeys = [];
	            for (var i = 0; i < 16; i++) {
	                invSubKeys[i] = subKeys[15 - i];
	            }
	        },

	        encryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._subKeys);
	        },

	        decryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._invSubKeys);
	        },

	        _doCryptBlock: function (M, offset, subKeys) {
	            // Get input
	            this._lBlock = M[offset];
	            this._rBlock = M[offset + 1];

	            // Initial permutation
	            exchangeLR.call(this, 4,  0x0f0f0f0f);
	            exchangeLR.call(this, 16, 0x0000ffff);
	            exchangeRL.call(this, 2,  0x33333333);
	            exchangeRL.call(this, 8,  0x00ff00ff);
	            exchangeLR.call(this, 1,  0x55555555);

	            // Rounds
	            for (var round = 0; round < 16; round++) {
	                // Shortcuts
	                var subKey = subKeys[round];
	                var lBlock = this._lBlock;
	                var rBlock = this._rBlock;

	                // Feistel function
	                var f = 0;
	                for (var i = 0; i < 8; i++) {
	                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
	                }
	                this._lBlock = rBlock;
	                this._rBlock = lBlock ^ f;
	            }

	            // Undo swap from last round
	            var t = this._lBlock;
	            this._lBlock = this._rBlock;
	            this._rBlock = t;

	            // Final permutation
	            exchangeLR.call(this, 1,  0x55555555);
	            exchangeRL.call(this, 8,  0x00ff00ff);
	            exchangeRL.call(this, 2,  0x33333333);
	            exchangeLR.call(this, 16, 0x0000ffff);
	            exchangeLR.call(this, 4,  0x0f0f0f0f);

	            // Set output
	            M[offset] = this._lBlock;
	            M[offset + 1] = this._rBlock;
	        },

	        keySize: 64/32,

	        ivSize: 64/32,

	        blockSize: 64/32
	    });

	    // Swap bits across the left and right words
	    function exchangeLR(offset, mask) {
	        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
	        this._rBlock ^= t;
	        this._lBlock ^= t << offset;
	    }

	    function exchangeRL(offset, mask) {
	        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
	        this._lBlock ^= t;
	        this._rBlock ^= t << offset;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
	     */
	    C.DES = BlockCipher._createHelper(DES);

	    /**
	     * Triple-DES block cipher algorithm.
	     */
	    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;
	            // Make sure the key length is valid (64, 128 or >= 192 bit)
	            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
	                throw new Error('Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.');
	            }

	            // Extend the key according to the keying options defined in 3DES standard
	            var key1 = keyWords.slice(0, 2);
	            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
	            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);

	            // Create DES instances
	            this._des1 = DES.createEncryptor(WordArray.create(key1));
	            this._des2 = DES.createEncryptor(WordArray.create(key2));
	            this._des3 = DES.createEncryptor(WordArray.create(key3));
	        },

	        encryptBlock: function (M, offset) {
	            this._des1.encryptBlock(M, offset);
	            this._des2.decryptBlock(M, offset);
	            this._des3.encryptBlock(M, offset);
	        },

	        decryptBlock: function (M, offset) {
	            this._des3.decryptBlock(M, offset);
	            this._des2.encryptBlock(M, offset);
	            this._des1.decryptBlock(M, offset);
	        },

	        keySize: 192/32,

	        ivSize: 64/32,

	        blockSize: 64/32
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
	     */
	    C.TripleDES = BlockCipher._createHelper(TripleDES);
	}());


	return CryptoJS.TripleDES;

}));

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(137), __webpack_require__(139), __webpack_require__(149), __webpack_require__(150));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    /**
	     * RC4 stream cipher algorithm.
	     */
	    var RC4 = C_algo.RC4 = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;
	            var keySigBytes = key.sigBytes;

	            // Init sbox
	            var S = this._S = [];
	            for (var i = 0; i < 256; i++) {
	                S[i] = i;
	            }

	            // Key setup
	            for (var i = 0, j = 0; i < 256; i++) {
	                var keyByteIndex = i % keySigBytes;
	                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;

	                j = (j + S[i] + keyByte) % 256;

	                // Swap
	                var t = S[i];
	                S[i] = S[j];
	                S[j] = t;
	            }

	            // Counters
	            this._i = this._j = 0;
	        },

	        _doProcessBlock: function (M, offset) {
	            M[offset] ^= generateKeystreamWord.call(this);
	        },

	        keySize: 256/32,

	        ivSize: 0
	    });

	    function generateKeystreamWord() {
	        // Shortcuts
	        var S = this._S;
	        var i = this._i;
	        var j = this._j;

	        // Generate keystream word
	        var keystreamWord = 0;
	        for (var n = 0; n < 4; n++) {
	            i = (i + 1) % 256;
	            j = (j + S[i]) % 256;

	            // Swap
	            var t = S[i];
	            S[i] = S[j];
	            S[j] = t;

	            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
	        }

	        // Update counters
	        this._i = i;
	        this._j = j;

	        return keystreamWord;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
	     */
	    C.RC4 = StreamCipher._createHelper(RC4);

	    /**
	     * Modified RC4 stream cipher algorithm.
	     */
	    var RC4Drop = C_algo.RC4Drop = RC4.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} drop The number of keystream words to drop. Default 192
	         */
	        cfg: RC4.cfg.extend({
	            drop: 192
	        }),

	        _doReset: function () {
	            RC4._doReset.call(this);

	            // Drop
	            for (var i = this.cfg.drop; i > 0; i--) {
	                generateKeystreamWord.call(this);
	            }
	        }
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
	     */
	    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
	}());


	return CryptoJS.RC4;

}));

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(137), __webpack_require__(139), __webpack_require__(149), __webpack_require__(150));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    // Reusable objects
	    var S  = [];
	    var C_ = [];
	    var G  = [];

	    /**
	     * Rabbit stream cipher algorithm
	     */
	    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var K = this._key.words;
	            var iv = this.cfg.iv;

	            // Swap endian
	            for (var i = 0; i < 4; i++) {
	                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |
	                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);
	            }

	            // Generate initial state values
	            var X = this._X = [
	                K[0], (K[3] << 16) | (K[2] >>> 16),
	                K[1], (K[0] << 16) | (K[3] >>> 16),
	                K[2], (K[1] << 16) | (K[0] >>> 16),
	                K[3], (K[2] << 16) | (K[1] >>> 16)
	            ];

	            // Generate initial counter values
	            var C = this._C = [
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
	            ];

	            // Carry bit
	            this._b = 0;

	            // Iterate the system four times
	            for (var i = 0; i < 4; i++) {
	                nextState.call(this);
	            }

	            // Modify the counters
	            for (var i = 0; i < 8; i++) {
	                C[i] ^= X[(i + 4) & 7];
	            }

	            // IV setup
	            if (iv) {
	                // Shortcuts
	                var IV = iv.words;
	                var IV_0 = IV[0];
	                var IV_1 = IV[1];

	                // Generate four subvectors
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

	                // Modify counter values
	                C[0] ^= i0;
	                C[1] ^= i1;
	                C[2] ^= i2;
	                C[3] ^= i3;
	                C[4] ^= i0;
	                C[5] ^= i1;
	                C[6] ^= i2;
	                C[7] ^= i3;

	                // Iterate the system four times
	                for (var i = 0; i < 4; i++) {
	                    nextState.call(this);
	                }
	            }
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var X = this._X;

	            // Iterate the system
	            nextState.call(this);

	            // Generate four keystream words
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

	            for (var i = 0; i < 4; i++) {
	                // Swap endian
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

	                // Encrypt
	                M[offset + i] ^= S[i];
	            }
	        },

	        blockSize: 128/32,

	        ivSize: 64/32
	    });

	    function nextState() {
	        // Shortcuts
	        var X = this._X;
	        var C = this._C;

	        // Save old counter values
	        for (var i = 0; i < 8; i++) {
	            C_[i] = C[i];
	        }

	        // Calculate new counter values
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

	        // Calculate the g-values
	        for (var i = 0; i < 8; i++) {
	            var gx = X[i] + C[i];

	            // Construct high and low argument for squaring
	            var ga = gx & 0xffff;
	            var gb = gx >>> 16;

	            // Calculate high and low result of squaring
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

	            // High XOR low
	            G[i] = gh ^ gl;
	        }

	        // Calculate new state values
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
	     */
	    C.Rabbit = StreamCipher._createHelper(Rabbit);
	}());


	return CryptoJS.Rabbit;

}));

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(131), __webpack_require__(137), __webpack_require__(139), __webpack_require__(149), __webpack_require__(150));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    // Reusable objects
	    var S  = [];
	    var C_ = [];
	    var G  = [];

	    /**
	     * Rabbit stream cipher algorithm.
	     *
	     * This is a legacy version that neglected to convert the key to little-endian.
	     * This error doesn't affect the cipher's security,
	     * but it does affect its compatibility with other implementations.
	     */
	    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var K = this._key.words;
	            var iv = this.cfg.iv;

	            // Generate initial state values
	            var X = this._X = [
	                K[0], (K[3] << 16) | (K[2] >>> 16),
	                K[1], (K[0] << 16) | (K[3] >>> 16),
	                K[2], (K[1] << 16) | (K[0] >>> 16),
	                K[3], (K[2] << 16) | (K[1] >>> 16)
	            ];

	            // Generate initial counter values
	            var C = this._C = [
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
	            ];

	            // Carry bit
	            this._b = 0;

	            // Iterate the system four times
	            for (var i = 0; i < 4; i++) {
	                nextState.call(this);
	            }

	            // Modify the counters
	            for (var i = 0; i < 8; i++) {
	                C[i] ^= X[(i + 4) & 7];
	            }

	            // IV setup
	            if (iv) {
	                // Shortcuts
	                var IV = iv.words;
	                var IV_0 = IV[0];
	                var IV_1 = IV[1];

	                // Generate four subvectors
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

	                // Modify counter values
	                C[0] ^= i0;
	                C[1] ^= i1;
	                C[2] ^= i2;
	                C[3] ^= i3;
	                C[4] ^= i0;
	                C[5] ^= i1;
	                C[6] ^= i2;
	                C[7] ^= i3;

	                // Iterate the system four times
	                for (var i = 0; i < 4; i++) {
	                    nextState.call(this);
	                }
	            }
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var X = this._X;

	            // Iterate the system
	            nextState.call(this);

	            // Generate four keystream words
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

	            for (var i = 0; i < 4; i++) {
	                // Swap endian
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

	                // Encrypt
	                M[offset + i] ^= S[i];
	            }
	        },

	        blockSize: 128/32,

	        ivSize: 64/32
	    });

	    function nextState() {
	        // Shortcuts
	        var X = this._X;
	        var C = this._C;

	        // Save old counter values
	        for (var i = 0; i < 8; i++) {
	            C_[i] = C[i];
	        }

	        // Calculate new counter values
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

	        // Calculate the g-values
	        for (var i = 0; i < 8; i++) {
	            var gx = X[i] + C[i];

	            // Construct high and low argument for squaring
	            var ga = gx & 0xffff;
	            var gb = gx >>> 16;

	            // Calculate high and low result of squaring
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

	            // High XOR low
	            G[i] = gh ^ gl;
	        }

	        // Calculate new state values
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
	     */
	    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
	}());


	return CryptoJS.RabbitLegacy;

}));

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, Buffer, module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * @licstart The following is the entire license notice for the
 * Javascript code in this page
 *
 * Copyright 2021 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @licend The above is the entire license notice for the
 * Javascript code in this page
 */
(function webpackUniversalModuleDefinition(root, factory) {
  if (( false ? undefined : _typeof(exports)) === 'object' && ( false ? undefined : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}
})(this, function () {
  return (
    /******/
    function () {
      // webpackBootstrap

      /******/
      "use strict";
      /******/

      var __webpack_modules__ = [,
      /* 0 */

      /* 1 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.addLinkAttributes = addLinkAttributes;
        exports.deprecated = deprecated;
        exports.getFilenameFromUrl = getFilenameFromUrl;
        exports.getPdfFilenameFromUrl = getPdfFilenameFromUrl;
        exports.getXfaPageViewport = getXfaPageViewport;
        exports.isDataScheme = isDataScheme;
        exports.isPdfFile = isPdfFile;
        exports.isValidFetchUrl = isValidFetchUrl;
        exports.loadScript = loadScript;
        exports.StatTimer = exports.RenderingCancelledException = exports.PDFDateString = exports.PageViewport = exports.LinkTarget = exports.DOMSVGFactory = exports.DOMStandardFontDataFactory = exports.DOMCMapReaderFactory = exports.DOMCanvasFactory = exports.DEFAULT_LINK_REL = void 0;

        var _util = __w_pdfjs_require__(2);

        var _base_factory = __w_pdfjs_require__(5);

        var DEFAULT_LINK_REL = "noopener noreferrer nofollow";
        exports.DEFAULT_LINK_REL = DEFAULT_LINK_REL;
        var SVG_NS = "http://www.w3.org/2000/svg";

        var DOMCanvasFactory =
        /*#__PURE__*/
        function (_base_factory$BaseCan) {
          _inherits(DOMCanvasFactory, _base_factory$BaseCan);

          function DOMCanvasFactory() {
            var _this;

            var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                _ref$ownerDocument = _ref.ownerDocument,
                ownerDocument = _ref$ownerDocument === void 0 ? globalThis.document : _ref$ownerDocument;

            _classCallCheck(this, DOMCanvasFactory);

            _this = _possibleConstructorReturn(this, _getPrototypeOf(DOMCanvasFactory).call(this));
            _this._document = ownerDocument;
            return _this;
          }

          _createClass(DOMCanvasFactory, [{
            key: "_createCanvas",
            value: function _createCanvas(width, height) {
              var canvas = this._document.createElement("canvas");

              canvas.width = width;
              canvas.height = height;
              return canvas;
            }
          }]);

          return DOMCanvasFactory;
        }(_base_factory.BaseCanvasFactory);

        exports.DOMCanvasFactory = DOMCanvasFactory;

        function fetchData(_x) {
          return _fetchData.apply(this, arguments);
        }

        function _fetchData() {
          _fetchData = _asyncToGenerator(
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee(url) {
            var asTypedArray,
                response,
                _args = arguments;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    asTypedArray = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;

                    if (!isValidFetchUrl(url, document.baseURI)) {
                      _context.next = 21;
                      break;
                    }

                    _context.next = 4;
                    return fetch(url);

                  case 4:
                    response = _context.sent;

                    if (response.ok) {
                      _context.next = 7;
                      break;
                    }

                    throw new Error(response.statusText);

                  case 7:
                    if (!asTypedArray) {
                      _context.next = 15;
                      break;
                    }

                    _context.t1 = Uint8Array;
                    _context.next = 11;
                    return response.arrayBuffer();

                  case 11:
                    _context.t2 = _context.sent;
                    _context.t0 = new _context.t1(_context.t2);
                    _context.next = 20;
                    break;

                  case 15:
                    _context.t3 = (0, _util.stringToBytes);
                    _context.next = 18;
                    return response.text();

                  case 18:
                    _context.t4 = _context.sent;
                    _context.t0 = (0, _context.t3)(_context.t4);

                  case 20:
                    return _context.abrupt("return", _context.t0);

                  case 21:
                    return _context.abrupt("return", new Promise(function (resolve, reject) {
                      var request = new XMLHttpRequest();
                      request.open("GET", url, true);

                      if (asTypedArray) {
                        request.responseType = "arraybuffer";
                      }

                      request.onreadystatechange = function () {
                        if (request.readyState !== XMLHttpRequest.DONE) {
                          return;
                        }

                        if (request.status === 200 || request.status === 0) {
                          var data;

                          if (asTypedArray && request.response) {
                            data = new Uint8Array(request.response);
                          } else if (!asTypedArray && request.responseText) {
                            data = (0, _util.stringToBytes)(request.responseText);
                          }

                          if (data) {
                            resolve(data);
                            return;
                          }
                        }

                        reject(new Error(request.statusText));
                      };

                      request.send(null);
                    }));

                  case 22:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));
          return _fetchData.apply(this, arguments);
        }

        var DOMCMapReaderFactory =
        /*#__PURE__*/
        function (_base_factory$BaseCMa) {
          _inherits(DOMCMapReaderFactory, _base_factory$BaseCMa);

          function DOMCMapReaderFactory() {
            _classCallCheck(this, DOMCMapReaderFactory);

            return _possibleConstructorReturn(this, _getPrototypeOf(DOMCMapReaderFactory).apply(this, arguments));
          }

          _createClass(DOMCMapReaderFactory, [{
            key: "_fetchData",
            value: function _fetchData(url, compressionType) {
              return fetchData(url, this.isCompressed).then(function (data) {
                return {
                  cMapData: data,
                  compressionType: compressionType
                };
              });
            }
          }]);

          return DOMCMapReaderFactory;
        }(_base_factory.BaseCMapReaderFactory);

        exports.DOMCMapReaderFactory = DOMCMapReaderFactory;

        var DOMStandardFontDataFactory =
        /*#__PURE__*/
        function (_base_factory$BaseSta) {
          _inherits(DOMStandardFontDataFactory, _base_factory$BaseSta);

          function DOMStandardFontDataFactory() {
            _classCallCheck(this, DOMStandardFontDataFactory);

            return _possibleConstructorReturn(this, _getPrototypeOf(DOMStandardFontDataFactory).apply(this, arguments));
          }

          _createClass(DOMStandardFontDataFactory, [{
            key: "_fetchData",
            value: function _fetchData(url) {
              return fetchData(url, true);
            }
          }]);

          return DOMStandardFontDataFactory;
        }(_base_factory.BaseStandardFontDataFactory);

        exports.DOMStandardFontDataFactory = DOMStandardFontDataFactory;

        var DOMSVGFactory =
        /*#__PURE__*/
        function (_base_factory$BaseSVG) {
          _inherits(DOMSVGFactory, _base_factory$BaseSVG);

          function DOMSVGFactory() {
            _classCallCheck(this, DOMSVGFactory);

            return _possibleConstructorReturn(this, _getPrototypeOf(DOMSVGFactory).apply(this, arguments));
          }

          _createClass(DOMSVGFactory, [{
            key: "_createSVG",
            value: function _createSVG(type) {
              return document.createElementNS(SVG_NS, type);
            }
          }]);

          return DOMSVGFactory;
        }(_base_factory.BaseSVGFactory);

        exports.DOMSVGFactory = DOMSVGFactory;

        var PageViewport =
        /*#__PURE__*/
        function () {
          function PageViewport(_ref2) {
            var viewBox = _ref2.viewBox,
                scale = _ref2.scale,
                rotation = _ref2.rotation,
                _ref2$offsetX = _ref2.offsetX,
                offsetX = _ref2$offsetX === void 0 ? 0 : _ref2$offsetX,
                _ref2$offsetY = _ref2.offsetY,
                offsetY = _ref2$offsetY === void 0 ? 0 : _ref2$offsetY,
                _ref2$dontFlip = _ref2.dontFlip,
                dontFlip = _ref2$dontFlip === void 0 ? false : _ref2$dontFlip;

            _classCallCheck(this, PageViewport);

            this.viewBox = viewBox;
            this.scale = scale;
            this.rotation = rotation;
            this.offsetX = offsetX;
            this.offsetY = offsetY;
            var centerX = (viewBox[2] + viewBox[0]) / 2;
            var centerY = (viewBox[3] + viewBox[1]) / 2;
            var rotateA, rotateB, rotateC, rotateD;
            rotation %= 360;

            if (rotation < 0) {
              rotation += 360;
            }

            switch (rotation) {
              case 180:
                rotateA = -1;
                rotateB = 0;
                rotateC = 0;
                rotateD = 1;
                break;

              case 90:
                rotateA = 0;
                rotateB = 1;
                rotateC = 1;
                rotateD = 0;
                break;

              case 270:
                rotateA = 0;
                rotateB = -1;
                rotateC = -1;
                rotateD = 0;
                break;

              case 0:
                rotateA = 1;
                rotateB = 0;
                rotateC = 0;
                rotateD = -1;
                break;

              default:
                throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.");
            }

            if (dontFlip) {
              rotateC = -rotateC;
              rotateD = -rotateD;
            }

            var offsetCanvasX, offsetCanvasY;
            var width, height;

            if (rotateA === 0) {
              offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;
              offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;
              width = Math.abs(viewBox[3] - viewBox[1]) * scale;
              height = Math.abs(viewBox[2] - viewBox[0]) * scale;
            } else {
              offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;
              offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;
              width = Math.abs(viewBox[2] - viewBox[0]) * scale;
              height = Math.abs(viewBox[3] - viewBox[1]) * scale;
            }

            this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];
            this.width = width;
            this.height = height;
          }

          _createClass(PageViewport, [{
            key: "clone",
            value: function clone() {
              var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                  _ref3$scale = _ref3.scale,
                  scale = _ref3$scale === void 0 ? this.scale : _ref3$scale,
                  _ref3$rotation = _ref3.rotation,
                  rotation = _ref3$rotation === void 0 ? this.rotation : _ref3$rotation,
                  _ref3$offsetX = _ref3.offsetX,
                  offsetX = _ref3$offsetX === void 0 ? this.offsetX : _ref3$offsetX,
                  _ref3$offsetY = _ref3.offsetY,
                  offsetY = _ref3$offsetY === void 0 ? this.offsetY : _ref3$offsetY,
                  _ref3$dontFlip = _ref3.dontFlip,
                  dontFlip = _ref3$dontFlip === void 0 ? false : _ref3$dontFlip;

              return new PageViewport({
                viewBox: this.viewBox.slice(),
                scale: scale,
                rotation: rotation,
                offsetX: offsetX,
                offsetY: offsetY,
                dontFlip: dontFlip
              });
            }
          }, {
            key: "convertToViewportPoint",
            value: function convertToViewportPoint(x, y) {
              return _util.Util.applyTransform([x, y], this.transform);
            }
          }, {
            key: "convertToViewportRectangle",
            value: function convertToViewportRectangle(rect) {
              var topLeft = _util.Util.applyTransform([rect[0], rect[1]], this.transform);

              var bottomRight = _util.Util.applyTransform([rect[2], rect[3]], this.transform);

              return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];
            }
          }, {
            key: "convertToPdfPoint",
            value: function convertToPdfPoint(x, y) {
              return _util.Util.applyInverseTransform([x, y], this.transform);
            }
          }]);

          return PageViewport;
        }();

        exports.PageViewport = PageViewport;

        var RenderingCancelledException =
        /*#__PURE__*/
        function (_util$BaseException) {
          _inherits(RenderingCancelledException, _util$BaseException);

          function RenderingCancelledException(msg, type) {
            var _this2;

            _classCallCheck(this, RenderingCancelledException);

            _this2 = _possibleConstructorReturn(this, _getPrototypeOf(RenderingCancelledException).call(this, msg));
            _this2.type = type;
            return _this2;
          }

          return RenderingCancelledException;
        }(_util.BaseException);

        exports.RenderingCancelledException = RenderingCancelledException;
        var LinkTarget = {
          NONE: 0,
          SELF: 1,
          BLANK: 2,
          PARENT: 3,
          TOP: 4
        };
        exports.LinkTarget = LinkTarget;

        function addLinkAttributes(link) {
          var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
              url = _ref4.url,
              target = _ref4.target,
              rel = _ref4.rel,
              _ref4$enabled = _ref4.enabled,
              enabled = _ref4$enabled === void 0 ? true : _ref4$enabled;

          (0, _util.assert)(url && typeof url === "string", 'addLinkAttributes: A valid "url" parameter must provided.');
          var urlNullRemoved = (0, _util.removeNullCharacters)(url);

          if (enabled) {
            link.href = link.title = urlNullRemoved;
          } else {
            link.href = "";
            link.title = "Disabled: ".concat(urlNullRemoved);

            link.onclick = function () {
              return false;
            };
          }

          var targetStr = "";

          switch (target) {
            case LinkTarget.NONE:
              break;

            case LinkTarget.SELF:
              targetStr = "_self";
              break;

            case LinkTarget.BLANK:
              targetStr = "_blank";
              break;

            case LinkTarget.PARENT:
              targetStr = "_parent";
              break;

            case LinkTarget.TOP:
              targetStr = "_top";
              break;
          }

          link.target = targetStr;
          link.rel = typeof rel === "string" ? rel : DEFAULT_LINK_REL;
        }

        function isDataScheme(url) {
          var ii = url.length;
          var i = 0;

          while (i < ii && url[i].trim() === "") {
            i++;
          }

          return url.substring(i, i + 5).toLowerCase() === "data:";
        }

        function isPdfFile(filename) {
          return typeof filename === "string" && /\.pdf$/i.test(filename);
        }

        function getFilenameFromUrl(url) {
          var anchor = url.indexOf("#");
          var query = url.indexOf("?");
          var end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);
          return url.substring(url.lastIndexOf("/", end) + 1, end);
        }

        function getPdfFilenameFromUrl(url) {
          var defaultFilename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "document.pdf";

          if (typeof url !== "string") {
            return defaultFilename;
          }

          if (isDataScheme(url)) {
            (0, _util.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.');
            return defaultFilename;
          }

          var reURI = /^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/;
          var reFilename = /[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i;
          var splitURI = reURI.exec(url);
          var suggestedFilename = reFilename.exec(splitURI[1]) || reFilename.exec(splitURI[2]) || reFilename.exec(splitURI[3]);

          if (suggestedFilename) {
            suggestedFilename = suggestedFilename[0];

            if (suggestedFilename.includes("%")) {
              try {
                suggestedFilename = reFilename.exec(decodeURIComponent(suggestedFilename))[0];
              } catch (ex) {}
            }
          }

          return suggestedFilename || defaultFilename;
        }

        var StatTimer =
        /*#__PURE__*/
        function () {
          function StatTimer() {
            _classCallCheck(this, StatTimer);

            this.started = Object.create(null);
            this.times = [];
          }

          _createClass(StatTimer, [{
            key: "time",
            value: function time(name) {
              if (name in this.started) {
                (0, _util.warn)("Timer is already running for ".concat(name));
              }

              this.started[name] = Date.now();
            }
          }, {
            key: "timeEnd",
            value: function timeEnd(name) {
              if (!(name in this.started)) {
                (0, _util.warn)("Timer has not been started for ".concat(name));
              }

              this.times.push({
                name: name,
                start: this.started[name],
                end: Date.now()
              });
              delete this.started[name];
            }
          }, {
            key: "toString",
            value: function toString() {
              var outBuf = [];
              var longest = 0;
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = this.times[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var time = _step.value;
                  var name = time.name;

                  if (name.length > longest) {
                    longest = name.length;
                  }
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                    _iterator["return"]();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = this.times[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var _time = _step2.value;
                  var duration = _time.end - _time.start;
                  outBuf.push("".concat(_time.name.padEnd(longest), " ").concat(duration, "ms\n"));
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                    _iterator2["return"]();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }

              return outBuf.join("");
            }
          }]);

          return StatTimer;
        }();

        exports.StatTimer = StatTimer;

        function isValidFetchUrl(url, baseUrl) {
          try {
            var _ref5 = baseUrl ? new URL(url, baseUrl) : new URL(url),
                protocol = _ref5.protocol;

            return protocol === "http:" || protocol === "https:";
          } catch (ex) {
            return false;
          }
        }

        function loadScript(src) {
          var removeScriptElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          return new Promise(function (resolve, reject) {
            var script = document.createElement("script");
            script.src = src;

            script.onload = function (evt) {
              if (removeScriptElement) {
                script.remove();
              }

              resolve(evt);
            };

            script.onerror = function () {
              reject(new Error("Cannot load script at: ".concat(script.src)));
            };

            (document.head || document.documentElement).appendChild(script);
          });
        }

        function deprecated(details) {
          console.log("Deprecated API usage: " + details);
        }

        var pdfDateStringRegex;

        var PDFDateString =
        /*#__PURE__*/
        function () {
          function PDFDateString() {
            _classCallCheck(this, PDFDateString);
          }

          _createClass(PDFDateString, null, [{
            key: "toDateObject",
            value: function toDateObject(input) {
              if (!input || !(0, _util.isString)(input)) {
                return null;
              }

              if (!pdfDateStringRegex) {
                pdfDateStringRegex = new RegExp("^D:" + "(\\d{4})" + "(\\d{2})?" + "(\\d{2})?" + "(\\d{2})?" + "(\\d{2})?" + "(\\d{2})?" + "([Z|+|-])?" + "(\\d{2})?" + "'?" + "(\\d{2})?" + "'?");
              }

              var matches = pdfDateStringRegex.exec(input);

              if (!matches) {
                return null;
              }

              var year = parseInt(matches[1], 10);
              var month = parseInt(matches[2], 10);
              month = month >= 1 && month <= 12 ? month - 1 : 0;
              var day = parseInt(matches[3], 10);
              day = day >= 1 && day <= 31 ? day : 1;
              var hour = parseInt(matches[4], 10);
              hour = hour >= 0 && hour <= 23 ? hour : 0;
              var minute = parseInt(matches[5], 10);
              minute = minute >= 0 && minute <= 59 ? minute : 0;
              var second = parseInt(matches[6], 10);
              second = second >= 0 && second <= 59 ? second : 0;
              var universalTimeRelation = matches[7] || "Z";
              var offsetHour = parseInt(matches[8], 10);
              offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;
              var offsetMinute = parseInt(matches[9], 10) || 0;
              offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;

              if (universalTimeRelation === "-") {
                hour += offsetHour;
                minute += offsetMinute;
              } else if (universalTimeRelation === "+") {
                hour -= offsetHour;
                minute -= offsetMinute;
              }

              return new Date(Date.UTC(year, month, day, hour, minute, second));
            }
          }]);

          return PDFDateString;
        }();

        exports.PDFDateString = PDFDateString;

        function getXfaPageViewport(xfaPage, _ref6) {
          var _ref6$scale = _ref6.scale,
              scale = _ref6$scale === void 0 ? 1 : _ref6$scale,
              _ref6$rotation = _ref6.rotation,
              rotation = _ref6$rotation === void 0 ? 0 : _ref6$rotation;
          var _xfaPage$attributes$s = xfaPage.attributes.style,
              width = _xfaPage$attributes$s.width,
              height = _xfaPage$attributes$s.height;
          var viewBox = [0, 0, parseInt(width), parseInt(height)];
          return new PageViewport({
            viewBox: viewBox,
            scale: scale,
            rotation: rotation
          });
        }
        /***/

      },
      /* 2 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.arrayByteLength = arrayByteLength;
        exports.arraysToBytes = arraysToBytes;
        exports.assert = assert;
        exports.bytesToString = bytesToString;
        exports.createObjectURL = createObjectURL;
        exports.createPromiseCapability = createPromiseCapability;
        exports.createValidAbsoluteUrl = createValidAbsoluteUrl;
        exports.escapeString = escapeString;
        exports.getModificationDate = getModificationDate;
        exports.getVerbosityLevel = getVerbosityLevel;
        exports.info = info;
        exports.isArrayBuffer = isArrayBuffer;
        exports.isArrayEqual = isArrayEqual;
        exports.isAscii = isAscii;
        exports.isBool = isBool;
        exports.isNum = isNum;
        exports.isSameOrigin = isSameOrigin;
        exports.isString = isString;
        exports.objectFromMap = objectFromMap;
        exports.objectSize = objectSize;
        exports.removeNullCharacters = removeNullCharacters;
        exports.setVerbosityLevel = setVerbosityLevel;
        exports.shadow = shadow;
        exports.string32 = string32;
        exports.stringToBytes = stringToBytes;
        exports.stringToPDFString = stringToPDFString;
        exports.stringToUTF16BEString = stringToUTF16BEString;
        exports.stringToUTF8String = stringToUTF8String;
        exports.unreachable = unreachable;
        exports.utf8StringToString = utf8StringToString;
        exports.warn = warn;
        exports.VerbosityLevel = exports.Util = exports.UNSUPPORTED_FEATURES = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.StreamType = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.PageActionEventType = exports.OPS = exports.MissingPDFException = exports.IsLittleEndianCached = exports.IsEvalSupportedCached = exports.InvalidPDFException = exports.ImageKind = exports.IDENTITY_MATRIX = exports.FormatError = exports.FontType = exports.FONT_IDENTITY_MATRIX = exports.DocumentActionEventType = exports.CMapCompressionType = exports.BaseException = exports.AnnotationType = exports.AnnotationStateModelType = exports.AnnotationReviewState = exports.AnnotationReplyType = exports.AnnotationMarkedState = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.AnnotationActionEventType = exports.AbortException = void 0;

        __w_pdfjs_require__(3);

        var IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];
        exports.IDENTITY_MATRIX = IDENTITY_MATRIX;
        var FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];
        exports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;
        var PermissionFlag = {
          PRINT: 0x04,
          MODIFY_CONTENTS: 0x08,
          COPY: 0x10,
          MODIFY_ANNOTATIONS: 0x20,
          FILL_INTERACTIVE_FORMS: 0x100,
          COPY_FOR_ACCESSIBILITY: 0x200,
          ASSEMBLE: 0x400,
          PRINT_HIGH_QUALITY: 0x800
        };
        exports.PermissionFlag = PermissionFlag;
        var TextRenderingMode = {
          FILL: 0,
          STROKE: 1,
          FILL_STROKE: 2,
          INVISIBLE: 3,
          FILL_ADD_TO_PATH: 4,
          STROKE_ADD_TO_PATH: 5,
          FILL_STROKE_ADD_TO_PATH: 6,
          ADD_TO_PATH: 7,
          FILL_STROKE_MASK: 3,
          ADD_TO_PATH_FLAG: 4
        };
        exports.TextRenderingMode = TextRenderingMode;
        var ImageKind = {
          GRAYSCALE_1BPP: 1,
          RGB_24BPP: 2,
          RGBA_32BPP: 3
        };
        exports.ImageKind = ImageKind;
        var AnnotationType = {
          TEXT: 1,
          LINK: 2,
          FREETEXT: 3,
          LINE: 4,
          SQUARE: 5,
          CIRCLE: 6,
          POLYGON: 7,
          POLYLINE: 8,
          HIGHLIGHT: 9,
          UNDERLINE: 10,
          SQUIGGLY: 11,
          STRIKEOUT: 12,
          STAMP: 13,
          CARET: 14,
          INK: 15,
          POPUP: 16,
          FILEATTACHMENT: 17,
          SOUND: 18,
          MOVIE: 19,
          WIDGET: 20,
          SCREEN: 21,
          PRINTERMARK: 22,
          TRAPNET: 23,
          WATERMARK: 24,
          THREED: 25,
          REDACT: 26
        };
        exports.AnnotationType = AnnotationType;
        var AnnotationStateModelType = {
          MARKED: "Marked",
          REVIEW: "Review"
        };
        exports.AnnotationStateModelType = AnnotationStateModelType;
        var AnnotationMarkedState = {
          MARKED: "Marked",
          UNMARKED: "Unmarked"
        };
        exports.AnnotationMarkedState = AnnotationMarkedState;
        var AnnotationReviewState = {
          ACCEPTED: "Accepted",
          REJECTED: "Rejected",
          CANCELLED: "Cancelled",
          COMPLETED: "Completed",
          NONE: "None"
        };
        exports.AnnotationReviewState = AnnotationReviewState;
        var AnnotationReplyType = {
          GROUP: "Group",
          REPLY: "R"
        };
        exports.AnnotationReplyType = AnnotationReplyType;
        var AnnotationFlag = {
          INVISIBLE: 0x01,
          HIDDEN: 0x02,
          PRINT: 0x04,
          NOZOOM: 0x08,
          NOROTATE: 0x10,
          NOVIEW: 0x20,
          READONLY: 0x40,
          LOCKED: 0x80,
          TOGGLENOVIEW: 0x100,
          LOCKEDCONTENTS: 0x200
        };
        exports.AnnotationFlag = AnnotationFlag;
        var AnnotationFieldFlag = {
          READONLY: 0x0000001,
          REQUIRED: 0x0000002,
          NOEXPORT: 0x0000004,
          MULTILINE: 0x0001000,
          PASSWORD: 0x0002000,
          NOTOGGLETOOFF: 0x0004000,
          RADIO: 0x0008000,
          PUSHBUTTON: 0x0010000,
          COMBO: 0x0020000,
          EDIT: 0x0040000,
          SORT: 0x0080000,
          FILESELECT: 0x0100000,
          MULTISELECT: 0x0200000,
          DONOTSPELLCHECK: 0x0400000,
          DONOTSCROLL: 0x0800000,
          COMB: 0x1000000,
          RICHTEXT: 0x2000000,
          RADIOSINUNISON: 0x2000000,
          COMMITONSELCHANGE: 0x4000000
        };
        exports.AnnotationFieldFlag = AnnotationFieldFlag;
        var AnnotationBorderStyleType = {
          SOLID: 1,
          DASHED: 2,
          BEVELED: 3,
          INSET: 4,
          UNDERLINE: 5
        };
        exports.AnnotationBorderStyleType = AnnotationBorderStyleType;
        var AnnotationActionEventType = {
          E: "Mouse Enter",
          X: "Mouse Exit",
          D: "Mouse Down",
          U: "Mouse Up",
          Fo: "Focus",
          Bl: "Blur",
          PO: "PageOpen",
          PC: "PageClose",
          PV: "PageVisible",
          PI: "PageInvisible",
          K: "Keystroke",
          F: "Format",
          V: "Validate",
          C: "Calculate"
        };
        exports.AnnotationActionEventType = AnnotationActionEventType;
        var DocumentActionEventType = {
          WC: "WillClose",
          WS: "WillSave",
          DS: "DidSave",
          WP: "WillPrint",
          DP: "DidPrint"
        };
        exports.DocumentActionEventType = DocumentActionEventType;
        var PageActionEventType = {
          O: "PageOpen",
          C: "PageClose"
        };
        exports.PageActionEventType = PageActionEventType;
        var StreamType = {
          UNKNOWN: "UNKNOWN",
          FLATE: "FLATE",
          LZW: "LZW",
          DCT: "DCT",
          JPX: "JPX",
          JBIG: "JBIG",
          A85: "A85",
          AHX: "AHX",
          CCF: "CCF",
          RLX: "RLX"
        };
        exports.StreamType = StreamType;
        var FontType = {
          UNKNOWN: "UNKNOWN",
          TYPE1: "TYPE1",
          TYPE1STANDARD: "TYPE1STANDARD",
          TYPE1C: "TYPE1C",
          CIDFONTTYPE0: "CIDFONTTYPE0",
          CIDFONTTYPE0C: "CIDFONTTYPE0C",
          TRUETYPE: "TRUETYPE",
          CIDFONTTYPE2: "CIDFONTTYPE2",
          TYPE3: "TYPE3",
          OPENTYPE: "OPENTYPE",
          TYPE0: "TYPE0",
          MMTYPE1: "MMTYPE1"
        };
        exports.FontType = FontType;
        var VerbosityLevel = {
          ERRORS: 0,
          WARNINGS: 1,
          INFOS: 5
        };
        exports.VerbosityLevel = VerbosityLevel;
        var CMapCompressionType = {
          NONE: 0,
          BINARY: 1,
          STREAM: 2
        };
        exports.CMapCompressionType = CMapCompressionType;
        var OPS = {
          dependency: 1,
          setLineWidth: 2,
          setLineCap: 3,
          setLineJoin: 4,
          setMiterLimit: 5,
          setDash: 6,
          setRenderingIntent: 7,
          setFlatness: 8,
          setGState: 9,
          save: 10,
          restore: 11,
          transform: 12,
          moveTo: 13,
          lineTo: 14,
          curveTo: 15,
          curveTo2: 16,
          curveTo3: 17,
          closePath: 18,
          rectangle: 19,
          stroke: 20,
          closeStroke: 21,
          fill: 22,
          eoFill: 23,
          fillStroke: 24,
          eoFillStroke: 25,
          closeFillStroke: 26,
          closeEOFillStroke: 27,
          endPath: 28,
          clip: 29,
          eoClip: 30,
          beginText: 31,
          endText: 32,
          setCharSpacing: 33,
          setWordSpacing: 34,
          setHScale: 35,
          setLeading: 36,
          setFont: 37,
          setTextRenderingMode: 38,
          setTextRise: 39,
          moveText: 40,
          setLeadingMoveText: 41,
          setTextMatrix: 42,
          nextLine: 43,
          showText: 44,
          showSpacedText: 45,
          nextLineShowText: 46,
          nextLineSetSpacingShowText: 47,
          setCharWidth: 48,
          setCharWidthAndBounds: 49,
          setStrokeColorSpace: 50,
          setFillColorSpace: 51,
          setStrokeColor: 52,
          setStrokeColorN: 53,
          setFillColor: 54,
          setFillColorN: 55,
          setStrokeGray: 56,
          setFillGray: 57,
          setStrokeRGBColor: 58,
          setFillRGBColor: 59,
          setStrokeCMYKColor: 60,
          setFillCMYKColor: 61,
          shadingFill: 62,
          beginInlineImage: 63,
          beginImageData: 64,
          endInlineImage: 65,
          paintXObject: 66,
          markPoint: 67,
          markPointProps: 68,
          beginMarkedContent: 69,
          beginMarkedContentProps: 70,
          endMarkedContent: 71,
          beginCompat: 72,
          endCompat: 73,
          paintFormXObjectBegin: 74,
          paintFormXObjectEnd: 75,
          beginGroup: 76,
          endGroup: 77,
          beginAnnotations: 78,
          endAnnotations: 79,
          beginAnnotation: 80,
          endAnnotation: 81,
          paintJpegXObject: 82,
          paintImageMaskXObject: 83,
          paintImageMaskXObjectGroup: 84,
          paintImageXObject: 85,
          paintInlineImageXObject: 86,
          paintInlineImageXObjectGroup: 87,
          paintImageXObjectRepeat: 88,
          paintImageMaskXObjectRepeat: 89,
          paintSolidColorImageMask: 90,
          constructPath: 91
        };
        exports.OPS = OPS;
        var UNSUPPORTED_FEATURES = {
          unknown: "unknown",
          forms: "forms",
          javaScript: "javaScript",
          signatures: "signatures",
          smask: "smask",
          shadingPattern: "shadingPattern",
          font: "font",
          errorTilingPattern: "errorTilingPattern",
          errorExtGState: "errorExtGState",
          errorXObject: "errorXObject",
          errorFontLoadType3: "errorFontLoadType3",
          errorFontState: "errorFontState",
          errorFontMissing: "errorFontMissing",
          errorFontTranslate: "errorFontTranslate",
          errorColorSpace: "errorColorSpace",
          errorOperatorList: "errorOperatorList",
          errorFontToUnicode: "errorFontToUnicode",
          errorFontLoadNative: "errorFontLoadNative",
          errorFontBuildPath: "errorFontBuildPath",
          errorFontGetPath: "errorFontGetPath",
          errorMarkedContent: "errorMarkedContent"
        };
        exports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;
        var PasswordResponses = {
          NEED_PASSWORD: 1,
          INCORRECT_PASSWORD: 2
        };
        exports.PasswordResponses = PasswordResponses;
        var verbosity = VerbosityLevel.WARNINGS;

        function setVerbosityLevel(level) {
          if (Number.isInteger(level)) {
            verbosity = level;
          }
        }

        function getVerbosityLevel() {
          return verbosity;
        }

        function info(msg) {
          if (verbosity >= VerbosityLevel.INFOS) {
            console.log("Info: ".concat(msg));
          }
        }

        function warn(msg) {
          if (verbosity >= VerbosityLevel.WARNINGS) {
            console.log("Warning: ".concat(msg));
          }
        }

        function unreachable(msg) {
          throw new Error(msg);
        }

        function assert(cond, msg) {
          if (!cond) {
            unreachable(msg);
          }
        }

        function isSameOrigin(baseUrl, otherUrl) {
          var base;

          try {
            base = new URL(baseUrl);

            if (!base.origin || base.origin === "null") {
              return false;
            }
          } catch (e) {
            return false;
          }

          var other = new URL(otherUrl, base);
          return base.origin === other.origin;
        }

        function _isValidProtocol(url) {
          if (!url) {
            return false;
          }

          switch (url.protocol) {
            case "http:":
            case "https:":
            case "ftp:":
            case "mailto:":
            case "tel:":
              return true;

            default:
              return false;
          }
        }

        function createValidAbsoluteUrl(url, baseUrl) {
          if (!url) {
            return null;
          }

          try {
            var absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);

            if (_isValidProtocol(absoluteUrl)) {
              return absoluteUrl;
            }
          } catch (ex) {}

          return null;
        }

        function shadow(obj, prop, value) {
          Object.defineProperty(obj, prop, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: false
          });
          return value;
        }

        var BaseException = function BaseExceptionClosure() {
          function BaseException(message) {
            if (this.constructor === BaseException) {
              unreachable("Cannot initialize BaseException.");
            }

            this.message = message;
            this.name = this.constructor.name;
          }

          BaseException.prototype = new Error();
          BaseException.constructor = BaseException;
          return BaseException;
        }();

        exports.BaseException = BaseException;

        var PasswordException =
        /*#__PURE__*/
        function (_BaseException) {
          _inherits(PasswordException, _BaseException);

          function PasswordException(msg, code) {
            var _this3;

            _classCallCheck(this, PasswordException);

            _this3 = _possibleConstructorReturn(this, _getPrototypeOf(PasswordException).call(this, msg));
            _this3.code = code;
            return _this3;
          }

          return PasswordException;
        }(BaseException);

        exports.PasswordException = PasswordException;

        var UnknownErrorException =
        /*#__PURE__*/
        function (_BaseException2) {
          _inherits(UnknownErrorException, _BaseException2);

          function UnknownErrorException(msg, details) {
            var _this4;

            _classCallCheck(this, UnknownErrorException);

            _this4 = _possibleConstructorReturn(this, _getPrototypeOf(UnknownErrorException).call(this, msg));
            _this4.details = details;
            return _this4;
          }

          return UnknownErrorException;
        }(BaseException);

        exports.UnknownErrorException = UnknownErrorException;

        var InvalidPDFException =
        /*#__PURE__*/
        function (_BaseException3) {
          _inherits(InvalidPDFException, _BaseException3);

          function InvalidPDFException() {
            _classCallCheck(this, InvalidPDFException);

            return _possibleConstructorReturn(this, _getPrototypeOf(InvalidPDFException).apply(this, arguments));
          }

          return InvalidPDFException;
        }(BaseException);

        exports.InvalidPDFException = InvalidPDFException;

        var MissingPDFException =
        /*#__PURE__*/
        function (_BaseException4) {
          _inherits(MissingPDFException, _BaseException4);

          function MissingPDFException() {
            _classCallCheck(this, MissingPDFException);

            return _possibleConstructorReturn(this, _getPrototypeOf(MissingPDFException).apply(this, arguments));
          }

          return MissingPDFException;
        }(BaseException);

        exports.MissingPDFException = MissingPDFException;

        var UnexpectedResponseException =
        /*#__PURE__*/
        function (_BaseException5) {
          _inherits(UnexpectedResponseException, _BaseException5);

          function UnexpectedResponseException(msg, status) {
            var _this5;

            _classCallCheck(this, UnexpectedResponseException);

            _this5 = _possibleConstructorReturn(this, _getPrototypeOf(UnexpectedResponseException).call(this, msg));
            _this5.status = status;
            return _this5;
          }

          return UnexpectedResponseException;
        }(BaseException);

        exports.UnexpectedResponseException = UnexpectedResponseException;

        var FormatError =
        /*#__PURE__*/
        function (_BaseException6) {
          _inherits(FormatError, _BaseException6);

          function FormatError() {
            _classCallCheck(this, FormatError);

            return _possibleConstructorReturn(this, _getPrototypeOf(FormatError).apply(this, arguments));
          }

          return FormatError;
        }(BaseException);

        exports.FormatError = FormatError;

        var AbortException =
        /*#__PURE__*/
        function (_BaseException7) {
          _inherits(AbortException, _BaseException7);

          function AbortException() {
            _classCallCheck(this, AbortException);

            return _possibleConstructorReturn(this, _getPrototypeOf(AbortException).apply(this, arguments));
          }

          return AbortException;
        }(BaseException);

        exports.AbortException = AbortException;
        var NullCharactersRegExp = /\x00/g;

        function removeNullCharacters(str) {
          if (typeof str !== "string") {
            warn("The argument for removeNullCharacters must be a string.");
            return str;
          }

          return str.replace(NullCharactersRegExp, "");
        }

        function bytesToString(bytes) {
          assert(bytes !== null && _typeof(bytes) === "object" && bytes.length !== undefined, "Invalid argument for bytesToString");
          var length = bytes.length;
          var MAX_ARGUMENT_COUNT = 8192;

          if (length < MAX_ARGUMENT_COUNT) {
            return String.fromCharCode.apply(null, bytes);
          }

          var strBuf = [];

          for (var i = 0; i < length; i += MAX_ARGUMENT_COUNT) {
            var chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);
            var chunk = bytes.subarray(i, chunkEnd);
            strBuf.push(String.fromCharCode.apply(null, chunk));
          }

          return strBuf.join("");
        }

        function stringToBytes(str) {
          assert(typeof str === "string", "Invalid argument for stringToBytes");
          var length = str.length;
          var bytes = new Uint8Array(length);

          for (var i = 0; i < length; ++i) {
            bytes[i] = str.charCodeAt(i) & 0xff;
          }

          return bytes;
        }

        function arrayByteLength(arr) {
          if (arr.length !== undefined) {
            return arr.length;
          }

          assert(arr.byteLength !== undefined, "arrayByteLength - invalid argument.");
          return arr.byteLength;
        }

        function arraysToBytes(arr) {
          var length = arr.length;

          if (length === 1 && arr[0] instanceof Uint8Array) {
            return arr[0];
          }

          var resultLength = 0;

          for (var i = 0; i < length; i++) {
            resultLength += arrayByteLength(arr[i]);
          }

          var pos = 0;
          var data = new Uint8Array(resultLength);

          for (var _i = 0; _i < length; _i++) {
            var item = arr[_i];

            if (!(item instanceof Uint8Array)) {
              if (typeof item === "string") {
                item = stringToBytes(item);
              } else {
                item = new Uint8Array(item);
              }
            }

            var itemLength = item.byteLength;
            data.set(item, pos);
            pos += itemLength;
          }

          return data;
        }

        function string32(value) {
          return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);
        }

        function objectSize(obj) {
          return Object.keys(obj).length;
        }

        function objectFromMap(map) {
          var obj = Object.create(null);
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = map[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _step3$value = _slicedToArray(_step3.value, 2),
                  key = _step3$value[0],
                  value = _step3$value[1];

              obj[key] = value;
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }

          return obj;
        }

        function isLittleEndian() {
          var buffer8 = new Uint8Array(4);
          buffer8[0] = 1;
          var view32 = new Uint32Array(buffer8.buffer, 0, 1);
          return view32[0] === 1;
        }

        var IsLittleEndianCached = {
          get value() {
            return shadow(this, "value", isLittleEndian());
          }

        };
        exports.IsLittleEndianCached = IsLittleEndianCached;

        function isEvalSupported() {
          try {
            new Function("");
            return true;
          } catch (e) {
            return false;
          }
        }

        var IsEvalSupportedCached = {
          get value() {
            return shadow(this, "value", isEvalSupported());
          }

        };
        exports.IsEvalSupportedCached = IsEvalSupportedCached;

        var hexNumbers = _toConsumableArray(Array(256).keys()).map(function (n) {
          return n.toString(16).padStart(2, "0");
        });

        var Util =
        /*#__PURE__*/
        function () {
          function Util() {
            _classCallCheck(this, Util);
          }

          _createClass(Util, null, [{
            key: "makeHexColor",
            value: function makeHexColor(r, g, b) {
              return "#".concat(hexNumbers[r]).concat(hexNumbers[g]).concat(hexNumbers[b]);
            }
          }, {
            key: "transform",
            value: function transform(m1, m2) {
              return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];
            }
          }, {
            key: "applyTransform",
            value: function applyTransform(p, m) {
              var xt = p[0] * m[0] + p[1] * m[2] + m[4];
              var yt = p[0] * m[1] + p[1] * m[3] + m[5];
              return [xt, yt];
            }
          }, {
            key: "applyInverseTransform",
            value: function applyInverseTransform(p, m) {
              var d = m[0] * m[3] - m[1] * m[2];
              var xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;
              var yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;
              return [xt, yt];
            }
          }, {
            key: "getAxialAlignedBoundingBox",
            value: function getAxialAlignedBoundingBox(r, m) {
              var p1 = Util.applyTransform(r, m);
              var p2 = Util.applyTransform(r.slice(2, 4), m);
              var p3 = Util.applyTransform([r[0], r[3]], m);
              var p4 = Util.applyTransform([r[2], r[1]], m);
              return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];
            }
          }, {
            key: "inverseTransform",
            value: function inverseTransform(m) {
              var d = m[0] * m[3] - m[1] * m[2];
              return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];
            }
          }, {
            key: "apply3dTransform",
            value: function apply3dTransform(m, v) {
              return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];
            }
          }, {
            key: "singularValueDecompose2dScale",
            value: function singularValueDecompose2dScale(m) {
              var transpose = [m[0], m[2], m[1], m[3]];
              var a = m[0] * transpose[0] + m[1] * transpose[2];
              var b = m[0] * transpose[1] + m[1] * transpose[3];
              var c = m[2] * transpose[0] + m[3] * transpose[2];
              var d = m[2] * transpose[1] + m[3] * transpose[3];
              var first = (a + d) / 2;
              var second = Math.sqrt(Math.pow(a + d, 2) - 4 * (a * d - c * b)) / 2;
              var sx = first + second || 1;
              var sy = first - second || 1;
              return [Math.sqrt(sx), Math.sqrt(sy)];
            }
          }, {
            key: "normalizeRect",
            value: function normalizeRect(rect) {
              var r = rect.slice(0);

              if (rect[0] > rect[2]) {
                r[0] = rect[2];
                r[2] = rect[0];
              }

              if (rect[1] > rect[3]) {
                r[1] = rect[3];
                r[3] = rect[1];
              }

              return r;
            }
          }, {
            key: "intersect",
            value: function intersect(rect1, rect2) {
              function compare(a, b) {
                return a - b;
              }

              var orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);
              var orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);
              var result = [];
              rect1 = Util.normalizeRect(rect1);
              rect2 = Util.normalizeRect(rect2);

              if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {
                result[0] = orderedX[1];
                result[2] = orderedX[2];
              } else {
                return null;
              }

              if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {
                result[1] = orderedY[1];
                result[3] = orderedY[2];
              } else {
                return null;
              }

              return result;
            }
          }]);

          return Util;
        }();

        exports.Util = Util;
        var PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8, 0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018, 0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d, 0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac];

        function stringToPDFString(str) {
          var length = str.length,
              strBuf = [];

          if (str[0] === "\xFE" && str[1] === "\xFF") {
            for (var i = 2; i < length; i += 2) {
              strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));
            }
          } else if (str[0] === "\xFF" && str[1] === "\xFE") {
            for (var _i2 = 2; _i2 < length; _i2 += 2) {
              strBuf.push(String.fromCharCode(str.charCodeAt(_i2 + 1) << 8 | str.charCodeAt(_i2)));
            }
          } else {
            for (var _i3 = 0; _i3 < length; ++_i3) {
              var code = PDFStringTranslateTable[str.charCodeAt(_i3)];
              strBuf.push(code ? String.fromCharCode(code) : str.charAt(_i3));
            }
          }

          return strBuf.join("");
        }

        function escapeString(str) {
          return str.replace(/([()\\\n\r])/g, function (match) {
            if (match === "\n") {
              return "\\n";
            } else if (match === "\r") {
              return "\\r";
            }

            return "\\".concat(match);
          });
        }

        function isAscii(str) {
          return /^[\x00-\x7F]*$/.test(str);
        }

        function stringToUTF16BEString(str) {
          var buf = ["\xFE\xFF"];

          for (var i = 0, ii = str.length; i < ii; i++) {
            var _char = str.charCodeAt(i);

            buf.push(String.fromCharCode(_char >> 8 & 0xff), String.fromCharCode(_char & 0xff));
          }

          return buf.join("");
        }

        function stringToUTF8String(str) {
          return decodeURIComponent(escape(str));
        }

        function utf8StringToString(str) {
          return unescape(encodeURIComponent(str));
        }

        function isBool(v) {
          return typeof v === "boolean";
        }

        function isNum(v) {
          return typeof v === "number";
        }

        function isString(v) {
          return typeof v === "string";
        }

        function isArrayBuffer(v) {
          return _typeof(v) === "object" && v !== null && v.byteLength !== undefined;
        }

        function isArrayEqual(arr1, arr2) {
          if (arr1.length !== arr2.length) {
            return false;
          }

          for (var i = 0, ii = arr1.length; i < ii; i++) {
            if (arr1[i] !== arr2[i]) {
              return false;
            }
          }

          return true;
        }

        function getModificationDate() {
          var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
          var buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, "0"), date.getUTCDate().toString().padStart(2, "0"), date.getUTCHours().toString().padStart(2, "0"), date.getUTCMinutes().toString().padStart(2, "0"), date.getUTCSeconds().toString().padStart(2, "0")];
          return buffer.join("");
        }

        function createPromiseCapability() {
          var capability = Object.create(null);
          var isSettled = false;
          Object.defineProperty(capability, "settled", {
            get: function get() {
              return isSettled;
            }
          });
          capability.promise = new Promise(function (resolve, reject) {
            capability.resolve = function (data) {
              isSettled = true;
              resolve(data);
            };

            capability.reject = function (reason) {
              isSettled = true;
              reject(reason);
            };
          });
          return capability;
        }

        function createObjectURL(data) {
          var contentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
          var forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

          if (URL.createObjectURL && !forceDataSchema) {
            return URL.createObjectURL(new Blob([data], {
              type: contentType
            }));
          }

          var digits = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
          var buffer = "data:".concat(contentType, ";base64,");

          for (var i = 0, ii = data.length; i < ii; i += 3) {
            var b1 = data[i] & 0xff;
            var b2 = data[i + 1] & 0xff;
            var b3 = data[i + 2] & 0xff;
            var d1 = b1 >> 2,
                d2 = (b1 & 3) << 4 | b2 >> 4;
            var d3 = i + 1 < ii ? (b2 & 0xf) << 2 | b3 >> 6 : 64;
            var d4 = i + 2 < ii ? b3 & 0x3f : 64;
            buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];
          }

          return buffer;
        }
        /***/

      },
      /* 3 */

      /***/
      function (__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {
        var _is_node = __w_pdfjs_require__(4);

        ;
        /***/
      },
      /* 4 */

      /***/
      function (__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.isNodeJS = void 0;
        var isNodeJS = (typeof process === "undefined" ? "undefined" : _typeof(process)) === "object" && process + "" === "[object process]" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== "browser");
        exports.isNodeJS = isNodeJS;
        /***/
      },
      /* 5 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BaseSVGFactory = exports.BaseStandardFontDataFactory = exports.BaseCMapReaderFactory = exports.BaseCanvasFactory = void 0;

        var _util = __w_pdfjs_require__(2);

        var BaseCanvasFactory =
        /*#__PURE__*/
        function () {
          function BaseCanvasFactory() {
            _classCallCheck(this, BaseCanvasFactory);

            if (this.constructor === BaseCanvasFactory) {
              (0, _util.unreachable)("Cannot initialize BaseCanvasFactory.");
            }
          }

          _createClass(BaseCanvasFactory, [{
            key: "create",
            value: function create(width, height) {
              if (width <= 0 || height <= 0) {
                throw new Error("Invalid canvas size");
              }

              var canvas = this._createCanvas(width, height);

              return {
                canvas: canvas,
                context: canvas.getContext("2d")
              };
            }
          }, {
            key: "reset",
            value: function reset(canvasAndContext, width, height) {
              if (!canvasAndContext.canvas) {
                throw new Error("Canvas is not specified");
              }

              if (width <= 0 || height <= 0) {
                throw new Error("Invalid canvas size");
              }

              canvasAndContext.canvas.width = width;
              canvasAndContext.canvas.height = height;
            }
          }, {
            key: "destroy",
            value: function destroy(canvasAndContext) {
              if (!canvasAndContext.canvas) {
                throw new Error("Canvas is not specified");
              }

              canvasAndContext.canvas.width = 0;
              canvasAndContext.canvas.height = 0;
              canvasAndContext.canvas = null;
              canvasAndContext.context = null;
            }
          }, {
            key: "_createCanvas",
            value: function _createCanvas(width, height) {
              (0, _util.unreachable)("Abstract method `_createCanvas` called.");
            }
          }]);

          return BaseCanvasFactory;
        }();

        exports.BaseCanvasFactory = BaseCanvasFactory;

        var BaseCMapReaderFactory =
        /*#__PURE__*/
        function () {
          function BaseCMapReaderFactory(_ref7) {
            var _ref7$baseUrl = _ref7.baseUrl,
                baseUrl = _ref7$baseUrl === void 0 ? null : _ref7$baseUrl,
                _ref7$isCompressed = _ref7.isCompressed,
                isCompressed = _ref7$isCompressed === void 0 ? false : _ref7$isCompressed;

            _classCallCheck(this, BaseCMapReaderFactory);

            if (this.constructor === BaseCMapReaderFactory) {
              (0, _util.unreachable)("Cannot initialize BaseCMapReaderFactory.");
            }

            this.baseUrl = baseUrl;
            this.isCompressed = isCompressed;
          }

          _createClass(BaseCMapReaderFactory, [{
            key: "fetch",
            value: function () {
              var _fetch = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee2(_ref8) {
                var _this6 = this;

                var name, url, compressionType;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        name = _ref8.name;

                        if (this.baseUrl) {
                          _context2.next = 3;
                          break;
                        }

                        throw new Error('The CMap "baseUrl" parameter must be specified, ensure that ' + 'the "cMapUrl" and "cMapPacked" API parameters are provided.');

                      case 3:
                        if (name) {
                          _context2.next = 5;
                          break;
                        }

                        throw new Error("CMap name must be specified.");

                      case 5:
                        url = this.baseUrl + name + (this.isCompressed ? ".bcmap" : "");
                        compressionType = this.isCompressed ? _util.CMapCompressionType.BINARY : _util.CMapCompressionType.NONE;
                        return _context2.abrupt("return", this._fetchData(url, compressionType)["catch"](function (reason) {
                          throw new Error("Unable to load ".concat(_this6.isCompressed ? "binary " : "", "CMap at: ").concat(url));
                        }));

                      case 8:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2, this);
              }));

              function fetch(_x2) {
                return _fetch.apply(this, arguments);
              }

              return fetch;
            }()
          }, {
            key: "_fetchData",
            value: function _fetchData(url, compressionType) {
              (0, _util.unreachable)("Abstract method `_fetchData` called.");
            }
          }]);

          return BaseCMapReaderFactory;
        }();

        exports.BaseCMapReaderFactory = BaseCMapReaderFactory;

        var BaseStandardFontDataFactory =
        /*#__PURE__*/
        function () {
          function BaseStandardFontDataFactory(_ref9) {
            var _ref9$baseUrl = _ref9.baseUrl,
                baseUrl = _ref9$baseUrl === void 0 ? null : _ref9$baseUrl;

            _classCallCheck(this, BaseStandardFontDataFactory);

            if (this.constructor === BaseStandardFontDataFactory) {
              (0, _util.unreachable)("Cannot initialize BaseStandardFontDataFactory.");
            }

            this.baseUrl = baseUrl;
          }

          _createClass(BaseStandardFontDataFactory, [{
            key: "fetch",
            value: function () {
              var _fetch2 = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee3(_ref10) {
                var filename, url;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        filename = _ref10.filename;

                        if (this.baseUrl) {
                          _context3.next = 3;
                          break;
                        }

                        throw new Error('The standard font "baseUrl" parameter must be specified, ensure that ' + 'the "standardFontDataUrl" API parameter is provided.');

                      case 3:
                        if (filename) {
                          _context3.next = 5;
                          break;
                        }

                        throw new Error("Font filename must be specified.");

                      case 5:
                        url = "".concat(this.baseUrl).concat(filename);
                        return _context3.abrupt("return", this._fetchData(url)["catch"](function (reason) {
                          throw new Error("Unable to load font data at: ".concat(url));
                        }));

                      case 7:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3, this);
              }));

              function fetch(_x3) {
                return _fetch2.apply(this, arguments);
              }

              return fetch;
            }()
          }, {
            key: "_fetchData",
            value: function _fetchData(url) {
              (0, _util.unreachable)("Abstract method `_fetchData` called.");
            }
          }]);

          return BaseStandardFontDataFactory;
        }();

        exports.BaseStandardFontDataFactory = BaseStandardFontDataFactory;

        var BaseSVGFactory =
        /*#__PURE__*/
        function () {
          function BaseSVGFactory() {
            _classCallCheck(this, BaseSVGFactory);

            if (this.constructor === BaseSVGFactory) {
              (0, _util.unreachable)("Cannot initialize BaseSVGFactory.");
            }
          }

          _createClass(BaseSVGFactory, [{
            key: "create",
            value: function create(width, height) {
              if (width <= 0 || height <= 0) {
                throw new Error("Invalid SVG dimensions");
              }

              var svg = this._createSVG("svg:svg");

              svg.setAttribute("version", "1.1");
              svg.setAttribute("width", "".concat(width, "px"));
              svg.setAttribute("height", "".concat(height, "px"));
              svg.setAttribute("preserveAspectRatio", "none");
              svg.setAttribute("viewBox", "0 0 ".concat(width, " ").concat(height));
              return svg;
            }
          }, {
            key: "createElement",
            value: function createElement(type) {
              if (typeof type !== "string") {
                throw new Error("Invalid SVG element type");
              }

              return this._createSVG(type);
            }
          }, {
            key: "_createSVG",
            value: function _createSVG(type) {
              (0, _util.unreachable)("Abstract method `_createSVG` called.");
            }
          }]);

          return BaseSVGFactory;
        }();

        exports.BaseSVGFactory = BaseSVGFactory;
        /***/
      },
      /* 6 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.getDocument = getDocument;
        exports.setPDFNetworkStreamFactory = setPDFNetworkStreamFactory;
        exports.version = exports.PDFWorker = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.DefaultStandardFontDataFactory = exports.DefaultCMapReaderFactory = exports.DefaultCanvasFactory = exports.build = void 0;

        var _util = __w_pdfjs_require__(2);

        var _display_utils = __w_pdfjs_require__(1);

        var _font_loader = __w_pdfjs_require__(7);

        var _node_utils = __w_pdfjs_require__(8);

        var _annotation_storage = __w_pdfjs_require__(9);

        var _canvas = __w_pdfjs_require__(10);

        var _worker_options = __w_pdfjs_require__(12);

        var _is_node = __w_pdfjs_require__(4);

        var _message_handler = __w_pdfjs_require__(13);

        var _metadata = __w_pdfjs_require__(14);

        var _optional_content_config = __w_pdfjs_require__(15);

        var _transport_stream = __w_pdfjs_require__(16);

        var DEFAULT_RANGE_CHUNK_SIZE = 65536;
        var RENDERING_CANCELLED_TIMEOUT = 100;
        var DefaultCanvasFactory = _is_node.isNodeJS ? _node_utils.NodeCanvasFactory : _display_utils.DOMCanvasFactory;
        exports.DefaultCanvasFactory = DefaultCanvasFactory;
        var DefaultCMapReaderFactory = _is_node.isNodeJS ? _node_utils.NodeCMapReaderFactory : _display_utils.DOMCMapReaderFactory;
        exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory;
        var DefaultStandardFontDataFactory = _is_node.isNodeJS ? _node_utils.NodeStandardFontDataFactory : _display_utils.DOMStandardFontDataFactory;
        exports.DefaultStandardFontDataFactory = DefaultStandardFontDataFactory;
        var createPDFNetworkStream;

        function setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {
          createPDFNetworkStream = pdfNetworkStreamFactory;
        }

        function getDocument(src) {
          var task = new PDFDocumentLoadingTask();
          var source;

          if (typeof src === "string" || src instanceof URL) {
            source = {
              url: src
            };
          } else if ((0, _util.isArrayBuffer)(src)) {
            source = {
              data: src
            };
          } else if (src instanceof PDFDataRangeTransport) {
            source = {
              range: src
            };
          } else {
            if (_typeof(src) !== "object") {
              throw new Error("Invalid parameter in getDocument, " + "need either string, URL, Uint8Array, or parameter object.");
            }

            if (!src.url && !src.data && !src.range) {
              throw new Error("Invalid parameter object: need either .data, .range or .url");
            }

            source = src;
          }

          var params = Object.create(null);
          var rangeTransport = null,
              worker = null;

          for (var key in source) {
            var value = source[key];

            switch (key) {
              case "url":
                if (typeof window !== "undefined") {
                  try {
                    params[key] = new URL(value, window.location).href;
                    continue;
                  } catch (ex) {
                    (0, _util.warn)("Cannot create valid URL: \"".concat(ex, "\"."));
                  }
                } else if (typeof value === "string" || value instanceof URL) {
                  params[key] = value.toString();
                  continue;
                }

                throw new Error("Invalid PDF url data: " + "either string or URL-object is expected in the url property.");

              case "range":
                rangeTransport = value;
                continue;

              case "worker":
                worker = value;
                continue;

              case "data":
                if (_is_node.isNodeJS && typeof Buffer !== "undefined" && value instanceof Buffer) {
                  params[key] = new Uint8Array(value);
                } else if (value instanceof Uint8Array) {
                  break;
                } else if (typeof value === "string") {
                  params[key] = (0, _util.stringToBytes)(value);
                } else if (_typeof(value) === "object" && value !== null && !isNaN(value.length)) {
                  params[key] = new Uint8Array(value);
                } else if ((0, _util.isArrayBuffer)(value)) {
                  params[key] = new Uint8Array(value);
                } else {
                  throw new Error("Invalid PDF binary data: either typed array, " + "string, or array-like object is expected in the data property.");
                }

                continue;
            }

            params[key] = value;
          }

          params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;
          params.CMapReaderFactory = params.CMapReaderFactory || DefaultCMapReaderFactory;
          params.StandardFontDataFactory = params.StandardFontDataFactory || DefaultStandardFontDataFactory;
          params.ignoreErrors = params.stopAtErrors !== true;
          params.fontExtraProperties = params.fontExtraProperties === true;
          params.pdfBug = params.pdfBug === true;
          params.enableXfa = params.enableXfa === true;

          if (typeof params.docBaseUrl !== "string" || (0, _display_utils.isDataScheme)(params.docBaseUrl)) {
            params.docBaseUrl = null;
          }

          if (!Number.isInteger(params.maxImageSize)) {
            params.maxImageSize = -1;
          }

          if (typeof params.useWorkerFetch !== "boolean") {
            params.useWorkerFetch = params.CMapReaderFactory === _display_utils.DOMCMapReaderFactory && params.StandardFontDataFactory === _display_utils.DOMStandardFontDataFactory;
          }

          if (typeof params.isEvalSupported !== "boolean") {
            params.isEvalSupported = true;
          }

          if (typeof params.disableFontFace !== "boolean") {
            params.disableFontFace = _is_node.isNodeJS;
          }

          if (typeof params.useSystemFonts !== "boolean") {
            params.useSystemFonts = !_is_node.isNodeJS && !params.disableFontFace;
          }

          if (typeof params.ownerDocument === "undefined") {
            params.ownerDocument = globalThis.document;
          }

          if (typeof params.disableRange !== "boolean") {
            params.disableRange = false;
          }

          if (typeof params.disableStream !== "boolean") {
            params.disableStream = false;
          }

          if (typeof params.disableAutoFetch !== "boolean") {
            params.disableAutoFetch = false;
          }

          (0, _util.setVerbosityLevel)(params.verbosity);

          if (!worker) {
            var workerParams = {
              verbosity: params.verbosity,
              port: _worker_options.GlobalWorkerOptions.workerPort
            };
            worker = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);
            task._worker = worker;
          }

          var docId = task.docId;
          worker.promise.then(function () {
            if (task.destroyed) {
              throw new Error("Loading aborted");
            }

            var workerIdPromise = _fetchDocument(worker, params, rangeTransport, docId);

            var networkStreamPromise = new Promise(function (resolve) {
              var networkStream;

              if (rangeTransport) {
                networkStream = new _transport_stream.PDFDataTransportStream({
                  length: params.length,
                  initialData: params.initialData,
                  progressiveDone: params.progressiveDone,
                  contentDispositionFilename: params.contentDispositionFilename,
                  disableRange: params.disableRange,
                  disableStream: params.disableStream
                }, rangeTransport);
              } else if (!params.data) {
                networkStream = createPDFNetworkStream({
                  url: params.url,
                  length: params.length,
                  httpHeaders: params.httpHeaders,
                  withCredentials: params.withCredentials,
                  rangeChunkSize: params.rangeChunkSize,
                  disableRange: params.disableRange,
                  disableStream: params.disableStream
                });
              }

              resolve(networkStream);
            });
            return Promise.all([workerIdPromise, networkStreamPromise]).then(function (_ref11) {
              var _ref12 = _slicedToArray(_ref11, 2),
                  workerId = _ref12[0],
                  networkStream = _ref12[1];

              if (task.destroyed) {
                throw new Error("Loading aborted");
              }

              var messageHandler = new _message_handler.MessageHandler(docId, workerId, worker.port);
              messageHandler.postMessageTransfers = worker.postMessageTransfers;
              var transport = new WorkerTransport(messageHandler, task, networkStream, params);
              task._transport = transport;
              messageHandler.send("Ready", null);
            });
          })["catch"](task._capability.reject);
          return task;
        }

        function _fetchDocument(worker, source, pdfDataRangeTransport, docId) {
          if (worker.destroyed) {
            return Promise.reject(new Error("Worker was destroyed"));
          }

          if (pdfDataRangeTransport) {
            source.length = pdfDataRangeTransport.length;
            source.initialData = pdfDataRangeTransport.initialData;
            source.progressiveDone = pdfDataRangeTransport.progressiveDone;
            source.contentDispositionFilename = pdfDataRangeTransport.contentDispositionFilename;
          }

          return worker.messageHandler.sendWithPromise("GetDocRequest", {
            docId: docId,
            apiVersion: '2.10.377',
            source: {
              data: source.data,
              url: source.url,
              password: source.password,
              disableAutoFetch: source.disableAutoFetch,
              rangeChunkSize: source.rangeChunkSize,
              length: source.length
            },
            maxImageSize: source.maxImageSize,
            disableFontFace: source.disableFontFace,
            postMessageTransfers: worker.postMessageTransfers,
            docBaseUrl: source.docBaseUrl,
            ignoreErrors: source.ignoreErrors,
            isEvalSupported: source.isEvalSupported,
            fontExtraProperties: source.fontExtraProperties,
            enableXfa: source.enableXfa,
            useSystemFonts: source.useSystemFonts,
            cMapUrl: source.useWorkerFetch ? source.cMapUrl : null,
            standardFontDataUrl: source.useWorkerFetch ? source.standardFontDataUrl : null
          }).then(function (workerId) {
            if (worker.destroyed) {
              throw new Error("Worker was destroyed");
            }

            return workerId;
          });
        }

        var PDFDocumentLoadingTask = function PDFDocumentLoadingTaskClosure() {
          var nextDocumentId = 0;

          var PDFDocumentLoadingTask =
          /*#__PURE__*/
          function () {
            function PDFDocumentLoadingTask() {
              _classCallCheck(this, PDFDocumentLoadingTask);

              this._capability = (0, _util.createPromiseCapability)();
              this._transport = null;
              this._worker = null;
              this.docId = "d" + nextDocumentId++;
              this.destroyed = false;
              this.onPassword = null;
              this.onProgress = null;
              this.onUnsupportedFeature = null;
            }

            _createClass(PDFDocumentLoadingTask, [{
              key: "destroy",
              value: function destroy() {
                var _this7 = this;

                this.destroyed = true;
                var transportDestroyed = !this._transport ? Promise.resolve() : this._transport.destroy();
                return transportDestroyed.then(function () {
                  _this7._transport = null;

                  if (_this7._worker) {
                    _this7._worker.destroy();

                    _this7._worker = null;
                  }
                });
              }
            }, {
              key: "promise",
              get: function get() {
                return this._capability.promise;
              }
            }]);

            return PDFDocumentLoadingTask;
          }();

          return PDFDocumentLoadingTask;
        }();

        var PDFDataRangeTransport =
        /*#__PURE__*/
        function () {
          function PDFDataRangeTransport(length, initialData) {
            var progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var contentDispositionFilename = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

            _classCallCheck(this, PDFDataRangeTransport);

            this.length = length;
            this.initialData = initialData;
            this.progressiveDone = progressiveDone;
            this.contentDispositionFilename = contentDispositionFilename;
            this._rangeListeners = [];
            this._progressListeners = [];
            this._progressiveReadListeners = [];
            this._progressiveDoneListeners = [];
            this._readyCapability = (0, _util.createPromiseCapability)();
          }

          _createClass(PDFDataRangeTransport, [{
            key: "addRangeListener",
            value: function addRangeListener(listener) {
              this._rangeListeners.push(listener);
            }
          }, {
            key: "addProgressListener",
            value: function addProgressListener(listener) {
              this._progressListeners.push(listener);
            }
          }, {
            key: "addProgressiveReadListener",
            value: function addProgressiveReadListener(listener) {
              this._progressiveReadListeners.push(listener);
            }
          }, {
            key: "addProgressiveDoneListener",
            value: function addProgressiveDoneListener(listener) {
              this._progressiveDoneListeners.push(listener);
            }
          }, {
            key: "onDataRange",
            value: function onDataRange(begin, chunk) {
              var _iteratorNormalCompletion4 = true;
              var _didIteratorError4 = false;
              var _iteratorError4 = undefined;

              try {
                for (var _iterator4 = this._rangeListeners[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                  var listener = _step4.value;
                  listener(begin, chunk);
                }
              } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                    _iterator4["return"]();
                  }
                } finally {
                  if (_didIteratorError4) {
                    throw _iteratorError4;
                  }
                }
              }
            }
          }, {
            key: "onDataProgress",
            value: function onDataProgress(loaded, total) {
              var _this8 = this;

              this._readyCapability.promise.then(function () {
                var _iteratorNormalCompletion5 = true;
                var _didIteratorError5 = false;
                var _iteratorError5 = undefined;

                try {
                  for (var _iterator5 = _this8._progressListeners[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var listener = _step5.value;
                    listener(loaded, total);
                  }
                } catch (err) {
                  _didIteratorError5 = true;
                  _iteratorError5 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                      _iterator5["return"]();
                    }
                  } finally {
                    if (_didIteratorError5) {
                      throw _iteratorError5;
                    }
                  }
                }
              });
            }
          }, {
            key: "onDataProgressiveRead",
            value: function onDataProgressiveRead(chunk) {
              var _this9 = this;

              this._readyCapability.promise.then(function () {
                var _iteratorNormalCompletion6 = true;
                var _didIteratorError6 = false;
                var _iteratorError6 = undefined;

                try {
                  for (var _iterator6 = _this9._progressiveReadListeners[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var listener = _step6.value;
                    listener(chunk);
                  }
                } catch (err) {
                  _didIteratorError6 = true;
                  _iteratorError6 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                      _iterator6["return"]();
                    }
                  } finally {
                    if (_didIteratorError6) {
                      throw _iteratorError6;
                    }
                  }
                }
              });
            }
          }, {
            key: "onDataProgressiveDone",
            value: function onDataProgressiveDone() {
              var _this10 = this;

              this._readyCapability.promise.then(function () {
                var _iteratorNormalCompletion7 = true;
                var _didIteratorError7 = false;
                var _iteratorError7 = undefined;

                try {
                  for (var _iterator7 = _this10._progressiveDoneListeners[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var listener = _step7.value;
                    listener();
                  }
                } catch (err) {
                  _didIteratorError7 = true;
                  _iteratorError7 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                      _iterator7["return"]();
                    }
                  } finally {
                    if (_didIteratorError7) {
                      throw _iteratorError7;
                    }
                  }
                }
              });
            }
          }, {
            key: "transportReady",
            value: function transportReady() {
              this._readyCapability.resolve();
            }
          }, {
            key: "requestDataRange",
            value: function requestDataRange(begin, end) {
              (0, _util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange");
            }
          }, {
            key: "abort",
            value: function abort() {}
          }]);

          return PDFDataRangeTransport;
        }();

        exports.PDFDataRangeTransport = PDFDataRangeTransport;

        var PDFDocumentProxy =
        /*#__PURE__*/
        function () {
          function PDFDocumentProxy(pdfInfo, transport) {
            _classCallCheck(this, PDFDocumentProxy);

            this._pdfInfo = pdfInfo;
            this._transport = transport;
            Object.defineProperty(this, "fingerprint", {
              get: function get() {
                (0, _display_utils.deprecated)("`PDFDocumentProxy.fingerprint`, " + "please use `PDFDocumentProxy.fingerprints` instead.");
                return this.fingerprints[0];
              }
            });
          }

          _createClass(PDFDocumentProxy, [{
            key: "getPage",
            value: function getPage(pageNumber) {
              return this._transport.getPage(pageNumber);
            }
          }, {
            key: "getPageIndex",
            value: function getPageIndex(ref) {
              return this._transport.getPageIndex(ref);
            }
          }, {
            key: "getDestinations",
            value: function getDestinations() {
              return this._transport.getDestinations();
            }
          }, {
            key: "getDestination",
            value: function getDestination(id) {
              return this._transport.getDestination(id);
            }
          }, {
            key: "getPageLabels",
            value: function getPageLabels() {
              return this._transport.getPageLabels();
            }
          }, {
            key: "getPageLayout",
            value: function getPageLayout() {
              return this._transport.getPageLayout();
            }
          }, {
            key: "getPageMode",
            value: function getPageMode() {
              return this._transport.getPageMode();
            }
          }, {
            key: "getViewerPreferences",
            value: function getViewerPreferences() {
              return this._transport.getViewerPreferences();
            }
          }, {
            key: "getOpenAction",
            value: function getOpenAction() {
              return this._transport.getOpenAction();
            }
          }, {
            key: "getAttachments",
            value: function getAttachments() {
              return this._transport.getAttachments();
            }
          }, {
            key: "getJavaScript",
            value: function getJavaScript() {
              return this._transport.getJavaScript();
            }
          }, {
            key: "getJSActions",
            value: function getJSActions() {
              return this._transport.getDocJSActions();
            }
          }, {
            key: "getOutline",
            value: function getOutline() {
              return this._transport.getOutline();
            }
          }, {
            key: "getOptionalContentConfig",
            value: function getOptionalContentConfig() {
              return this._transport.getOptionalContentConfig();
            }
          }, {
            key: "getPermissions",
            value: function getPermissions() {
              return this._transport.getPermissions();
            }
          }, {
            key: "getMetadata",
            value: function getMetadata() {
              return this._transport.getMetadata();
            }
          }, {
            key: "getMarkInfo",
            value: function getMarkInfo() {
              return this._transport.getMarkInfo();
            }
          }, {
            key: "getData",
            value: function getData() {
              return this._transport.getData();
            }
          }, {
            key: "getDownloadInfo",
            value: function getDownloadInfo() {
              return this._transport.downloadInfoCapability.promise;
            }
          }, {
            key: "getStats",
            value: function getStats() {
              return this._transport.getStats();
            }
          }, {
            key: "cleanup",
            value: function cleanup() {
              var keepLoadedFonts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);
            }
          }, {
            key: "destroy",
            value: function destroy() {
              return this.loadingTask.destroy();
            }
          }, {
            key: "saveDocument",
            value: function saveDocument() {
              if (this._transport.annotationStorage.size <= 0) {
                (0, _display_utils.deprecated)("saveDocument called while `annotationStorage` is empty, " + "please use the getData-method instead.");
              }

              return this._transport.saveDocument();
            }
          }, {
            key: "getFieldObjects",
            value: function getFieldObjects() {
              return this._transport.getFieldObjects();
            }
          }, {
            key: "hasJSActions",
            value: function hasJSActions() {
              return this._transport.hasJSActions();
            }
          }, {
            key: "getCalculationOrderIds",
            value: function getCalculationOrderIds() {
              return this._transport.getCalculationOrderIds();
            }
          }, {
            key: "annotationStorage",
            get: function get() {
              return this._transport.annotationStorage;
            }
          }, {
            key: "numPages",
            get: function get() {
              return this._pdfInfo.numPages;
            }
          }, {
            key: "fingerprints",
            get: function get() {
              return this._pdfInfo.fingerprints;
            }
          }, {
            key: "isPureXfa",
            get: function get() {
              return !!this._transport._htmlForXfa;
            }
          }, {
            key: "allXfaHtml",
            get: function get() {
              return this._transport._htmlForXfa;
            }
          }, {
            key: "loadingParams",
            get: function get() {
              return this._transport.loadingParams;
            }
          }, {
            key: "loadingTask",
            get: function get() {
              return this._transport.loadingTask;
            }
          }]);

          return PDFDocumentProxy;
        }();

        exports.PDFDocumentProxy = PDFDocumentProxy;

        var PDFPageProxy =
        /*#__PURE__*/
        function () {
          function PDFPageProxy(pageIndex, pageInfo, transport, ownerDocument) {
            var pdfBug = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

            _classCallCheck(this, PDFPageProxy);

            this._pageIndex = pageIndex;
            this._pageInfo = pageInfo;
            this._ownerDocument = ownerDocument;
            this._transport = transport;
            this._stats = pdfBug ? new _display_utils.StatTimer() : null;
            this._pdfBug = pdfBug;
            this.commonObjs = transport.commonObjs;
            this.objs = new PDFObjects();
            this.cleanupAfterRender = false;
            this.pendingCleanup = false;
            this._intentStates = new Map();
            this.destroyed = false;
          }

          _createClass(PDFPageProxy, [{
            key: "getViewport",
            value: function getViewport() {
              var _ref13 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                  scale = _ref13.scale,
                  _ref13$rotation = _ref13.rotation,
                  rotation = _ref13$rotation === void 0 ? this.rotate : _ref13$rotation,
                  _ref13$offsetX = _ref13.offsetX,
                  offsetX = _ref13$offsetX === void 0 ? 0 : _ref13$offsetX,
                  _ref13$offsetY = _ref13.offsetY,
                  offsetY = _ref13$offsetY === void 0 ? 0 : _ref13$offsetY,
                  _ref13$dontFlip = _ref13.dontFlip,
                  dontFlip = _ref13$dontFlip === void 0 ? false : _ref13$dontFlip;

              return new _display_utils.PageViewport({
                viewBox: this.view,
                scale: scale,
                rotation: rotation,
                offsetX: offsetX,
                offsetY: offsetY,
                dontFlip: dontFlip
              });
            }
          }, {
            key: "getAnnotations",
            value: function getAnnotations() {
              var _ref14 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                  _ref14$intent = _ref14.intent,
                  intent = _ref14$intent === void 0 ? null : _ref14$intent;

              var renderingIntent = intent === "display" || intent === "print" ? intent : null;

              if (!this._annotationsPromise || this._annotationsIntent !== renderingIntent) {
                this._annotationsPromise = this._transport.getAnnotations(this._pageIndex, renderingIntent);
                this._annotationsIntent = renderingIntent;
              }

              return this._annotationsPromise;
            }
          }, {
            key: "getJSActions",
            value: function getJSActions() {
              return this._jsActionsPromise || (this._jsActionsPromise = this._transport.getPageJSActions(this._pageIndex));
            }
          }, {
            key: "getXfa",
            value: function () {
              var _getXfa = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee4() {
                var _this$_transport$_htm;

                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        return _context4.abrupt("return", ((_this$_transport$_htm = this._transport._htmlForXfa) === null || _this$_transport$_htm === void 0 ? void 0 : _this$_transport$_htm.children[this._pageIndex]) || null);

                      case 1:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4, this);
              }));

              function getXfa() {
                return _getXfa.apply(this, arguments);
              }

              return getXfa;
            }()
          }, {
            key: "render",
            value: function render(_ref15) {
              var _this11 = this;

              var canvasContext = _ref15.canvasContext,
                  viewport = _ref15.viewport,
                  _ref15$intent = _ref15.intent,
                  intent = _ref15$intent === void 0 ? "display" : _ref15$intent,
                  _ref15$renderInteract = _ref15.renderInteractiveForms,
                  renderInteractiveForms = _ref15$renderInteract === void 0 ? false : _ref15$renderInteract,
                  _ref15$transform = _ref15.transform,
                  transform = _ref15$transform === void 0 ? null : _ref15$transform,
                  _ref15$imageLayer = _ref15.imageLayer,
                  imageLayer = _ref15$imageLayer === void 0 ? null : _ref15$imageLayer,
                  _ref15$canvasFactory = _ref15.canvasFactory,
                  canvasFactory = _ref15$canvasFactory === void 0 ? null : _ref15$canvasFactory,
                  _ref15$background = _ref15.background,
                  background = _ref15$background === void 0 ? null : _ref15$background,
                  _ref15$includeAnnotat = _ref15.includeAnnotationStorage,
                  includeAnnotationStorage = _ref15$includeAnnotat === void 0 ? false : _ref15$includeAnnotat,
                  _ref15$optionalConten = _ref15.optionalContentConfigPromise,
                  optionalContentConfigPromise = _ref15$optionalConten === void 0 ? null : _ref15$optionalConten;

              var _intentState;

              if (this._stats) {
                this._stats.time("Overall");
              }

              var renderingIntent = intent === "print" ? "print" : "display";
              this.pendingCleanup = false;

              if (!optionalContentConfigPromise) {
                optionalContentConfigPromise = this._transport.getOptionalContentConfig();
              }

              var intentState = this._intentStates.get(renderingIntent);

              if (!intentState) {
                intentState = Object.create(null);

                this._intentStates.set(renderingIntent, intentState);
              }

              if (intentState.streamReaderCancelTimeout) {
                clearTimeout(intentState.streamReaderCancelTimeout);
                intentState.streamReaderCancelTimeout = null;
              }

              var canvasFactoryInstance = canvasFactory || new DefaultCanvasFactory({
                ownerDocument: this._ownerDocument
              });
              var annotationStorage = includeAnnotationStorage ? this._transport.annotationStorage.serializable : null;

              if (!intentState.displayReadyCapability) {
                intentState.displayReadyCapability = (0, _util.createPromiseCapability)();
                intentState.operatorList = {
                  fnArray: [],
                  argsArray: [],
                  lastChunk: false
                };

                if (this._stats) {
                  this._stats.time("Page Request");
                }

                this._pumpOperatorList({
                  pageIndex: this._pageIndex,
                  intent: renderingIntent,
                  renderInteractiveForms: renderInteractiveForms === true,
                  annotationStorage: annotationStorage
                });
              }

              var complete = function complete(error) {
                intentState.renderTasks["delete"](internalRenderTask);

                if (_this11.cleanupAfterRender || renderingIntent === "print") {
                  _this11.pendingCleanup = true;
                }

                _this11._tryCleanup();

                if (error) {
                  internalRenderTask.capability.reject(error);

                  _this11._abortOperatorList({
                    intentState: intentState,
                    reason: error
                  });
                } else {
                  internalRenderTask.capability.resolve();
                }

                if (_this11._stats) {
                  _this11._stats.timeEnd("Rendering");

                  _this11._stats.timeEnd("Overall");
                }
              };

              var internalRenderTask = new InternalRenderTask({
                callback: complete,
                params: {
                  canvasContext: canvasContext,
                  viewport: viewport,
                  transform: transform,
                  imageLayer: imageLayer,
                  background: background
                },
                objs: this.objs,
                commonObjs: this.commonObjs,
                operatorList: intentState.operatorList,
                pageIndex: this._pageIndex,
                canvasFactory: canvasFactoryInstance,
                useRequestAnimationFrame: renderingIntent !== "print",
                pdfBug: this._pdfBug
              });
              ((_intentState = intentState).renderTasks || (_intentState.renderTasks = new Set())).add(internalRenderTask);
              var renderTask = internalRenderTask.task;
              Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(function (_ref16) {
                var _ref17 = _slicedToArray(_ref16, 2),
                    transparency = _ref17[0],
                    optionalContentConfig = _ref17[1];

                if (_this11.pendingCleanup) {
                  complete();
                  return;
                }

                if (_this11._stats) {
                  _this11._stats.time("Rendering");
                }

                internalRenderTask.initializeGraphics({
                  transparency: transparency,
                  optionalContentConfig: optionalContentConfig
                });
                internalRenderTask.operatorListChanged();
              })["catch"](complete);
              return renderTask;
            }
          }, {
            key: "getOperatorList",
            value: function getOperatorList() {
              var _ref18 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                  _ref18$intent = _ref18.intent,
                  intent = _ref18$intent === void 0 ? "display" : _ref18$intent;

              function operatorListChanged() {
                if (intentState.operatorList.lastChunk) {
                  intentState.opListReadCapability.resolve(intentState.operatorList);
                  intentState.renderTasks["delete"](opListTask);
                }
              }

              var renderingIntent = "oplist-".concat(intent === "print" ? "print" : "display");

              var intentState = this._intentStates.get(renderingIntent);

              if (!intentState) {
                intentState = Object.create(null);

                this._intentStates.set(renderingIntent, intentState);
              }

              var opListTask;

              if (!intentState.opListReadCapability) {
                var _intentState2;

                opListTask = Object.create(null);
                opListTask.operatorListChanged = operatorListChanged;
                intentState.opListReadCapability = (0, _util.createPromiseCapability)();
                ((_intentState2 = intentState).renderTasks || (_intentState2.renderTasks = new Set())).add(opListTask);
                intentState.operatorList = {
                  fnArray: [],
                  argsArray: [],
                  lastChunk: false
                };

                if (this._stats) {
                  this._stats.time("Page Request");
                }

                this._pumpOperatorList({
                  pageIndex: this._pageIndex,
                  intent: renderingIntent
                });
              }

              return intentState.opListReadCapability.promise;
            }
          }, {
            key: "streamTextContent",
            value: function streamTextContent() {
              var _ref19 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                  _ref19$normalizeWhite = _ref19.normalizeWhitespace,
                  normalizeWhitespace = _ref19$normalizeWhite === void 0 ? false : _ref19$normalizeWhite,
                  _ref19$disableCombine = _ref19.disableCombineTextItems,
                  disableCombineTextItems = _ref19$disableCombine === void 0 ? false : _ref19$disableCombine,
                  _ref19$includeMarkedC = _ref19.includeMarkedContent,
                  includeMarkedContent = _ref19$includeMarkedC === void 0 ? false : _ref19$includeMarkedC;

              var TEXT_CONTENT_CHUNK_SIZE = 100;
              return this._transport.messageHandler.sendWithStream("GetTextContent", {
                pageIndex: this._pageIndex,
                normalizeWhitespace: normalizeWhitespace === true,
                combineTextItems: disableCombineTextItems !== true,
                includeMarkedContent: includeMarkedContent === true
              }, {
                highWaterMark: TEXT_CONTENT_CHUNK_SIZE,
                size: function size(textContent) {
                  return textContent.items.length;
                }
              });
            }
          }, {
            key: "getTextContent",
            value: function getTextContent() {
              var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
              var readableStream = this.streamTextContent(params);
              return new Promise(function (resolve, reject) {
                function pump() {
                  reader.read().then(function (_ref20) {
                    var _textContent$items;

                    var value = _ref20.value,
                        done = _ref20.done;

                    if (done) {
                      resolve(textContent);
                      return;
                    }

                    Object.assign(textContent.styles, value.styles);

                    (_textContent$items = textContent.items).push.apply(_textContent$items, _toConsumableArray(value.items));

                    pump();
                  }, reject);
                }

                var reader = readableStream.getReader();
                var textContent = {
                  items: [],
                  styles: Object.create(null)
                };
                pump();
              });
            }
          }, {
            key: "getStructTree",
            value: function getStructTree() {
              return this._structTreePromise || (this._structTreePromise = this._transport.getStructTree(this._pageIndex));
            }
          }, {
            key: "_destroy",
            value: function _destroy() {
              this.destroyed = true;
              this._transport.pageCache[this._pageIndex] = null;
              var waitOn = [];
              var _iteratorNormalCompletion8 = true;
              var _didIteratorError8 = false;
              var _iteratorError8 = undefined;

              try {
                for (var _iterator8 = this._intentStates[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                  var _step8$value = _slicedToArray(_step8.value, 2),
                      intent = _step8$value[0],
                      intentState = _step8$value[1];

                  this._abortOperatorList({
                    intentState: intentState,
                    reason: new Error("Page was destroyed."),
                    force: true
                  });

                  if (intent.startsWith("oplist-")) {
                    continue;
                  }

                  var _iteratorNormalCompletion9 = true;
                  var _didIteratorError9 = false;
                  var _iteratorError9 = undefined;

                  try {
                    for (var _iterator9 = intentState.renderTasks[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                      var internalRenderTask = _step9.value;
                      waitOn.push(internalRenderTask.completed);
                      internalRenderTask.cancel();
                    }
                  } catch (err) {
                    _didIteratorError9 = true;
                    _iteratorError9 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                        _iterator9["return"]();
                      }
                    } finally {
                      if (_didIteratorError9) {
                        throw _iteratorError9;
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                    _iterator8["return"]();
                  }
                } finally {
                  if (_didIteratorError8) {
                    throw _iteratorError8;
                  }
                }
              }

              this.objs.clear();
              this._annotationsPromise = null;
              this._jsActionsPromise = null;
              this._structTreePromise = null;
              this.pendingCleanup = false;
              return Promise.all(waitOn);
            }
          }, {
            key: "cleanup",
            value: function cleanup() {
              var resetStats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              this.pendingCleanup = true;
              return this._tryCleanup(resetStats);
            }
          }, {
            key: "_tryCleanup",
            value: function _tryCleanup() {
              var resetStats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

              if (!this.pendingCleanup) {
                return false;
              }

              var _iteratorNormalCompletion10 = true;
              var _didIteratorError10 = false;
              var _iteratorError10 = undefined;

              try {
                for (var _iterator10 = this._intentStates.values()[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                  var _step10$value = _step10.value,
                      renderTasks = _step10$value.renderTasks,
                      operatorList = _step10$value.operatorList;

                  if (renderTasks.size > 0 || !operatorList.lastChunk) {
                    return false;
                  }
                }
              } catch (err) {
                _didIteratorError10 = true;
                _iteratorError10 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                    _iterator10["return"]();
                  }
                } finally {
                  if (_didIteratorError10) {
                    throw _iteratorError10;
                  }
                }
              }

              this._intentStates.clear();

              this.objs.clear();
              this._annotationsPromise = null;
              this._jsActionsPromise = null;
              this._structTreePromise = null;

              if (resetStats && this._stats) {
                this._stats = new _display_utils.StatTimer();
              }

              this.pendingCleanup = false;
              return true;
            }
          }, {
            key: "_startRenderPage",
            value: function _startRenderPage(transparency, intent) {
              var intentState = this._intentStates.get(intent);

              if (!intentState) {
                return;
              }

              if (this._stats) {
                this._stats.timeEnd("Page Request");
              }

              if (intentState.displayReadyCapability) {
                intentState.displayReadyCapability.resolve(transparency);
              }
            }
          }, {
            key: "_renderPageChunk",
            value: function _renderPageChunk(operatorListChunk, intentState) {
              for (var i = 0, ii = operatorListChunk.length; i < ii; i++) {
                intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);
                intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);
              }

              intentState.operatorList.lastChunk = operatorListChunk.lastChunk;
              var _iteratorNormalCompletion11 = true;
              var _didIteratorError11 = false;
              var _iteratorError11 = undefined;

              try {
                for (var _iterator11 = intentState.renderTasks[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                  var internalRenderTask = _step11.value;
                  internalRenderTask.operatorListChanged();
                }
              } catch (err) {
                _didIteratorError11 = true;
                _iteratorError11 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion11 && _iterator11["return"] != null) {
                    _iterator11["return"]();
                  }
                } finally {
                  if (_didIteratorError11) {
                    throw _iteratorError11;
                  }
                }
              }

              if (operatorListChunk.lastChunk) {
                this._tryCleanup();
              }
            }
          }, {
            key: "_pumpOperatorList",
            value: function _pumpOperatorList(args) {
              var _this12 = this;

              (0, _util.assert)(args.intent, 'PDFPageProxy._pumpOperatorList: Expected "intent" argument.');

              var readableStream = this._transport.messageHandler.sendWithStream("GetOperatorList", args);

              var reader = readableStream.getReader();

              var intentState = this._intentStates.get(args.intent);

              intentState.streamReader = reader;

              var pump = function pump() {
                reader.read().then(function (_ref21) {
                  var value = _ref21.value,
                      done = _ref21.done;

                  if (done) {
                    intentState.streamReader = null;
                    return;
                  }

                  if (_this12._transport.destroyed) {
                    return;
                  }

                  _this12._renderPageChunk(value, intentState);

                  pump();
                }, function (reason) {
                  intentState.streamReader = null;

                  if (_this12._transport.destroyed) {
                    return;
                  }

                  if (intentState.operatorList) {
                    intentState.operatorList.lastChunk = true;
                    var _iteratorNormalCompletion12 = true;
                    var _didIteratorError12 = false;
                    var _iteratorError12 = undefined;

                    try {
                      for (var _iterator12 = intentState.renderTasks[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                        var internalRenderTask = _step12.value;
                        internalRenderTask.operatorListChanged();
                      }
                    } catch (err) {
                      _didIteratorError12 = true;
                      _iteratorError12 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion12 && _iterator12["return"] != null) {
                          _iterator12["return"]();
                        }
                      } finally {
                        if (_didIteratorError12) {
                          throw _iteratorError12;
                        }
                      }
                    }

                    _this12._tryCleanup();
                  }

                  if (intentState.displayReadyCapability) {
                    intentState.displayReadyCapability.reject(reason);
                  } else if (intentState.opListReadCapability) {
                    intentState.opListReadCapability.reject(reason);
                  } else {
                    throw reason;
                  }
                });
              };

              pump();
            }
          }, {
            key: "_abortOperatorList",
            value: function _abortOperatorList(_ref22) {
              var _this13 = this;

              var intentState = _ref22.intentState,
                  reason = _ref22.reason,
                  _ref22$force = _ref22.force,
                  force = _ref22$force === void 0 ? false : _ref22$force;
              (0, _util.assert)(reason instanceof Error || _typeof(reason) === "object" && reason !== null, 'PDFPageProxy._abortOperatorList: Expected "reason" argument.');

              if (!intentState.streamReader) {
                return;
              }

              if (!force) {
                if (intentState.renderTasks.size > 0) {
                  return;
                }

                if (reason instanceof _display_utils.RenderingCancelledException) {
                  intentState.streamReaderCancelTimeout = setTimeout(function () {
                    _this13._abortOperatorList({
                      intentState: intentState,
                      reason: reason,
                      force: true
                    });

                    intentState.streamReaderCancelTimeout = null;
                  }, RENDERING_CANCELLED_TIMEOUT);
                  return;
                }
              }

              intentState.streamReader.cancel(new _util.AbortException(reason === null || reason === void 0 ? void 0 : reason.message));
              intentState.streamReader = null;

              if (this._transport.destroyed) {
                return;
              }

              var _iteratorNormalCompletion13 = true;
              var _didIteratorError13 = false;
              var _iteratorError13 = undefined;

              try {
                for (var _iterator13 = this._intentStates[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                  var _step13$value = _slicedToArray(_step13.value, 2),
                      intent = _step13$value[0],
                      curIntentState = _step13$value[1];

                  if (curIntentState === intentState) {
                    this._intentStates["delete"](intent);

                    break;
                  }
                }
              } catch (err) {
                _didIteratorError13 = true;
                _iteratorError13 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion13 && _iterator13["return"] != null) {
                    _iterator13["return"]();
                  }
                } finally {
                  if (_didIteratorError13) {
                    throw _iteratorError13;
                  }
                }
              }

              this.cleanup();
            }
          }, {
            key: "pageNumber",
            get: function get() {
              return this._pageIndex + 1;
            }
          }, {
            key: "rotate",
            get: function get() {
              return this._pageInfo.rotate;
            }
          }, {
            key: "ref",
            get: function get() {
              return this._pageInfo.ref;
            }
          }, {
            key: "userUnit",
            get: function get() {
              return this._pageInfo.userUnit;
            }
          }, {
            key: "view",
            get: function get() {
              return this._pageInfo.view;
            }
          }, {
            key: "stats",
            get: function get() {
              return this._stats;
            }
          }]);

          return PDFPageProxy;
        }();

        exports.PDFPageProxy = PDFPageProxy;

        var LoopbackPort =
        /*#__PURE__*/
        function () {
          function LoopbackPort() {
            _classCallCheck(this, LoopbackPort);

            this._listeners = [];
            this._deferred = Promise.resolve(undefined);
          }

          _createClass(LoopbackPort, [{
            key: "postMessage",
            value: function postMessage(obj, transfers) {
              var _this14 = this;

              function cloneValue(value) {
                if (typeof value === "function" || _typeof(value) === "symbol" || value instanceof URL) {
                  throw new Error("LoopbackPort.postMessage - cannot clone: ".concat(value === null || value === void 0 ? void 0 : value.toString()));
                }

                if (_typeof(value) !== "object" || value === null) {
                  return value;
                }

                if (cloned.has(value)) {
                  return cloned.get(value);
                }

                var buffer, result;

                if ((buffer = value.buffer) && (0, _util.isArrayBuffer)(buffer)) {
                  if (transfers !== null && transfers !== void 0 && transfers.includes(buffer)) {
                    result = new value.constructor(buffer, value.byteOffset, value.byteLength);
                  } else {
                    result = new value.constructor(value);
                  }

                  cloned.set(value, result);
                  return result;
                }

                if (value instanceof Map) {
                  result = new Map();
                  cloned.set(value, result);
                  var _iteratorNormalCompletion14 = true;
                  var _didIteratorError14 = false;
                  var _iteratorError14 = undefined;

                  try {
                    for (var _iterator14 = value[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                      var _step14$value = _slicedToArray(_step14.value, 2),
                          key = _step14$value[0],
                          val = _step14$value[1];

                      result.set(key, cloneValue(val));
                    }
                  } catch (err) {
                    _didIteratorError14 = true;
                    _iteratorError14 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion14 && _iterator14["return"] != null) {
                        _iterator14["return"]();
                      }
                    } finally {
                      if (_didIteratorError14) {
                        throw _iteratorError14;
                      }
                    }
                  }

                  return result;
                }

                if (value instanceof Set) {
                  result = new Set();
                  cloned.set(value, result);
                  var _iteratorNormalCompletion15 = true;
                  var _didIteratorError15 = false;
                  var _iteratorError15 = undefined;

                  try {
                    for (var _iterator15 = value[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                      var _val = _step15.value;
                      result.add(cloneValue(_val));
                    }
                  } catch (err) {
                    _didIteratorError15 = true;
                    _iteratorError15 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion15 && _iterator15["return"] != null) {
                        _iterator15["return"]();
                      }
                    } finally {
                      if (_didIteratorError15) {
                        throw _iteratorError15;
                      }
                    }
                  }

                  return result;
                }

                result = Array.isArray(value) ? [] : Object.create(null);
                cloned.set(value, result);

                for (var i in value) {
                  var _value$hasOwnProperty;

                  var desc = void 0,
                      p = value;

                  while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {
                    p = Object.getPrototypeOf(p);
                  }

                  if (typeof desc.value === "undefined") {
                    continue;
                  }

                  if (typeof desc.value === "function" && !((_value$hasOwnProperty = value.hasOwnProperty) !== null && _value$hasOwnProperty !== void 0 && _value$hasOwnProperty.call(value, i))) {
                    continue;
                  }

                  result[i] = cloneValue(desc.value);
                }

                return result;
              }

              var cloned = new WeakMap();
              var event = {
                data: cloneValue(obj)
              };

              this._deferred.then(function () {
                var _iteratorNormalCompletion16 = true;
                var _didIteratorError16 = false;
                var _iteratorError16 = undefined;

                try {
                  for (var _iterator16 = _this14._listeners[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
                    var listener = _step16.value;
                    listener.call(_this14, event);
                  }
                } catch (err) {
                  _didIteratorError16 = true;
                  _iteratorError16 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion16 && _iterator16["return"] != null) {
                      _iterator16["return"]();
                    }
                  } finally {
                    if (_didIteratorError16) {
                      throw _iteratorError16;
                    }
                  }
                }
              });
            }
          }, {
            key: "addEventListener",
            value: function addEventListener(name, listener) {
              this._listeners.push(listener);
            }
          }, {
            key: "removeEventListener",
            value: function removeEventListener(name, listener) {
              var i = this._listeners.indexOf(listener);

              this._listeners.splice(i, 1);
            }
          }, {
            key: "terminate",
            value: function terminate() {
              this._listeners.length = 0;
            }
          }]);

          return LoopbackPort;
        }();

        exports.LoopbackPort = LoopbackPort;

        var PDFWorker = function PDFWorkerClosure() {
          var pdfWorkerPorts = new WeakMap();
          var isWorkerDisabled = false;
          var fallbackWorkerSrc;
          var nextFakeWorkerId = 0;
          var fakeWorkerCapability;

          if (_is_node.isNodeJS && "function" === "function") {
            isWorkerDisabled = true;
            fallbackWorkerSrc = "./pdf.worker.js";
          } else if ((typeof document === "undefined" ? "undefined" : _typeof(document)) === "object" && "currentScript" in document) {
            var _document$currentScri;

            var pdfjsFilePath = (_document$currentScri = document.currentScript) === null || _document$currentScri === void 0 ? void 0 : _document$currentScri.src;

            if (pdfjsFilePath) {
              fallbackWorkerSrc = pdfjsFilePath.replace(/(\.(?:min\.)?js)(\?.*)?$/i, ".worker$1$2");
            }
          }

          function _getWorkerSrc() {
            if (_worker_options.GlobalWorkerOptions.workerSrc) {
              return _worker_options.GlobalWorkerOptions.workerSrc;
            }

            if (typeof fallbackWorkerSrc !== "undefined") {
              if (!_is_node.isNodeJS) {
                (0, _display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.');
              }

              return fallbackWorkerSrc;
            }

            throw new Error('No "GlobalWorkerOptions.workerSrc" specified.');
          }

          function getMainThreadWorkerMessageHandler() {
            var mainWorkerMessageHandler;

            try {
              var _globalThis$pdfjsWork;

              mainWorkerMessageHandler = (_globalThis$pdfjsWork = globalThis.pdfjsWorker) === null || _globalThis$pdfjsWork === void 0 ? void 0 : _globalThis$pdfjsWork.WorkerMessageHandler;
            } catch (ex) {}

            return mainWorkerMessageHandler || null;
          }

          function setupFakeWorkerGlobal() {
            if (fakeWorkerCapability) {
              return fakeWorkerCapability.promise;
            }

            fakeWorkerCapability = (0, _util.createPromiseCapability)();

            var loader =
            /*#__PURE__*/
            function () {
              var _ref23 = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee5() {
                var mainWorkerMessageHandler, worker;
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                  while (1) {
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        mainWorkerMessageHandler = getMainThreadWorkerMessageHandler();

                        if (!mainWorkerMessageHandler) {
                          _context5.next = 3;
                          break;
                        }

                        return _context5.abrupt("return", mainWorkerMessageHandler);

                      case 3:
                        if (!(_is_node.isNodeJS && "function" === "function")) {
                          _context5.next = 6;
                          break;
                        }

                        worker = eval("require")(_getWorkerSrc());
                        return _context5.abrupt("return", worker.WorkerMessageHandler);

                      case 6:
                        _context5.next = 8;
                        return (0, _display_utils.loadScript)(_getWorkerSrc());

                      case 8:
                        return _context5.abrupt("return", window.pdfjsWorker.WorkerMessageHandler);

                      case 9:
                      case "end":
                        return _context5.stop();
                    }
                  }
                }, _callee5);
              }));

              return function loader() {
                return _ref23.apply(this, arguments);
              };
            }();

            loader().then(fakeWorkerCapability.resolve, fakeWorkerCapability.reject);
            return fakeWorkerCapability.promise;
          }

          function createCDNWrapper(url) {
            var wrapper = "importScripts('" + url + "');";
            return URL.createObjectURL(new Blob([wrapper]));
          }

          var PDFWorker =
          /*#__PURE__*/
          function () {
            function PDFWorker() {
              var _ref24 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                  _ref24$name = _ref24.name,
                  name = _ref24$name === void 0 ? null : _ref24$name,
                  _ref24$port = _ref24.port,
                  port = _ref24$port === void 0 ? null : _ref24$port,
                  _ref24$verbosity = _ref24.verbosity,
                  verbosity = _ref24$verbosity === void 0 ? (0, _util.getVerbosityLevel)() : _ref24$verbosity;

              _classCallCheck(this, PDFWorker);

              if (port && pdfWorkerPorts.has(port)) {
                throw new Error("Cannot use more than one PDFWorker per port");
              }

              this.name = name;
              this.destroyed = false;
              this.postMessageTransfers = true;
              this.verbosity = verbosity;
              this._readyCapability = (0, _util.createPromiseCapability)();
              this._port = null;
              this._webWorker = null;
              this._messageHandler = null;

              if (port) {
                pdfWorkerPorts.set(port, this);

                this._initializeFromPort(port);

                return;
              }

              this._initialize();
            }

            _createClass(PDFWorker, [{
              key: "_initializeFromPort",
              value: function _initializeFromPort(port) {
                this._port = port;
                this._messageHandler = new _message_handler.MessageHandler("main", "worker", port);

                this._messageHandler.on("ready", function () {});

                this._readyCapability.resolve();
              }
            }, {
              key: "_initialize",
              value: function _initialize() {
                var _this15 = this;

                if (typeof Worker !== "undefined" && !isWorkerDisabled && !getMainThreadWorkerMessageHandler()) {
                  var workerSrc = _getWorkerSrc();

                  try {
                    if (!(0, _util.isSameOrigin)(window.location.href, workerSrc)) {
                      workerSrc = createCDNWrapper(new URL(workerSrc, window.location).href);
                    }

                    var worker = new Worker(workerSrc);
                    var messageHandler = new _message_handler.MessageHandler("main", "worker", worker);

                    var terminateEarly = function terminateEarly() {
                      worker.removeEventListener("error", onWorkerError);
                      messageHandler.destroy();
                      worker.terminate();

                      if (_this15.destroyed) {
                        _this15._readyCapability.reject(new Error("Worker was destroyed"));
                      } else {
                        _this15._setupFakeWorker();
                      }
                    };

                    var onWorkerError = function onWorkerError() {
                      if (!_this15._webWorker) {
                        terminateEarly();
                      }
                    };

                    worker.addEventListener("error", onWorkerError);
                    messageHandler.on("test", function (data) {
                      worker.removeEventListener("error", onWorkerError);

                      if (_this15.destroyed) {
                        terminateEarly();
                        return;
                      }

                      if (data) {
                        _this15._messageHandler = messageHandler;
                        _this15._port = worker;
                        _this15._webWorker = worker;

                        if (!data.supportTransfers) {
                          _this15.postMessageTransfers = false;
                        }

                        _this15._readyCapability.resolve();

                        messageHandler.send("configure", {
                          verbosity: _this15.verbosity
                        });
                      } else {
                        _this15._setupFakeWorker();

                        messageHandler.destroy();
                        worker.terminate();
                      }
                    });
                    messageHandler.on("ready", function (data) {
                      worker.removeEventListener("error", onWorkerError);

                      if (_this15.destroyed) {
                        terminateEarly();
                        return;
                      }

                      try {
                        sendTest();
                      } catch (e) {
                        _this15._setupFakeWorker();
                      }
                    });

                    var sendTest = function sendTest() {
                      var testObj = new Uint8Array([_this15.postMessageTransfers ? 255 : 0]);

                      try {
                        messageHandler.send("test", testObj, [testObj.buffer]);
                      } catch (ex) {
                        (0, _util.warn)("Cannot use postMessage transfers.");
                        testObj[0] = 0;
                        messageHandler.send("test", testObj);
                      }
                    };

                    sendTest();
                    return;
                  } catch (e) {
                    (0, _util.info)("The worker has been disabled.");
                  }
                }

                this._setupFakeWorker();
              }
            }, {
              key: "_setupFakeWorker",
              value: function _setupFakeWorker() {
                var _this16 = this;

                if (!isWorkerDisabled) {
                  (0, _util.warn)("Setting up fake worker.");
                  isWorkerDisabled = true;
                }

                setupFakeWorkerGlobal().then(function (WorkerMessageHandler) {
                  if (_this16.destroyed) {
                    _this16._readyCapability.reject(new Error("Worker was destroyed"));

                    return;
                  }

                  var port = new LoopbackPort();
                  _this16._port = port;
                  var id = "fake" + nextFakeWorkerId++;
                  var workerHandler = new _message_handler.MessageHandler(id + "_worker", id, port);
                  WorkerMessageHandler.setup(workerHandler, port);
                  var messageHandler = new _message_handler.MessageHandler(id, id + "_worker", port);
                  _this16._messageHandler = messageHandler;

                  _this16._readyCapability.resolve();

                  messageHandler.send("configure", {
                    verbosity: _this16.verbosity
                  });
                })["catch"](function (reason) {
                  _this16._readyCapability.reject(new Error("Setting up fake worker failed: \"".concat(reason.message, "\".")));
                });
              }
            }, {
              key: "destroy",
              value: function destroy() {
                this.destroyed = true;

                if (this._webWorker) {
                  this._webWorker.terminate();

                  this._webWorker = null;
                }

                pdfWorkerPorts["delete"](this._port);
                this._port = null;

                if (this._messageHandler) {
                  this._messageHandler.destroy();

                  this._messageHandler = null;
                }
              }
            }, {
              key: "promise",
              get: function get() {
                return this._readyCapability.promise;
              }
            }, {
              key: "port",
              get: function get() {
                return this._port;
              }
            }, {
              key: "messageHandler",
              get: function get() {
                return this._messageHandler;
              }
            }], [{
              key: "fromPort",
              value: function fromPort(params) {
                if (!params || !params.port) {
                  throw new Error("PDFWorker.fromPort - invalid method signature.");
                }

                if (pdfWorkerPorts.has(params.port)) {
                  return pdfWorkerPorts.get(params.port);
                }

                return new PDFWorker(params);
              }
            }, {
              key: "getWorkerSrc",
              value: function getWorkerSrc() {
                return _getWorkerSrc();
              }
            }]);

            return PDFWorker;
          }();

          return PDFWorker;
        }();

        exports.PDFWorker = PDFWorker;

        var WorkerTransport =
        /*#__PURE__*/
        function () {
          function WorkerTransport(messageHandler, loadingTask, networkStream, params) {
            _classCallCheck(this, WorkerTransport);

            this.messageHandler = messageHandler;
            this.loadingTask = loadingTask;
            this.commonObjs = new PDFObjects();
            this.fontLoader = new _font_loader.FontLoader({
              docId: loadingTask.docId,
              onUnsupportedFeature: this._onUnsupportedFeature.bind(this),
              ownerDocument: params.ownerDocument,
              styleElement: params.styleElement
            });
            this._params = params;

            if (!params.useWorkerFetch) {
              this.CMapReaderFactory = new params.CMapReaderFactory({
                baseUrl: params.cMapUrl,
                isCompressed: params.cMapPacked
              });
              this.StandardFontDataFactory = new params.StandardFontDataFactory({
                baseUrl: params.standardFontDataUrl
              });
            }

            this.destroyed = false;
            this.destroyCapability = null;
            this._passwordCapability = null;
            this._networkStream = networkStream;
            this._fullReader = null;
            this._lastProgress = null;
            this.pageCache = [];
            this.pagePromises = [];
            this.downloadInfoCapability = (0, _util.createPromiseCapability)();
            this.setupMessageHandler();
          }

          _createClass(WorkerTransport, [{
            key: "destroy",
            value: function destroy() {
              var _this17 = this;

              if (this.destroyCapability) {
                return this.destroyCapability.promise;
              }

              this.destroyed = true;
              this.destroyCapability = (0, _util.createPromiseCapability)();

              if (this._passwordCapability) {
                this._passwordCapability.reject(new Error("Worker was destroyed during onPassword callback"));
              }

              var waitOn = [];
              var _iteratorNormalCompletion17 = true;
              var _didIteratorError17 = false;
              var _iteratorError17 = undefined;

              try {
                for (var _iterator17 = this.pageCache[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
                  var page = _step17.value;

                  if (page) {
                    waitOn.push(page._destroy());
                  }
                }
              } catch (err) {
                _didIteratorError17 = true;
                _iteratorError17 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion17 && _iterator17["return"] != null) {
                    _iterator17["return"]();
                  }
                } finally {
                  if (_didIteratorError17) {
                    throw _iteratorError17;
                  }
                }
              }

              this.pageCache.length = 0;
              this.pagePromises.length = 0;

              if (this.hasOwnProperty("annotationStorage")) {
                this.annotationStorage.resetModified();
              }

              var terminated = this.messageHandler.sendWithPromise("Terminate", null);
              waitOn.push(terminated);
              Promise.all(waitOn).then(function () {
                _this17.commonObjs.clear();

                _this17.fontLoader.clear();

                _this17._hasJSActionsPromise = null;

                if (_this17._networkStream) {
                  _this17._networkStream.cancelAllRequests(new _util.AbortException("Worker was terminated."));
                }

                if (_this17.messageHandler) {
                  _this17.messageHandler.destroy();

                  _this17.messageHandler = null;
                }

                _this17.destroyCapability.resolve();
              }, this.destroyCapability.reject);
              return this.destroyCapability.promise;
            }
          }, {
            key: "setupMessageHandler",
            value: function setupMessageHandler() {
              var _this18 = this;

              var messageHandler = this.messageHandler,
                  loadingTask = this.loadingTask;
              messageHandler.on("GetReader", function (data, sink) {
                (0, _util.assert)(_this18._networkStream, "GetReader - no `IPDFStream` instance available.");
                _this18._fullReader = _this18._networkStream.getFullReader();

                _this18._fullReader.onProgress = function (evt) {
                  _this18._lastProgress = {
                    loaded: evt.loaded,
                    total: evt.total
                  };
                };

                sink.onPull = function () {
                  _this18._fullReader.read().then(function (_ref25) {
                    var value = _ref25.value,
                        done = _ref25.done;

                    if (done) {
                      sink.close();
                      return;
                    }

                    (0, _util.assert)((0, _util.isArrayBuffer)(value), "GetReader - expected an ArrayBuffer.");
                    sink.enqueue(new Uint8Array(value), 1, [value]);
                  })["catch"](function (reason) {
                    sink.error(reason);
                  });
                };

                sink.onCancel = function (reason) {
                  _this18._fullReader.cancel(reason);

                  sink.ready["catch"](function (readyReason) {
                    if (_this18.destroyed) {
                      return;
                    }

                    throw readyReason;
                  });
                };
              });
              messageHandler.on("ReaderHeadersReady", function (data) {
                var headersCapability = (0, _util.createPromiseCapability)();
                var fullReader = _this18._fullReader;
                fullReader.headersReady.then(function () {
                  if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {
                    if (_this18._lastProgress && loadingTask.onProgress) {
                      loadingTask.onProgress(_this18._lastProgress);
                    }

                    fullReader.onProgress = function (evt) {
                      if (loadingTask.onProgress) {
                        loadingTask.onProgress({
                          loaded: evt.loaded,
                          total: evt.total
                        });
                      }
                    };
                  }

                  headersCapability.resolve({
                    isStreamingSupported: fullReader.isStreamingSupported,
                    isRangeSupported: fullReader.isRangeSupported,
                    contentLength: fullReader.contentLength
                  });
                }, headersCapability.reject);
                return headersCapability.promise;
              });
              messageHandler.on("GetRangeReader", function (data, sink) {
                (0, _util.assert)(_this18._networkStream, "GetRangeReader - no `IPDFStream` instance available.");

                var rangeReader = _this18._networkStream.getRangeReader(data.begin, data.end);

                if (!rangeReader) {
                  sink.close();
                  return;
                }

                sink.onPull = function () {
                  rangeReader.read().then(function (_ref26) {
                    var value = _ref26.value,
                        done = _ref26.done;

                    if (done) {
                      sink.close();
                      return;
                    }

                    (0, _util.assert)((0, _util.isArrayBuffer)(value), "GetRangeReader - expected an ArrayBuffer.");
                    sink.enqueue(new Uint8Array(value), 1, [value]);
                  })["catch"](function (reason) {
                    sink.error(reason);
                  });
                };

                sink.onCancel = function (reason) {
                  rangeReader.cancel(reason);
                  sink.ready["catch"](function (readyReason) {
                    if (_this18.destroyed) {
                      return;
                    }

                    throw readyReason;
                  });
                };
              });
              messageHandler.on("GetDoc", function (_ref27) {
                var pdfInfo = _ref27.pdfInfo;
                _this18._numPages = pdfInfo.numPages;
                _this18._htmlForXfa = pdfInfo.htmlForXfa;
                delete pdfInfo.htmlForXfa;

                loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, _this18));
              });
              messageHandler.on("DocException", function (ex) {
                var reason;

                switch (ex.name) {
                  case "PasswordException":
                    reason = new _util.PasswordException(ex.message, ex.code);
                    break;

                  case "InvalidPDFException":
                    reason = new _util.InvalidPDFException(ex.message);
                    break;

                  case "MissingPDFException":
                    reason = new _util.MissingPDFException(ex.message);
                    break;

                  case "UnexpectedResponseException":
                    reason = new _util.UnexpectedResponseException(ex.message, ex.status);
                    break;

                  case "UnknownErrorException":
                    reason = new _util.UnknownErrorException(ex.message, ex.details);
                    break;
                }

                if (!(reason instanceof Error)) {
                  var msg = "DocException - expected a valid Error.";
                  (0, _util.warn)(msg);
                }

                loadingTask._capability.reject(reason);
              });
              messageHandler.on("PasswordRequest", function (exception) {
                _this18._passwordCapability = (0, _util.createPromiseCapability)();

                if (loadingTask.onPassword) {
                  var updatePassword = function updatePassword(password) {
                    _this18._passwordCapability.resolve({
                      password: password
                    });
                  };

                  try {
                    loadingTask.onPassword(updatePassword, exception.code);
                  } catch (ex) {
                    _this18._passwordCapability.reject(ex);
                  }
                } else {
                  _this18._passwordCapability.reject(new _util.PasswordException(exception.message, exception.code));
                }

                return _this18._passwordCapability.promise;
              });
              messageHandler.on("DataLoaded", function (data) {
                if (loadingTask.onProgress) {
                  loadingTask.onProgress({
                    loaded: data.length,
                    total: data.length
                  });
                }

                _this18.downloadInfoCapability.resolve(data);
              });
              messageHandler.on("StartRenderPage", function (data) {
                if (_this18.destroyed) {
                  return;
                }

                var page = _this18.pageCache[data.pageIndex];

                page._startRenderPage(data.transparency, data.intent);
              });
              messageHandler.on("commonobj", function (data) {
                var _globalThis$FontInspe;

                if (_this18.destroyed) {
                  return;
                }

                var _data = _slicedToArray(data, 3),
                    id = _data[0],
                    type = _data[1],
                    exportedData = _data[2];

                if (_this18.commonObjs.has(id)) {
                  return;
                }

                switch (type) {
                  case "Font":
                    var params = _this18._params;

                    if ("error" in exportedData) {
                      var exportedError = exportedData.error;
                      (0, _util.warn)("Error during font loading: ".concat(exportedError));

                      _this18.commonObjs.resolve(id, exportedError);

                      break;
                    }

                    var fontRegistry = null;

                    if (params.pdfBug && (_globalThis$FontInspe = globalThis.FontInspector) !== null && _globalThis$FontInspe !== void 0 && _globalThis$FontInspe.enabled) {
                      fontRegistry = {
                        registerFont: function registerFont(font, url) {
                          globalThis.FontInspector.fontAdded(font, url);
                        }
                      };
                    }

                    var font = new _font_loader.FontFaceObject(exportedData, {
                      isEvalSupported: params.isEvalSupported,
                      disableFontFace: params.disableFontFace,
                      ignoreErrors: params.ignoreErrors,
                      onUnsupportedFeature: _this18._onUnsupportedFeature.bind(_this18),
                      fontRegistry: fontRegistry
                    });

                    _this18.fontLoader.bind(font)["catch"](function (reason) {
                      return messageHandler.sendWithPromise("FontFallback", {
                        id: id
                      });
                    })["finally"](function () {
                      if (!params.fontExtraProperties && font.data) {
                        font.data = null;
                      }

                      _this18.commonObjs.resolve(id, font);
                    });

                    break;

                  case "FontPath":
                  case "Image":
                    _this18.commonObjs.resolve(id, exportedData);

                    break;

                  default:
                    throw new Error("Got unknown common object type ".concat(type));
                }
              });
              messageHandler.on("obj", function (data) {
                var _imageData$data;

                if (_this18.destroyed) {
                  return undefined;
                }

                var _data2 = _slicedToArray(data, 4),
                    id = _data2[0],
                    pageIndex = _data2[1],
                    type = _data2[2],
                    imageData = _data2[3];

                var pageProxy = _this18.pageCache[pageIndex];

                if (pageProxy.objs.has(id)) {
                  return undefined;
                }

                switch (type) {
                  case "Image":
                    pageProxy.objs.resolve(id, imageData);
                    var MAX_IMAGE_SIZE_TO_STORE = 8000000;

                    if ((imageData === null || imageData === void 0 ? void 0 : (_imageData$data = imageData.data) === null || _imageData$data === void 0 ? void 0 : _imageData$data.length) > MAX_IMAGE_SIZE_TO_STORE) {
                      pageProxy.cleanupAfterRender = true;
                    }

                    break;

                  case "Pattern":
                    pageProxy.objs.resolve(id, imageData);
                    break;

                  default:
                    throw new Error("Got unknown object type ".concat(type));
                }

                return undefined;
              });
              messageHandler.on("DocProgress", function (data) {
                if (_this18.destroyed) {
                  return;
                }

                if (loadingTask.onProgress) {
                  loadingTask.onProgress({
                    loaded: data.loaded,
                    total: data.total
                  });
                }
              });
              messageHandler.on("UnsupportedFeature", this._onUnsupportedFeature.bind(this));
              messageHandler.on("FetchBuiltInCMap", function (data) {
                if (_this18.destroyed) {
                  return Promise.reject(new Error("Worker was destroyed."));
                }

                if (!_this18.CMapReaderFactory) {
                  return Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter."));
                }

                return _this18.CMapReaderFactory.fetch(data);
              });
              messageHandler.on("FetchStandardFontData", function (data) {
                if (_this18.destroyed) {
                  return Promise.reject(new Error("Worker was destroyed."));
                }

                if (!_this18.StandardFontDataFactory) {
                  return Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter."));
                }

                return _this18.StandardFontDataFactory.fetch(data);
              });
            }
          }, {
            key: "_onUnsupportedFeature",
            value: function _onUnsupportedFeature(_ref28) {
              var featureId = _ref28.featureId;

              if (this.destroyed) {
                return;
              }

              if (this.loadingTask.onUnsupportedFeature) {
                this.loadingTask.onUnsupportedFeature(featureId);
              }
            }
          }, {
            key: "getData",
            value: function getData() {
              return this.messageHandler.sendWithPromise("GetData", null);
            }
          }, {
            key: "getPage",
            value: function getPage(pageNumber) {
              var _this19 = this;

              if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {
                return Promise.reject(new Error("Invalid page request"));
              }

              var pageIndex = pageNumber - 1;

              if (pageIndex in this.pagePromises) {
                return this.pagePromises[pageIndex];
              }

              var promise = this.messageHandler.sendWithPromise("GetPage", {
                pageIndex: pageIndex
              }).then(function (pageInfo) {
                if (_this19.destroyed) {
                  throw new Error("Transport destroyed");
                }

                var page = new PDFPageProxy(pageIndex, pageInfo, _this19, _this19._params.ownerDocument, _this19._params.pdfBug);
                _this19.pageCache[pageIndex] = page;
                return page;
              });
              this.pagePromises[pageIndex] = promise;
              return promise;
            }
          }, {
            key: "getPageIndex",
            value: function getPageIndex(ref) {
              return this.messageHandler.sendWithPromise("GetPageIndex", {
                ref: ref
              })["catch"](function (reason) {
                return Promise.reject(new Error(reason));
              });
            }
          }, {
            key: "getAnnotations",
            value: function getAnnotations(pageIndex, intent) {
              return this.messageHandler.sendWithPromise("GetAnnotations", {
                pageIndex: pageIndex,
                intent: intent
              });
            }
          }, {
            key: "saveDocument",
            value: function saveDocument() {
              var _ref29,
                  _this$_fullReader,
                  _this20 = this;

              return this.messageHandler.sendWithPromise("SaveDocument", {
                isPureXfa: !!this._htmlForXfa,
                numPages: this._numPages,
                annotationStorage: this.annotationStorage.serializable,
                filename: (_ref29 = (_this$_fullReader = this._fullReader) === null || _this$_fullReader === void 0 ? void 0 : _this$_fullReader.filename) !== null && _ref29 !== void 0 ? _ref29 : null
              })["finally"](function () {
                _this20.annotationStorage.resetModified();
              });
            }
          }, {
            key: "getFieldObjects",
            value: function getFieldObjects() {
              return this.messageHandler.sendWithPromise("GetFieldObjects", null);
            }
          }, {
            key: "hasJSActions",
            value: function hasJSActions() {
              return this._hasJSActionsPromise || (this._hasJSActionsPromise = this.messageHandler.sendWithPromise("HasJSActions", null));
            }
          }, {
            key: "getCalculationOrderIds",
            value: function getCalculationOrderIds() {
              return this.messageHandler.sendWithPromise("GetCalculationOrderIds", null);
            }
          }, {
            key: "getDestinations",
            value: function getDestinations() {
              return this.messageHandler.sendWithPromise("GetDestinations", null);
            }
          }, {
            key: "getDestination",
            value: function getDestination(id) {
              if (typeof id !== "string") {
                return Promise.reject(new Error("Invalid destination request."));
              }

              return this.messageHandler.sendWithPromise("GetDestination", {
                id: id
              });
            }
          }, {
            key: "getPageLabels",
            value: function getPageLabels() {
              return this.messageHandler.sendWithPromise("GetPageLabels", null);
            }
          }, {
            key: "getPageLayout",
            value: function getPageLayout() {
              return this.messageHandler.sendWithPromise("GetPageLayout", null);
            }
          }, {
            key: "getPageMode",
            value: function getPageMode() {
              return this.messageHandler.sendWithPromise("GetPageMode", null);
            }
          }, {
            key: "getViewerPreferences",
            value: function getViewerPreferences() {
              return this.messageHandler.sendWithPromise("GetViewerPreferences", null);
            }
          }, {
            key: "getOpenAction",
            value: function getOpenAction() {
              return this.messageHandler.sendWithPromise("GetOpenAction", null);
            }
          }, {
            key: "getAttachments",
            value: function getAttachments() {
              return this.messageHandler.sendWithPromise("GetAttachments", null);
            }
          }, {
            key: "getJavaScript",
            value: function getJavaScript() {
              return this.messageHandler.sendWithPromise("GetJavaScript", null);
            }
          }, {
            key: "getDocJSActions",
            value: function getDocJSActions() {
              return this.messageHandler.sendWithPromise("GetDocJSActions", null);
            }
          }, {
            key: "getPageJSActions",
            value: function getPageJSActions(pageIndex) {
              return this.messageHandler.sendWithPromise("GetPageJSActions", {
                pageIndex: pageIndex
              });
            }
          }, {
            key: "getStructTree",
            value: function getStructTree(pageIndex) {
              return this.messageHandler.sendWithPromise("GetStructTree", {
                pageIndex: pageIndex
              });
            }
          }, {
            key: "getOutline",
            value: function getOutline() {
              return this.messageHandler.sendWithPromise("GetOutline", null);
            }
          }, {
            key: "getOptionalContentConfig",
            value: function getOptionalContentConfig() {
              return this.messageHandler.sendWithPromise("GetOptionalContentConfig", null).then(function (results) {
                return new _optional_content_config.OptionalContentConfig(results);
              });
            }
          }, {
            key: "getPermissions",
            value: function getPermissions() {
              return this.messageHandler.sendWithPromise("GetPermissions", null);
            }
          }, {
            key: "getMetadata",
            value: function getMetadata() {
              var _this21 = this;

              return this.messageHandler.sendWithPromise("GetMetadata", null).then(function (results) {
                var _ref30, _this21$_fullReader, _ref31, _this21$_fullReader2;

                return {
                  info: results[0],
                  metadata: results[1] ? new _metadata.Metadata(results[1]) : null,
                  contentDispositionFilename: (_ref30 = (_this21$_fullReader = _this21._fullReader) === null || _this21$_fullReader === void 0 ? void 0 : _this21$_fullReader.filename) !== null && _ref30 !== void 0 ? _ref30 : null,
                  contentLength: (_ref31 = (_this21$_fullReader2 = _this21._fullReader) === null || _this21$_fullReader2 === void 0 ? void 0 : _this21$_fullReader2.contentLength) !== null && _ref31 !== void 0 ? _ref31 : null
                };
              });
            }
          }, {
            key: "getMarkInfo",
            value: function getMarkInfo() {
              return this.messageHandler.sendWithPromise("GetMarkInfo", null);
            }
          }, {
            key: "getStats",
            value: function getStats() {
              return this.messageHandler.sendWithPromise("GetStats", null);
            }
          }, {
            key: "startCleanup",
            value: function () {
              var _startCleanup = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee6() {
                var keepLoadedFonts,
                    i,
                    ii,
                    page,
                    cleanupSuccessful,
                    _args6 = arguments;
                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                  while (1) {
                    switch (_context6.prev = _context6.next) {
                      case 0:
                        keepLoadedFonts = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : false;
                        _context6.next = 3;
                        return this.messageHandler.sendWithPromise("Cleanup", null);

                      case 3:
                        if (!this.destroyed) {
                          _context6.next = 5;
                          break;
                        }

                        return _context6.abrupt("return");

                      case 5:
                        i = 0, ii = this.pageCache.length;

                      case 6:
                        if (!(i < ii)) {
                          _context6.next = 16;
                          break;
                        }

                        page = this.pageCache[i];

                        if (page) {
                          _context6.next = 10;
                          break;
                        }

                        return _context6.abrupt("continue", 13);

                      case 10:
                        cleanupSuccessful = page.cleanup();

                        if (cleanupSuccessful) {
                          _context6.next = 13;
                          break;
                        }

                        throw new Error("startCleanup: Page ".concat(i + 1, " is currently rendering."));

                      case 13:
                        i++;
                        _context6.next = 6;
                        break;

                      case 16:
                        this.commonObjs.clear();

                        if (!keepLoadedFonts) {
                          this.fontLoader.clear();
                        }

                        this._hasJSActionsPromise = null;

                      case 19:
                      case "end":
                        return _context6.stop();
                    }
                  }
                }, _callee6, this);
              }));

              function startCleanup() {
                return _startCleanup.apply(this, arguments);
              }

              return startCleanup;
            }()
          }, {
            key: "annotationStorage",
            get: function get() {
              return (0, _util.shadow)(this, "annotationStorage", new _annotation_storage.AnnotationStorage());
            }
          }, {
            key: "loadingParams",
            get: function get() {
              var params = this._params;
              return (0, _util.shadow)(this, "loadingParams", {
                disableAutoFetch: params.disableAutoFetch
              });
            }
          }]);

          return WorkerTransport;
        }();

        var PDFObjects =
        /*#__PURE__*/
        function () {
          function PDFObjects() {
            _classCallCheck(this, PDFObjects);

            this._objs = Object.create(null);
          }

          _createClass(PDFObjects, [{
            key: "_ensureObj",
            value: function _ensureObj(objId) {
              if (this._objs[objId]) {
                return this._objs[objId];
              }

              return this._objs[objId] = {
                capability: (0, _util.createPromiseCapability)(),
                data: null,
                resolved: false
              };
            }
          }, {
            key: "get",
            value: function get(objId) {
              var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

              if (callback) {
                this._ensureObj(objId).capability.promise.then(callback);

                return null;
              }

              var obj = this._objs[objId];

              if (!obj || !obj.resolved) {
                throw new Error("Requesting object that isn't resolved yet ".concat(objId, "."));
              }

              return obj.data;
            }
          }, {
            key: "has",
            value: function has(objId) {
              var obj = this._objs[objId];
              return (obj === null || obj === void 0 ? void 0 : obj.resolved) || false;
            }
          }, {
            key: "resolve",
            value: function resolve(objId, data) {
              var obj = this._ensureObj(objId);

              obj.resolved = true;
              obj.data = data;
              obj.capability.resolve(data);
            }
          }, {
            key: "clear",
            value: function clear() {
              this._objs = Object.create(null);
            }
          }]);

          return PDFObjects;
        }();

        var RenderTask =
        /*#__PURE__*/
        function () {
          function RenderTask(internalRenderTask) {
            _classCallCheck(this, RenderTask);

            this._internalRenderTask = internalRenderTask;
            this.onContinue = null;
          }

          _createClass(RenderTask, [{
            key: "cancel",
            value: function cancel() {
              this._internalRenderTask.cancel();
            }
          }, {
            key: "promise",
            get: function get() {
              return this._internalRenderTask.capability.promise;
            }
          }]);

          return RenderTask;
        }();

        var InternalRenderTask = function InternalRenderTaskClosure() {
          var canvasInRendering = new WeakSet();

          var InternalRenderTask =
          /*#__PURE__*/
          function () {
            function InternalRenderTask(_ref32) {
              var callback = _ref32.callback,
                  params = _ref32.params,
                  objs = _ref32.objs,
                  commonObjs = _ref32.commonObjs,
                  operatorList = _ref32.operatorList,
                  pageIndex = _ref32.pageIndex,
                  canvasFactory = _ref32.canvasFactory,
                  _ref32$useRequestAnim = _ref32.useRequestAnimationFrame,
                  useRequestAnimationFrame = _ref32$useRequestAnim === void 0 ? false : _ref32$useRequestAnim,
                  _ref32$pdfBug = _ref32.pdfBug,
                  pdfBug = _ref32$pdfBug === void 0 ? false : _ref32$pdfBug;

              _classCallCheck(this, InternalRenderTask);

              this.callback = callback;
              this.params = params;
              this.objs = objs;
              this.commonObjs = commonObjs;
              this.operatorListIdx = null;
              this.operatorList = operatorList;
              this._pageIndex = pageIndex;
              this.canvasFactory = canvasFactory;
              this._pdfBug = pdfBug;
              this.running = false;
              this.graphicsReadyCallback = null;
              this.graphicsReady = false;
              this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== "undefined";
              this.cancelled = false;
              this.capability = (0, _util.createPromiseCapability)();
              this.task = new RenderTask(this);
              this._cancelBound = this.cancel.bind(this);
              this._continueBound = this._continue.bind(this);
              this._scheduleNextBound = this._scheduleNext.bind(this);
              this._nextBound = this._next.bind(this);
              this._canvas = params.canvasContext.canvas;
            }

            _createClass(InternalRenderTask, [{
              key: "initializeGraphics",
              value: function initializeGraphics(_ref33) {
                var _globalThis$StepperMa;

                var _ref33$transparency = _ref33.transparency,
                    transparency = _ref33$transparency === void 0 ? false : _ref33$transparency,
                    optionalContentConfig = _ref33.optionalContentConfig;

                if (this.cancelled) {
                  return;
                }

                if (this._canvas) {
                  if (canvasInRendering.has(this._canvas)) {
                    throw new Error("Cannot use the same canvas during multiple render() operations. " + "Use different canvas or ensure previous operations were " + "cancelled or completed.");
                  }

                  canvasInRendering.add(this._canvas);
                }

                if (this._pdfBug && (_globalThis$StepperMa = globalThis.StepperManager) !== null && _globalThis$StepperMa !== void 0 && _globalThis$StepperMa.enabled) {
                  this.stepper = globalThis.StepperManager.create(this._pageIndex);
                  this.stepper.init(this.operatorList);
                  this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();
                }

                var _this$params = this.params,
                    canvasContext = _this$params.canvasContext,
                    viewport = _this$params.viewport,
                    transform = _this$params.transform,
                    imageLayer = _this$params.imageLayer,
                    background = _this$params.background;
                this.gfx = new _canvas.CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, imageLayer, optionalContentConfig);
                this.gfx.beginDrawing({
                  transform: transform,
                  viewport: viewport,
                  transparency: transparency,
                  background: background
                });
                this.operatorListIdx = 0;
                this.graphicsReady = true;

                if (this.graphicsReadyCallback) {
                  this.graphicsReadyCallback();
                }
              }
            }, {
              key: "cancel",
              value: function cancel() {
                var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                this.running = false;
                this.cancelled = true;

                if (this.gfx) {
                  this.gfx.endDrawing();
                }

                if (this._canvas) {
                  canvasInRendering["delete"](this._canvas);
                }

                this.callback(error || new _display_utils.RenderingCancelledException("Rendering cancelled, page ".concat(this._pageIndex + 1), "canvas"));
              }
            }, {
              key: "operatorListChanged",
              value: function operatorListChanged() {
                if (!this.graphicsReady) {
                  if (!this.graphicsReadyCallback) {
                    this.graphicsReadyCallback = this._continueBound;
                  }

                  return;
                }

                if (this.stepper) {
                  this.stepper.updateOperatorList(this.operatorList);
                }

                if (this.running) {
                  return;
                }

                this._continue();
              }
            }, {
              key: "_continue",
              value: function _continue() {
                this.running = true;

                if (this.cancelled) {
                  return;
                }

                if (this.task.onContinue) {
                  this.task.onContinue(this._scheduleNextBound);
                } else {
                  this._scheduleNext();
                }
              }
            }, {
              key: "_scheduleNext",
              value: function _scheduleNext() {
                var _this22 = this;

                if (this._useRequestAnimationFrame) {
                  window.requestAnimationFrame(function () {
                    _this22._nextBound()["catch"](_this22._cancelBound);
                  });
                } else {
                  Promise.resolve().then(this._nextBound)["catch"](this._cancelBound);
                }
              }
            }, {
              key: "_next",
              value: function () {
                var _next2 = _asyncToGenerator(
                /*#__PURE__*/
                regeneratorRuntime.mark(function _callee7() {
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          if (!this.cancelled) {
                            _context7.next = 2;
                            break;
                          }

                          return _context7.abrupt("return");

                        case 2:
                          this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);

                          if (this.operatorListIdx === this.operatorList.argsArray.length) {
                            this.running = false;

                            if (this.operatorList.lastChunk) {
                              this.gfx.endDrawing();

                              if (this._canvas) {
                                canvasInRendering["delete"](this._canvas);
                              }

                              this.callback();
                            }
                          }

                        case 4:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7, this);
                }));

                function _next() {
                  return _next2.apply(this, arguments);
                }

                return _next;
              }()
            }, {
              key: "completed",
              get: function get() {
                return this.capability.promise["catch"](function () {});
              }
            }]);

            return InternalRenderTask;
          }();

          return InternalRenderTask;
        }();

        var version = '2.10.377';
        exports.version = version;
        var build = '156762c48';
        exports.build = build;
        /***/
      },
      /* 7 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FontLoader = exports.FontFaceObject = void 0;

        var _util = __w_pdfjs_require__(2);

        var BaseFontLoader =
        /*#__PURE__*/
        function () {
          function BaseFontLoader(_ref34) {
            var docId = _ref34.docId,
                onUnsupportedFeature = _ref34.onUnsupportedFeature,
                _ref34$ownerDocument = _ref34.ownerDocument,
                ownerDocument = _ref34$ownerDocument === void 0 ? globalThis.document : _ref34$ownerDocument,
                _ref34$styleElement = _ref34.styleElement,
                styleElement = _ref34$styleElement === void 0 ? null : _ref34$styleElement;

            _classCallCheck(this, BaseFontLoader);

            if (this.constructor === BaseFontLoader) {
              (0, _util.unreachable)("Cannot initialize BaseFontLoader.");
            }

            this.docId = docId;
            this._onUnsupportedFeature = onUnsupportedFeature;
            this._document = ownerDocument;
            this.nativeFontFaces = [];
            this.styleElement = null;
          }

          _createClass(BaseFontLoader, [{
            key: "addNativeFontFace",
            value: function addNativeFontFace(nativeFontFace) {
              this.nativeFontFaces.push(nativeFontFace);

              this._document.fonts.add(nativeFontFace);
            }
          }, {
            key: "insertRule",
            value: function insertRule(rule) {
              var styleElement = this.styleElement;

              if (!styleElement) {
                styleElement = this.styleElement = this._document.createElement("style");
                styleElement.id = "PDFJS_FONT_STYLE_TAG_".concat(this.docId);

                this._document.documentElement.getElementsByTagName("head")[0].appendChild(styleElement);
              }

              var styleSheet = styleElement.sheet;
              styleSheet.insertRule(rule, styleSheet.cssRules.length);
            }
          }, {
            key: "clear",
            value: function clear() {
              var _iteratorNormalCompletion18 = true;
              var _didIteratorError18 = false;
              var _iteratorError18 = undefined;

              try {
                for (var _iterator18 = this.nativeFontFaces[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
                  var nativeFontFace = _step18.value;

                  this._document.fonts["delete"](nativeFontFace);
                }
              } catch (err) {
                _didIteratorError18 = true;
                _iteratorError18 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion18 && _iterator18["return"] != null) {
                    _iterator18["return"]();
                  }
                } finally {
                  if (_didIteratorError18) {
                    throw _iteratorError18;
                  }
                }
              }

              this.nativeFontFaces.length = 0;

              if (this.styleElement) {
                this.styleElement.remove();
                this.styleElement = null;
              }
            }
          }, {
            key: "bind",
            value: function () {
              var _bind = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee8(font) {
                var _this23 = this;

                var nativeFontFace, rule;
                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                  while (1) {
                    switch (_context8.prev = _context8.next) {
                      case 0:
                        if (!(font.attached || font.missingFile)) {
                          _context8.next = 2;
                          break;
                        }

                        return _context8.abrupt("return");

                      case 2:
                        font.attached = true;

                        if (!this.isFontLoadingAPISupported) {
                          _context8.next = 19;
                          break;
                        }

                        nativeFontFace = font.createNativeFontFace();

                        if (!nativeFontFace) {
                          _context8.next = 18;
                          break;
                        }

                        this.addNativeFontFace(nativeFontFace);
                        _context8.prev = 7;
                        _context8.next = 10;
                        return nativeFontFace.loaded;

                      case 10:
                        _context8.next = 18;
                        break;

                      case 12:
                        _context8.prev = 12;
                        _context8.t0 = _context8["catch"](7);

                        this._onUnsupportedFeature({
                          featureId: _util.UNSUPPORTED_FEATURES.errorFontLoadNative
                        });

                        (0, _util.warn)("Failed to load font '".concat(nativeFontFace.family, "': '").concat(_context8.t0, "'."));
                        font.disableFontFace = true;
                        throw _context8.t0;

                      case 18:
                        return _context8.abrupt("return");

                      case 19:
                        rule = font.createFontFaceRule();

                        if (!rule) {
                          _context8.next = 26;
                          break;
                        }

                        this.insertRule(rule);

                        if (!this.isSyncFontLoadingSupported) {
                          _context8.next = 24;
                          break;
                        }

                        return _context8.abrupt("return");

                      case 24:
                        _context8.next = 26;
                        return new Promise(function (resolve) {
                          var request = _this23._queueLoadingCallback(resolve);

                          _this23._prepareFontLoadEvent([rule], [font], request);
                        });

                      case 26:
                      case "end":
                        return _context8.stop();
                    }
                  }
                }, _callee8, this, [[7, 12]]);
              }));

              function bind(_x4) {
                return _bind.apply(this, arguments);
              }

              return bind;
            }()
          }, {
            key: "_queueLoadingCallback",
            value: function _queueLoadingCallback(callback) {
              (0, _util.unreachable)("Abstract method `_queueLoadingCallback`.");
            }
          }, {
            key: "_prepareFontLoadEvent",
            value: function _prepareFontLoadEvent(rules, fontsToLoad, request) {
              (0, _util.unreachable)("Abstract method `_prepareFontLoadEvent`.");
            }
          }, {
            key: "isFontLoadingAPISupported",
            get: function get() {
              var _this$_document;

              var hasFonts = !!((_this$_document = this._document) !== null && _this$_document !== void 0 && _this$_document.fonts);
              return (0, _util.shadow)(this, "isFontLoadingAPISupported", hasFonts);
            }
          }, {
            key: "isSyncFontLoadingSupported",
            get: function get() {
              (0, _util.unreachable)("Abstract method `isSyncFontLoadingSupported`.");
            }
          }, {
            key: "_loadTestFont",
            get: function get() {
              (0, _util.unreachable)("Abstract method `_loadTestFont`.");
            }
          }]);

          return BaseFontLoader;
        }();

        var FontLoader;
        exports.FontLoader = FontLoader;
        {
          exports.FontLoader = FontLoader =
          /*#__PURE__*/
          function (_BaseFontLoader) {
            _inherits(GenericFontLoader, _BaseFontLoader);

            function GenericFontLoader(params) {
              var _this24;

              _classCallCheck(this, GenericFontLoader);

              _this24 = _possibleConstructorReturn(this, _getPrototypeOf(GenericFontLoader).call(this, params));
              _this24.loadingContext = {
                requests: [],
                nextRequestId: 0
              };
              _this24.loadTestFontId = 0;
              return _this24;
            }

            _createClass(GenericFontLoader, [{
              key: "_queueLoadingCallback",
              value: function _queueLoadingCallback(callback) {
                function completeRequest() {
                  (0, _util.assert)(!request.done, "completeRequest() cannot be called twice.");
                  request.done = true;

                  while (context.requests.length > 0 && context.requests[0].done) {
                    var otherRequest = context.requests.shift();
                    setTimeout(otherRequest.callback, 0);
                  }
                }

                var context = this.loadingContext;
                var request = {
                  id: "pdfjs-font-loading-".concat(context.nextRequestId++),
                  done: false,
                  complete: completeRequest,
                  callback: callback
                };
                context.requests.push(request);
                return request;
              }
            }, {
              key: "_prepareFontLoadEvent",
              value: function _prepareFontLoadEvent(rules, fonts, request) {
                var _this25 = this;

                function int32(data, offset) {
                  return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;
                }

                function spliceString(s, offset, remove, insert) {
                  var chunk1 = s.substring(0, offset);
                  var chunk2 = s.substring(offset + remove);
                  return chunk1 + insert + chunk2;
                }

                var i, ii;

                var canvas = this._document.createElement("canvas");

                canvas.width = 1;
                canvas.height = 1;
                var ctx = canvas.getContext("2d");
                var called = 0;

                function isFontReady(name, callback) {
                  called++;

                  if (called > 30) {
                    (0, _util.warn)("Load test font never loaded.");
                    callback();
                    return;
                  }

                  ctx.font = "30px " + name;
                  ctx.fillText(".", 0, 20);
                  var imageData = ctx.getImageData(0, 0, 1, 1);

                  if (imageData.data[3] > 0) {
                    callback();
                    return;
                  }

                  setTimeout(isFontReady.bind(null, name, callback));
                }

                var loadTestFontId = "lt".concat(Date.now()).concat(this.loadTestFontId++);
                var data = this._loadTestFont;
                var COMMENT_OFFSET = 976;
                data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);
                var CFF_CHECKSUM_OFFSET = 16;
                var XXXX_VALUE = 0x58585858;
                var checksum = int32(data, CFF_CHECKSUM_OFFSET);

                for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {
                  checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;
                }

                if (i < loadTestFontId.length) {
                  checksum = checksum - XXXX_VALUE + int32(loadTestFontId + "XXX", i) | 0;
                }

                data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _util.string32)(checksum));
                var url = "url(data:font/opentype;base64,".concat(btoa(data), ");");
                var rule = "@font-face {font-family:\"".concat(loadTestFontId, "\";src:").concat(url, "}");
                this.insertRule(rule);
                var names = [];
                var _iteratorNormalCompletion19 = true;
                var _didIteratorError19 = false;
                var _iteratorError19 = undefined;

                try {
                  for (var _iterator19 = fonts[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
                    var font = _step19.value;
                    names.push(font.loadedName);
                  }
                } catch (err) {
                  _didIteratorError19 = true;
                  _iteratorError19 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion19 && _iterator19["return"] != null) {
                      _iterator19["return"]();
                    }
                  } finally {
                    if (_didIteratorError19) {
                      throw _iteratorError19;
                    }
                  }
                }

                names.push(loadTestFontId);

                var div = this._document.createElement("div");

                div.style.visibility = "hidden";
                div.style.width = div.style.height = "10px";
                div.style.position = "absolute";
                div.style.top = div.style.left = "0px";

                for (var _i4 = 0, _names = names; _i4 < _names.length; _i4++) {
                  var name = _names[_i4];

                  var span = this._document.createElement("span");

                  span.textContent = "Hi";
                  span.style.fontFamily = name;
                  div.appendChild(span);
                }

                this._document.body.appendChild(div);

                isFontReady(loadTestFontId, function () {
                  _this25._document.body.removeChild(div);

                  request.complete();
                });
              }
            }, {
              key: "isSyncFontLoadingSupported",
              get: function get() {
                var supported = false;

                if (typeof navigator === "undefined") {
                  supported = true;
                } else {
                  var m = /Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(navigator.userAgent);

                  if ((m === null || m === void 0 ? void 0 : m[1]) >= 14) {
                    supported = true;
                  }
                }

                return (0, _util.shadow)(this, "isSyncFontLoadingSupported", supported);
              }
            }, {
              key: "_loadTestFont",
              get: function get() {
                var getLoadTestFont = function getLoadTestFont() {
                  return atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA" + "FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA" + "ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA" + "AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1" + "AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD" + "6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM" + "AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D" + "IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA" + "AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA" + "AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB" + "AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY" + "AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA" + "AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA" + "AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC" + "AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3" + "Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj" + "FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");
                };

                return (0, _util.shadow)(this, "_loadTestFont", getLoadTestFont());
              }
            }]);

            return GenericFontLoader;
          }(BaseFontLoader);
        }

        var FontFaceObject =
        /*#__PURE__*/
        function () {
          function FontFaceObject(translatedData, _ref35) {
            var _ref35$isEvalSupporte = _ref35.isEvalSupported,
                isEvalSupported = _ref35$isEvalSupporte === void 0 ? true : _ref35$isEvalSupporte,
                _ref35$disableFontFac = _ref35.disableFontFace,
                disableFontFace = _ref35$disableFontFac === void 0 ? false : _ref35$disableFontFac,
                _ref35$ignoreErrors = _ref35.ignoreErrors,
                ignoreErrors = _ref35$ignoreErrors === void 0 ? false : _ref35$ignoreErrors,
                onUnsupportedFeature = _ref35.onUnsupportedFeature,
                _ref35$fontRegistry = _ref35.fontRegistry,
                fontRegistry = _ref35$fontRegistry === void 0 ? null : _ref35$fontRegistry;

            _classCallCheck(this, FontFaceObject);

            this.compiledGlyphs = Object.create(null);

            for (var i in translatedData) {
              this[i] = translatedData[i];
            }

            this.isEvalSupported = isEvalSupported !== false;
            this.disableFontFace = disableFontFace === true;
            this.ignoreErrors = ignoreErrors === true;
            this._onUnsupportedFeature = onUnsupportedFeature;
            this.fontRegistry = fontRegistry;
          }

          _createClass(FontFaceObject, [{
            key: "createNativeFontFace",
            value: function createNativeFontFace() {
              if (!this.data || this.disableFontFace) {
                return null;
              }

              var nativeFontFace;

              if (!this.cssFontInfo) {
                nativeFontFace = new FontFace(this.loadedName, this.data, {});
              } else {
                var css = {
                  weight: this.cssFontInfo.fontWeight
                };

                if (this.cssFontInfo.italicAngle) {
                  css.style = "oblique ".concat(this.cssFontInfo.italicAngle, "deg");
                }

                nativeFontFace = new FontFace(this.cssFontInfo.fontFamily, this.data, css);
              }

              if (this.fontRegistry) {
                this.fontRegistry.registerFont(this);
              }

              return nativeFontFace;
            }
          }, {
            key: "createFontFaceRule",
            value: function createFontFaceRule() {
              if (!this.data || this.disableFontFace) {
                return null;
              }

              var data = (0, _util.bytesToString)(this.data);
              var url = "url(data:".concat(this.mimetype, ";base64,").concat(btoa(data), ");");
              var rule;

              if (!this.cssFontInfo) {
                rule = "@font-face {font-family:\"".concat(this.loadedName, "\";src:").concat(url, "}");
              } else {
                var css = "font-weight: ".concat(this.cssFontInfo.fontWeight, ";");

                if (this.cssFontInfo.italicAngle) {
                  css += "font-style: oblique ".concat(this.cssFontInfo.italicAngle, "deg;");
                }

                rule = "@font-face {font-family:\"".concat(this.cssFontInfo.fontFamily, "\";").concat(css, "src:").concat(url, "}");
              }

              if (this.fontRegistry) {
                this.fontRegistry.registerFont(this, url);
              }

              return rule;
            }
          }, {
            key: "getPathGenerator",
            value: function getPathGenerator(objs, character) {
              if (this.compiledGlyphs[character] !== undefined) {
                return this.compiledGlyphs[character];
              }

              var cmds;

              try {
                cmds = objs.get(this.loadedName + "_path_" + character);
              } catch (ex) {
                if (!this.ignoreErrors) {
                  throw ex;
                }

                this._onUnsupportedFeature({
                  featureId: _util.UNSUPPORTED_FEATURES.errorFontGetPath
                });

                (0, _util.warn)("getPathGenerator - ignoring character: \"".concat(ex, "\"."));
                return this.compiledGlyphs[character] = function (c, size) {};
              }

              if (this.isEvalSupported && _util.IsEvalSupportedCached.value) {
                var jsBuf = [];
                var _iteratorNormalCompletion20 = true;
                var _didIteratorError20 = false;
                var _iteratorError20 = undefined;

                try {
                  for (var _iterator20 = cmds[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
                    var current = _step20.value;
                    var args = current.args !== undefined ? current.args.join(",") : "";
                    jsBuf.push("c.", current.cmd, "(", args, ");\n");
                  }
                } catch (err) {
                  _didIteratorError20 = true;
                  _iteratorError20 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion20 && _iterator20["return"] != null) {
                      _iterator20["return"]();
                    }
                  } finally {
                    if (_didIteratorError20) {
                      throw _iteratorError20;
                    }
                  }
                }

                return this.compiledGlyphs[character] = new Function("c", "size", jsBuf.join(""));
              }

              return this.compiledGlyphs[character] = function (c, size) {
                var _iteratorNormalCompletion21 = true;
                var _didIteratorError21 = false;
                var _iteratorError21 = undefined;

                try {
                  for (var _iterator21 = cmds[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {
                    var _current = _step21.value;

                    if (_current.cmd === "scale") {
                      _current.args = [size, -size];
                    }

                    c[_current.cmd].apply(c, _current.args);
                  }
                } catch (err) {
                  _didIteratorError21 = true;
                  _iteratorError21 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion21 && _iterator21["return"] != null) {
                      _iterator21["return"]();
                    }
                  } finally {
                    if (_didIteratorError21) {
                      throw _iteratorError21;
                    }
                  }
                }
              };
            }
          }]);

          return FontFaceObject;
        }();

        exports.FontFaceObject = FontFaceObject;
        /***/
      },
      /* 8 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.NodeStandardFontDataFactory = exports.NodeCMapReaderFactory = exports.NodeCanvasFactory = void 0;

        var _base_factory = __w_pdfjs_require__(5);

        var _is_node = __w_pdfjs_require__(4);

        var _util = __w_pdfjs_require__(2);

        var NodeCanvasFactory = function NodeCanvasFactory() {
          _classCallCheck(this, NodeCanvasFactory);

          (0, _util.unreachable)("Not implemented: NodeCanvasFactory");
        };

        exports.NodeCanvasFactory = NodeCanvasFactory;

        var NodeCMapReaderFactory = function NodeCMapReaderFactory() {
          _classCallCheck(this, NodeCMapReaderFactory);

          (0, _util.unreachable)("Not implemented: NodeCMapReaderFactory");
        };

        exports.NodeCMapReaderFactory = NodeCMapReaderFactory;

        var NodeStandardFontDataFactory = function NodeStandardFontDataFactory() {
          _classCallCheck(this, NodeStandardFontDataFactory);

          (0, _util.unreachable)("Not implemented: NodeStandardFontDataFactory");
        };

        exports.NodeStandardFontDataFactory = NodeStandardFontDataFactory;

        if (_is_node.isNodeJS) {
          var fetchData = function fetchData(url) {
            return new Promise(function (resolve, reject) {
              var fs = __webpack_require__(174);

              fs.readFile(url, function (error, data) {
                if (error || !data) {
                  reject(new Error(error));
                  return;
                }

                resolve(new Uint8Array(data));
              });
            });
          };

          exports.NodeCanvasFactory = NodeCanvasFactory =
          /*#__PURE__*/
          function (_base_factory$BaseCan2) {
            _inherits(NodeCanvasFactory, _base_factory$BaseCan2);

            function NodeCanvasFactory() {
              _classCallCheck(this, NodeCanvasFactory);

              return _possibleConstructorReturn(this, _getPrototypeOf(NodeCanvasFactory).apply(this, arguments));
            }

            _createClass(NodeCanvasFactory, [{
              key: "_createCanvas",
              value: function _createCanvas(width, height) {
                var Canvas = __webpack_require__(175);

                return Canvas.createCanvas(width, height);
              }
            }]);

            return NodeCanvasFactory;
          }(_base_factory.BaseCanvasFactory);

          exports.NodeCMapReaderFactory = NodeCMapReaderFactory =
          /*#__PURE__*/
          function (_base_factory$BaseCMa2) {
            _inherits(NodeCMapReaderFactory, _base_factory$BaseCMa2);

            function NodeCMapReaderFactory() {
              _classCallCheck(this, NodeCMapReaderFactory);

              return _possibleConstructorReturn(this, _getPrototypeOf(NodeCMapReaderFactory).apply(this, arguments));
            }

            _createClass(NodeCMapReaderFactory, [{
              key: "_fetchData",
              value: function _fetchData(url, compressionType) {
                return fetchData(url).then(function (data) {
                  return {
                    cMapData: data,
                    compressionType: compressionType
                  };
                });
              }
            }]);

            return NodeCMapReaderFactory;
          }(_base_factory.BaseCMapReaderFactory);

          exports.NodeStandardFontDataFactory = NodeStandardFontDataFactory =
          /*#__PURE__*/
          function (_base_factory$BaseSta2) {
            _inherits(NodeStandardFontDataFactory, _base_factory$BaseSta2);

            function NodeStandardFontDataFactory() {
              _classCallCheck(this, NodeStandardFontDataFactory);

              return _possibleConstructorReturn(this, _getPrototypeOf(NodeStandardFontDataFactory).apply(this, arguments));
            }

            _createClass(NodeStandardFontDataFactory, [{
              key: "_fetchData",
              value: function _fetchData(url) {
                return fetchData(url);
              }
            }]);

            return NodeStandardFontDataFactory;
          }(_base_factory.BaseStandardFontDataFactory);
        }
        /***/

      },
      /* 9 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.AnnotationStorage = void 0;

        var _util = __w_pdfjs_require__(2);

        var AnnotationStorage =
        /*#__PURE__*/
        function () {
          function AnnotationStorage() {
            _classCallCheck(this, AnnotationStorage);

            this._storage = new Map();
            this._modified = false;
            this.onSetModified = null;
            this.onResetModified = null;
          }

          _createClass(AnnotationStorage, [{
            key: "getValue",
            value: function getValue(key, defaultValue) {
              var obj = this._storage.get(key);

              return obj !== undefined ? obj : defaultValue;
            }
          }, {
            key: "setValue",
            value: function setValue(key, value) {
              var obj = this._storage.get(key);

              var modified = false;

              if (obj !== undefined) {
                for (var _i5 = 0, _Object$entries = Object.entries(value); _i5 < _Object$entries.length; _i5++) {
                  var _Object$entries$_i = _slicedToArray(_Object$entries[_i5], 2),
                      entry = _Object$entries$_i[0],
                      val = _Object$entries$_i[1];

                  if (obj[entry] !== val) {
                    modified = true;
                    obj[entry] = val;
                  }
                }
              } else {
                this._storage.set(key, value);

                modified = true;
              }

              if (modified) {
                this._setModified();
              }
            }
          }, {
            key: "getAll",
            value: function getAll() {
              return this._storage.size > 0 ? (0, _util.objectFromMap)(this._storage) : null;
            }
          }, {
            key: "_setModified",
            value: function _setModified() {
              if (!this._modified) {
                this._modified = true;

                if (typeof this.onSetModified === "function") {
                  this.onSetModified();
                }
              }
            }
          }, {
            key: "resetModified",
            value: function resetModified() {
              if (this._modified) {
                this._modified = false;

                if (typeof this.onResetModified === "function") {
                  this.onResetModified();
                }
              }
            }
          }, {
            key: "size",
            get: function get() {
              return this._storage.size;
            }
          }, {
            key: "serializable",
            get: function get() {
              return this._storage.size > 0 ? this._storage : null;
            }
          }]);

          return AnnotationStorage;
        }();

        exports.AnnotationStorage = AnnotationStorage;
        /***/
      },
      /* 10 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanvasGraphics = void 0;

        var _util = __w_pdfjs_require__(2);

        var _pattern_helper = __w_pdfjs_require__(11);

        var MIN_FONT_SIZE = 16;
        var MAX_FONT_SIZE = 100;
        var MAX_GROUP_SIZE = 4096;
        var COMPILE_TYPE3_GLYPHS = true;
        var MAX_SIZE_TO_COMPILE = 1000;
        var FULL_CHUNK_HEIGHT = 16;
        var LINEWIDTH_SCALE_FACTOR = 1.000001;

        function addContextCurrentTransform(ctx) {
          if (ctx.mozCurrentTransform) {
            return;
          }

          ctx._originalSave = ctx.save;
          ctx._originalRestore = ctx.restore;
          ctx._originalRotate = ctx.rotate;
          ctx._originalScale = ctx.scale;
          ctx._originalTranslate = ctx.translate;
          ctx._originalTransform = ctx.transform;
          ctx._originalSetTransform = ctx.setTransform;
          ctx._originalResetTransform = ctx.resetTransform;
          ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];
          ctx._transformStack = [];

          try {
            var desc = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(ctx), "lineWidth");
            ctx._setLineWidth = desc.set;
            ctx._getLineWidth = desc.get;
            Object.defineProperty(ctx, "lineWidth", {
              set: function setLineWidth(width) {
                this._setLineWidth(width * LINEWIDTH_SCALE_FACTOR);
              },
              get: function getLineWidth() {
                return this._getLineWidth();
              }
            });
          } catch (_) {}

          Object.defineProperty(ctx, "mozCurrentTransform", {
            get: function getCurrentTransform() {
              return this._transformMatrix;
            }
          });
          Object.defineProperty(ctx, "mozCurrentTransformInverse", {
            get: function getCurrentTransformInverse() {
              var _this$_transformMatri = _slicedToArray(this._transformMatrix, 6),
                  a = _this$_transformMatri[0],
                  b = _this$_transformMatri[1],
                  c = _this$_transformMatri[2],
                  d = _this$_transformMatri[3],
                  e = _this$_transformMatri[4],
                  f = _this$_transformMatri[5];

              var ad_bc = a * d - b * c;
              var bc_ad = b * c - a * d;
              return [d / ad_bc, b / bc_ad, c / bc_ad, a / ad_bc, (d * e - c * f) / bc_ad, (b * e - a * f) / ad_bc];
            }
          });

          ctx.save = function ctxSave() {
            var old = this._transformMatrix;

            this._transformStack.push(old);

            this._transformMatrix = old.slice(0, 6);

            this._originalSave();
          };

          ctx.restore = function ctxRestore() {
            var prev = this._transformStack.pop();

            if (prev) {
              this._transformMatrix = prev;

              this._originalRestore();
            }
          };

          ctx.translate = function ctxTranslate(x, y) {
            var m = this._transformMatrix;
            m[4] = m[0] * x + m[2] * y + m[4];
            m[5] = m[1] * x + m[3] * y + m[5];

            this._originalTranslate(x, y);
          };

          ctx.scale = function ctxScale(x, y) {
            var m = this._transformMatrix;
            m[0] *= x;
            m[1] *= x;
            m[2] *= y;
            m[3] *= y;

            this._originalScale(x, y);
          };

          ctx.transform = function ctxTransform(a, b, c, d, e, f) {
            var m = this._transformMatrix;
            this._transformMatrix = [m[0] * a + m[2] * b, m[1] * a + m[3] * b, m[0] * c + m[2] * d, m[1] * c + m[3] * d, m[0] * e + m[2] * f + m[4], m[1] * e + m[3] * f + m[5]];

            ctx._originalTransform(a, b, c, d, e, f);
          };

          ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {
            this._transformMatrix = [a, b, c, d, e, f];

            ctx._originalSetTransform(a, b, c, d, e, f);
          };

          ctx.resetTransform = function ctxResetTransform() {
            this._transformMatrix = [1, 0, 0, 1, 0, 0];

            ctx._originalResetTransform();
          };

          ctx.rotate = function ctxRotate(angle) {
            var cosValue = Math.cos(angle);
            var sinValue = Math.sin(angle);
            var m = this._transformMatrix;
            this._transformMatrix = [m[0] * cosValue + m[2] * sinValue, m[1] * cosValue + m[3] * sinValue, m[0] * -sinValue + m[2] * cosValue, m[1] * -sinValue + m[3] * cosValue, m[4], m[5]];

            this._originalRotate(angle);
          };
        }

        var CachedCanvases =
        /*#__PURE__*/
        function () {
          function CachedCanvases(canvasFactory) {
            _classCallCheck(this, CachedCanvases);

            this.canvasFactory = canvasFactory;
            this.cache = Object.create(null);
          }

          _createClass(CachedCanvases, [{
            key: "getCanvas",
            value: function getCanvas(id, width, height, trackTransform) {
              var canvasEntry;

              if (this.cache[id] !== undefined) {
                canvasEntry = this.cache[id];
                this.canvasFactory.reset(canvasEntry, width, height);
                canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);
              } else {
                canvasEntry = this.canvasFactory.create(width, height);
                this.cache[id] = canvasEntry;
              }

              if (trackTransform) {
                addContextCurrentTransform(canvasEntry.context);
              }

              return canvasEntry;
            }
          }, {
            key: "clear",
            value: function clear() {
              for (var id in this.cache) {
                var canvasEntry = this.cache[id];
                this.canvasFactory.destroy(canvasEntry);
                delete this.cache[id];
              }
            }
          }]);

          return CachedCanvases;
        }();

        function compileType3Glyph(imgData) {
          var POINT_TO_PROCESS_LIMIT = 1000;
          var POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);
          var width = imgData.width,
              height = imgData.height,
              width1 = width + 1;
          var i, ii, j, j0;
          var points = new Uint8Array(width1 * (height + 1));
          var lineSize = width + 7 & ~7,
              data0 = imgData.data;
          var data = new Uint8Array(lineSize * height);
          var pos = 0;

          for (i = 0, ii = data0.length; i < ii; i++) {
            var elem = data0[i];
            var mask = 128;

            while (mask > 0) {
              data[pos++] = elem & mask ? 0 : 255;
              mask >>= 1;
            }
          }

          var count = 0;
          pos = 0;

          if (data[pos] !== 0) {
            points[0] = 1;
            ++count;
          }

          for (j = 1; j < width; j++) {
            if (data[pos] !== data[pos + 1]) {
              points[j] = data[pos] ? 2 : 1;
              ++count;
            }

            pos++;
          }

          if (data[pos] !== 0) {
            points[j] = 2;
            ++count;
          }

          for (i = 1; i < height; i++) {
            pos = i * lineSize;
            j0 = i * width1;

            if (data[pos - lineSize] !== data[pos]) {
              points[j0] = data[pos] ? 1 : 8;
              ++count;
            }

            var sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);

            for (j = 1; j < width; j++) {
              sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);

              if (POINT_TYPES[sum]) {
                points[j0 + j] = POINT_TYPES[sum];
                ++count;
              }

              pos++;
            }

            if (data[pos - lineSize] !== data[pos]) {
              points[j0 + j] = data[pos] ? 2 : 4;
              ++count;
            }

            if (count > POINT_TO_PROCESS_LIMIT) {
              return null;
            }
          }

          pos = lineSize * (height - 1);
          j0 = i * width1;

          if (data[pos] !== 0) {
            points[j0] = 8;
            ++count;
          }

          for (j = 1; j < width; j++) {
            if (data[pos] !== data[pos + 1]) {
              points[j0 + j] = data[pos] ? 4 : 8;
              ++count;
            }

            pos++;
          }

          if (data[pos] !== 0) {
            points[j0 + j] = 4;
            ++count;
          }

          if (count > POINT_TO_PROCESS_LIMIT) {
            return null;
          }

          var steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);
          var outlines = [];

          for (i = 0; count && i <= height; i++) {
            var p = i * width1;
            var end = p + width;

            while (p < end && !points[p]) {
              p++;
            }

            if (p === end) {
              continue;
            }

            var coords = [p % width1, i];
            var p0 = p;
            var type = points[p];

            do {
              var step = steps[type];

              do {
                p += step;
              } while (!points[p]);

              var pp = points[p];

              if (pp !== 5 && pp !== 10) {
                type = pp;
                points[p] = 0;
              } else {
                type = pp & 0x33 * type >> 4;
                points[p] &= type >> 2 | type << 2;
              }

              coords.push(p % width1, p / width1 | 0);

              if (!points[p]) {
                --count;
              }
            } while (p0 !== p);

            outlines.push(coords);
            --i;
          }

          var drawOutline = function drawOutline(c) {
            c.save();
            c.scale(1 / width, -1 / height);
            c.translate(0, -height);
            c.beginPath();

            for (var k = 0, kk = outlines.length; k < kk; k++) {
              var o = outlines[k];
              c.moveTo(o[0], o[1]);

              for (var l = 2, ll = o.length; l < ll; l += 2) {
                c.lineTo(o[l], o[l + 1]);
              }
            }

            c.fill();
            c.beginPath();
            c.restore();
          };

          return drawOutline;
        }

        var CanvasExtraState =
        /*#__PURE__*/
        function () {
          function CanvasExtraState() {
            _classCallCheck(this, CanvasExtraState);

            this.alphaIsShape = false;
            this.fontSize = 0;
            this.fontSizeScale = 1;
            this.textMatrix = _util.IDENTITY_MATRIX;
            this.textMatrixScale = 1;
            this.fontMatrix = _util.FONT_IDENTITY_MATRIX;
            this.leading = 0;
            this.x = 0;
            this.y = 0;
            this.lineX = 0;
            this.lineY = 0;
            this.charSpacing = 0;
            this.wordSpacing = 0;
            this.textHScale = 1;
            this.textRenderingMode = _util.TextRenderingMode.FILL;
            this.textRise = 0;
            this.fillColor = "#000000";
            this.strokeColor = "#000000";
            this.patternFill = false;
            this.fillAlpha = 1;
            this.strokeAlpha = 1;
            this.lineWidth = 1;
            this.activeSMask = null;
            this.resumeSMaskCtx = null;
            this.transferMaps = null;
          }

          _createClass(CanvasExtraState, [{
            key: "clone",
            value: function clone() {
              return Object.create(this);
            }
          }, {
            key: "setCurrentPoint",
            value: function setCurrentPoint(x, y) {
              this.x = x;
              this.y = y;
            }
          }]);

          return CanvasExtraState;
        }();

        var CanvasGraphics = function CanvasGraphicsClosure() {
          var EXECUTION_TIME = 15;
          var EXECUTION_STEPS = 10;

          function putBinaryImageData(ctx, imgData) {
            var transferMaps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            if (typeof ImageData !== "undefined" && imgData instanceof ImageData) {
              ctx.putImageData(imgData, 0, 0);
              return;
            }

            var height = imgData.height,
                width = imgData.width;
            var partialChunkHeight = height % FULL_CHUNK_HEIGHT;
            var fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
            var totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
            var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
            var srcPos = 0,
                destPos;
            var src = imgData.data;
            var dest = chunkImgData.data;
            var i, j, thisChunkHeight, elemsInThisChunk;
            var transferMapRed, transferMapGreen, transferMapBlue, transferMapGray;

            if (transferMaps) {
              switch (transferMaps.length) {
                case 1:
                  transferMapRed = transferMaps[0];
                  transferMapGreen = transferMaps[0];
                  transferMapBlue = transferMaps[0];
                  transferMapGray = transferMaps[0];
                  break;

                case 4:
                  transferMapRed = transferMaps[0];
                  transferMapGreen = transferMaps[1];
                  transferMapBlue = transferMaps[2];
                  transferMapGray = transferMaps[3];
                  break;
              }
            }

            if (imgData.kind === _util.ImageKind.GRAYSCALE_1BPP) {
              var srcLength = src.byteLength;
              var dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);
              var dest32DataLength = dest32.length;
              var fullSrcDiff = width + 7 >> 3;
              var white = 0xffffffff;
              var black = _util.IsLittleEndianCached.value ? 0xff000000 : 0x000000ff;

              if (transferMapGray) {
                if (transferMapGray[0] === 0xff && transferMapGray[0xff] === 0) {
                  var _ref36 = [black, white];
                  white = _ref36[0];
                  black = _ref36[1];
                }
              }

              for (i = 0; i < totalChunks; i++) {
                thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
                destPos = 0;

                for (j = 0; j < thisChunkHeight; j++) {
                  var srcDiff = srcLength - srcPos;
                  var k = 0;
                  var kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;
                  var kEndUnrolled = kEnd & ~7;
                  var mask = 0;
                  var srcByte = 0;

                  for (; k < kEndUnrolled; k += 8) {
                    srcByte = src[srcPos++];
                    dest32[destPos++] = srcByte & 128 ? white : black;
                    dest32[destPos++] = srcByte & 64 ? white : black;
                    dest32[destPos++] = srcByte & 32 ? white : black;
                    dest32[destPos++] = srcByte & 16 ? white : black;
                    dest32[destPos++] = srcByte & 8 ? white : black;
                    dest32[destPos++] = srcByte & 4 ? white : black;
                    dest32[destPos++] = srcByte & 2 ? white : black;
                    dest32[destPos++] = srcByte & 1 ? white : black;
                  }

                  for (; k < kEnd; k++) {
                    if (mask === 0) {
                      srcByte = src[srcPos++];
                      mask = 128;
                    }

                    dest32[destPos++] = srcByte & mask ? white : black;
                    mask >>= 1;
                  }
                }

                while (destPos < dest32DataLength) {
                  dest32[destPos++] = 0;
                }

                ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
              }
            } else if (imgData.kind === _util.ImageKind.RGBA_32BPP) {
              var hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);
              j = 0;
              elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;

              for (i = 0; i < fullChunks; i++) {
                dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
                srcPos += elemsInThisChunk;

                if (hasTransferMaps) {
                  for (var _k = 0; _k < elemsInThisChunk; _k += 4) {
                    if (transferMapRed) {
                      dest[_k + 0] = transferMapRed[dest[_k + 0]];
                    }

                    if (transferMapGreen) {
                      dest[_k + 1] = transferMapGreen[dest[_k + 1]];
                    }

                    if (transferMapBlue) {
                      dest[_k + 2] = transferMapBlue[dest[_k + 2]];
                    }
                  }
                }

                ctx.putImageData(chunkImgData, 0, j);
                j += FULL_CHUNK_HEIGHT;
              }

              if (i < totalChunks) {
                elemsInThisChunk = width * partialChunkHeight * 4;
                dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));

                if (hasTransferMaps) {
                  for (var _k2 = 0; _k2 < elemsInThisChunk; _k2 += 4) {
                    if (transferMapRed) {
                      dest[_k2 + 0] = transferMapRed[dest[_k2 + 0]];
                    }

                    if (transferMapGreen) {
                      dest[_k2 + 1] = transferMapGreen[dest[_k2 + 1]];
                    }

                    if (transferMapBlue) {
                      dest[_k2 + 2] = transferMapBlue[dest[_k2 + 2]];
                    }
                  }
                }

                ctx.putImageData(chunkImgData, 0, j);
              }
            } else if (imgData.kind === _util.ImageKind.RGB_24BPP) {
              var _hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);

              thisChunkHeight = FULL_CHUNK_HEIGHT;
              elemsInThisChunk = width * thisChunkHeight;

              for (i = 0; i < totalChunks; i++) {
                if (i >= fullChunks) {
                  thisChunkHeight = partialChunkHeight;
                  elemsInThisChunk = width * thisChunkHeight;
                }

                destPos = 0;

                for (j = elemsInThisChunk; j--;) {
                  dest[destPos++] = src[srcPos++];
                  dest[destPos++] = src[srcPos++];
                  dest[destPos++] = src[srcPos++];
                  dest[destPos++] = 255;
                }

                if (_hasTransferMaps) {
                  for (var _k3 = 0; _k3 < destPos; _k3 += 4) {
                    if (transferMapRed) {
                      dest[_k3 + 0] = transferMapRed[dest[_k3 + 0]];
                    }

                    if (transferMapGreen) {
                      dest[_k3 + 1] = transferMapGreen[dest[_k3 + 1]];
                    }

                    if (transferMapBlue) {
                      dest[_k3 + 2] = transferMapBlue[dest[_k3 + 2]];
                    }
                  }
                }

                ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
              }
            } else {
              throw new Error("bad image kind: ".concat(imgData.kind));
            }
          }

          function putBinaryImageMask(ctx, imgData) {
            var height = imgData.height,
                width = imgData.width;
            var partialChunkHeight = height % FULL_CHUNK_HEIGHT;
            var fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
            var totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
            var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
            var srcPos = 0;
            var src = imgData.data;
            var dest = chunkImgData.data;

            for (var i = 0; i < totalChunks; i++) {
              var thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
              var destPos = 3;

              for (var j = 0; j < thisChunkHeight; j++) {
                var elem = void 0,
                    mask = 0;

                for (var k = 0; k < width; k++) {
                  if (!mask) {
                    elem = src[srcPos++];
                    mask = 128;
                  }

                  dest[destPos] = elem & mask ? 0 : 255;
                  destPos += 4;
                  mask >>= 1;
                }
              }

              ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
            }
          }

          function copyCtxState(sourceCtx, destCtx) {
            var properties = ["strokeStyle", "fillStyle", "fillRule", "globalAlpha", "lineWidth", "lineCap", "lineJoin", "miterLimit", "globalCompositeOperation", "font"];

            for (var i = 0, ii = properties.length; i < ii; i++) {
              var property = properties[i];

              if (sourceCtx[property] !== undefined) {
                destCtx[property] = sourceCtx[property];
              }
            }

            if (sourceCtx.setLineDash !== undefined) {
              destCtx.setLineDash(sourceCtx.getLineDash());
              destCtx.lineDashOffset = sourceCtx.lineDashOffset;
            }
          }

          function resetCtxToDefault(ctx) {
            ctx.strokeStyle = "#000000";
            ctx.fillStyle = "#000000";
            ctx.fillRule = "nonzero";
            ctx.globalAlpha = 1;
            ctx.lineWidth = 1;
            ctx.lineCap = "butt";
            ctx.lineJoin = "miter";
            ctx.miterLimit = 10;
            ctx.globalCompositeOperation = "source-over";
            ctx.font = "10px sans-serif";

            if (ctx.setLineDash !== undefined) {
              ctx.setLineDash([]);
              ctx.lineDashOffset = 0;
            }
          }

          function composeSMaskBackdrop(bytes, r0, g0, b0) {
            var length = bytes.length;

            for (var i = 3; i < length; i += 4) {
              var alpha = bytes[i];

              if (alpha === 0) {
                bytes[i - 3] = r0;
                bytes[i - 2] = g0;
                bytes[i - 1] = b0;
              } else if (alpha < 255) {
                var alpha_ = 255 - alpha;
                bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;
                bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;
                bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;
              }
            }
          }

          function composeSMaskAlpha(maskData, layerData, transferMap) {
            var length = maskData.length;
            var scale = 1 / 255;

            for (var i = 3; i < length; i += 4) {
              var alpha = transferMap ? transferMap[maskData[i]] : maskData[i];
              layerData[i] = layerData[i] * alpha * scale | 0;
            }
          }

          function composeSMaskLuminosity(maskData, layerData, transferMap) {
            var length = maskData.length;

            for (var i = 3; i < length; i += 4) {
              var y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;
              layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;
            }
          }

          function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap) {
            var hasBackdrop = !!backdrop;
            var r0 = hasBackdrop ? backdrop[0] : 0;
            var g0 = hasBackdrop ? backdrop[1] : 0;
            var b0 = hasBackdrop ? backdrop[2] : 0;
            var composeFn;

            if (subtype === "Luminosity") {
              composeFn = composeSMaskLuminosity;
            } else {
              composeFn = composeSMaskAlpha;
            }

            var PIXELS_TO_PROCESS = 1048576;
            var chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));

            for (var row = 0; row < height; row += chunkSize) {
              var chunkHeight = Math.min(chunkSize, height - row);
              var maskData = maskCtx.getImageData(0, row, width, chunkHeight);
              var layerData = layerCtx.getImageData(0, row, width, chunkHeight);

              if (hasBackdrop) {
                composeSMaskBackdrop(maskData.data, r0, g0, b0);
              }

              composeFn(maskData.data, layerData.data, transferMap);
              maskCtx.putImageData(layerData, 0, row);
            }
          }

          function composeSMask(ctx, smask, layerCtx) {
            var mask = smask.canvas;
            var maskCtx = smask.context;
            ctx.setTransform(smask.scaleX, 0, 0, smask.scaleY, smask.offsetX, smask.offsetY);
            genericComposeSMask(maskCtx, layerCtx, mask.width, mask.height, smask.subtype, smask.backdrop, smask.transferMap);
            ctx.drawImage(mask, 0, 0);
          }

          var LINE_CAP_STYLES = ["butt", "round", "square"];
          var LINE_JOIN_STYLES = ["miter", "round", "bevel"];
          var NORMAL_CLIP = {};
          var EO_CLIP = {};

          var CanvasGraphics =
          /*#__PURE__*/
          function () {
            function CanvasGraphics(canvasCtx, commonObjs, objs, canvasFactory, imageLayer, optionalContentConfig) {
              _classCallCheck(this, CanvasGraphics);

              this.ctx = canvasCtx;
              this.current = new CanvasExtraState();
              this.stateStack = [];
              this.pendingClip = null;
              this.pendingEOFill = false;
              this.res = null;
              this.xobjs = null;
              this.commonObjs = commonObjs;
              this.objs = objs;
              this.canvasFactory = canvasFactory;
              this.imageLayer = imageLayer;
              this.groupStack = [];
              this.processingType3 = null;
              this.baseTransform = null;
              this.baseTransformStack = [];
              this.groupLevel = 0;
              this.smaskStack = [];
              this.smaskCounter = 0;
              this.tempSMask = null;
              this.contentVisible = true;
              this.markedContentStack = [];
              this.optionalContentConfig = optionalContentConfig;
              this.cachedCanvases = new CachedCanvases(this.canvasFactory);
              this.cachedPatterns = new Map();

              if (canvasCtx) {
                addContextCurrentTransform(canvasCtx);
              }

              this._cachedGetSinglePixelWidth = null;
            }

            _createClass(CanvasGraphics, [{
              key: "beginDrawing",
              value: function beginDrawing(_ref37) {
                var transform = _ref37.transform,
                    viewport = _ref37.viewport,
                    _ref37$transparency = _ref37.transparency,
                    transparency = _ref37$transparency === void 0 ? false : _ref37$transparency,
                    _ref37$background = _ref37.background,
                    background = _ref37$background === void 0 ? null : _ref37$background;
                var width = this.ctx.canvas.width;
                var height = this.ctx.canvas.height;
                this.ctx.save();
                this.ctx.fillStyle = background || "rgb(255, 255, 255)";
                this.ctx.fillRect(0, 0, width, height);
                this.ctx.restore();

                if (transparency) {
                  var transparentCanvas = this.cachedCanvases.getCanvas("transparent", width, height, true);
                  this.compositeCtx = this.ctx;
                  this.transparentCanvas = transparentCanvas.canvas;
                  this.ctx = transparentCanvas.context;
                  this.ctx.save();
                  this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);
                }

                this.ctx.save();
                resetCtxToDefault(this.ctx);

                if (transform) {
                  this.ctx.transform.apply(this.ctx, transform);
                }

                this.ctx.transform.apply(this.ctx, viewport.transform);
                this.baseTransform = this.ctx.mozCurrentTransform.slice();
                this._combinedScaleFactor = Math.hypot(this.baseTransform[0], this.baseTransform[2]);

                if (this.imageLayer) {
                  this.imageLayer.beginLayout();
                }
              }
            }, {
              key: "executeOperatorList",
              value: function executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {
                var argsArray = operatorList.argsArray;
                var fnArray = operatorList.fnArray;
                var i = executionStartIdx || 0;
                var argsArrayLen = argsArray.length;

                if (argsArrayLen === i) {
                  return i;
                }

                var chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === "function";
                var endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;
                var steps = 0;
                var commonObjs = this.commonObjs;
                var objs = this.objs;
                var fnId;

                while (true) {
                  if (stepper !== undefined && i === stepper.nextBreakPoint) {
                    stepper.breakIt(i, continueCallback);
                    return i;
                  }

                  fnId = fnArray[i];

                  if (fnId !== _util.OPS.dependency) {
                    this[fnId].apply(this, argsArray[i]);
                  } else {
                    var _iteratorNormalCompletion22 = true;
                    var _didIteratorError22 = false;
                    var _iteratorError22 = undefined;

                    try {
                      for (var _iterator22 = argsArray[i][Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {
                        var depObjId = _step22.value;
                        var objsPool = depObjId.startsWith("g_") ? commonObjs : objs;

                        if (!objsPool.has(depObjId)) {
                          objsPool.get(depObjId, continueCallback);
                          return i;
                        }
                      }
                    } catch (err) {
                      _didIteratorError22 = true;
                      _iteratorError22 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion22 && _iterator22["return"] != null) {
                          _iterator22["return"]();
                        }
                      } finally {
                        if (_didIteratorError22) {
                          throw _iteratorError22;
                        }
                      }
                    }
                  }

                  i++;

                  if (i === argsArrayLen) {
                    return i;
                  }

                  if (chunkOperations && ++steps > EXECUTION_STEPS) {
                    if (Date.now() > endTime) {
                      continueCallback();
                      return i;
                    }

                    steps = 0;
                  }
                }
              }
            }, {
              key: "endDrawing",
              value: function endDrawing() {
                while (this.stateStack.length || this.current.activeSMask !== null) {
                  this.restore();
                }

                this.ctx.restore();

                if (this.transparentCanvas) {
                  this.ctx = this.compositeCtx;
                  this.ctx.save();
                  this.ctx.setTransform(1, 0, 0, 1, 0, 0);
                  this.ctx.drawImage(this.transparentCanvas, 0, 0);
                  this.ctx.restore();
                  this.transparentCanvas = null;
                }

                this.cachedCanvases.clear();
                this.cachedPatterns.clear();

                if (this.imageLayer) {
                  this.imageLayer.endLayout();
                }
              }
            }, {
              key: "_scaleImage",
              value: function _scaleImage(img, inverseTransform) {
                var width = img.width;
                var height = img.height;
                var widthScale = Math.max(Math.hypot(inverseTransform[0], inverseTransform[1]), 1);
                var heightScale = Math.max(Math.hypot(inverseTransform[2], inverseTransform[3]), 1);
                var paintWidth = width,
                    paintHeight = height;
                var tmpCanvasId = "prescale1";
                var tmpCanvas, tmpCtx;

                while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {
                  var newWidth = paintWidth,
                      newHeight = paintHeight;

                  if (widthScale > 2 && paintWidth > 1) {
                    newWidth = Math.ceil(paintWidth / 2);
                    widthScale /= paintWidth / newWidth;
                  }

                  if (heightScale > 2 && paintHeight > 1) {
                    newHeight = Math.ceil(paintHeight / 2);
                    heightScale /= paintHeight / newHeight;
                  }

                  tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);
                  tmpCtx = tmpCanvas.context;
                  tmpCtx.clearRect(0, 0, newWidth, newHeight);
                  tmpCtx.drawImage(img, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);
                  img = tmpCanvas.canvas;
                  paintWidth = newWidth;
                  paintHeight = newHeight;
                  tmpCanvasId = tmpCanvasId === "prescale1" ? "prescale2" : "prescale1";
                }

                return {
                  img: img,
                  paintWidth: paintWidth,
                  paintHeight: paintHeight
                };
              }
            }, {
              key: "_createMaskCanvas",
              value: function _createMaskCanvas(img) {
                var ctx = this.ctx;
                var width = img.width,
                    height = img.height;
                var fillColor = this.current.fillColor;
                var isPatternFill = this.current.patternFill;
                var maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);
                var maskCtx = maskCanvas.context;
                putBinaryImageMask(maskCtx, img);
                var objToCanvas = ctx.mozCurrentTransform;

                var maskToCanvas = _util.Util.transform(objToCanvas, [1 / width, 0, 0, -1 / height, 0, 0]);

                maskToCanvas = _util.Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);

                var cord1 = _util.Util.applyTransform([0, 0], maskToCanvas);

                var cord2 = _util.Util.applyTransform([width, height], maskToCanvas);

                var rect = _util.Util.normalizeRect([cord1[0], cord1[1], cord2[0], cord2[1]]);

                var drawnWidth = Math.ceil(rect[2] - rect[0]);
                var drawnHeight = Math.ceil(rect[3] - rect[1]);
                var fillCanvas = this.cachedCanvases.getCanvas("fillCanvas", drawnWidth, drawnHeight, true);
                var fillCtx = fillCanvas.context;
                var offsetX = Math.min(cord1[0], cord2[0]);
                var offsetY = Math.min(cord1[1], cord2[1]);
                fillCtx.translate(-offsetX, -offsetY);
                fillCtx.transform.apply(fillCtx, maskToCanvas);

                var scaled = this._scaleImage(maskCanvas.canvas, fillCtx.mozCurrentTransformInverse);

                fillCtx.drawImage(scaled.img, 0, 0, scaled.img.width, scaled.img.height, 0, 0, width, height);
                fillCtx.globalCompositeOperation = "source-in";

                var inverse = _util.Util.transform(fillCtx.mozCurrentTransformInverse, [1, 0, 0, 1, -offsetX, -offsetY]);

                fillCtx.fillStyle = isPatternFill ? fillColor.getPattern(ctx, this, inverse, false) : fillColor;
                fillCtx.fillRect(0, 0, width, height);
                return {
                  canvas: fillCanvas.canvas,
                  offsetX: Math.round(offsetX),
                  offsetY: Math.round(offsetY)
                };
              }
            }, {
              key: "setLineWidth",
              value: function setLineWidth(width) {
                this.current.lineWidth = width;
                this.ctx.lineWidth = width;
              }
            }, {
              key: "setLineCap",
              value: function setLineCap(style) {
                this.ctx.lineCap = LINE_CAP_STYLES[style];
              }
            }, {
              key: "setLineJoin",
              value: function setLineJoin(style) {
                this.ctx.lineJoin = LINE_JOIN_STYLES[style];
              }
            }, {
              key: "setMiterLimit",
              value: function setMiterLimit(limit) {
                this.ctx.miterLimit = limit;
              }
            }, {
              key: "setDash",
              value: function setDash(dashArray, dashPhase) {
                var ctx = this.ctx;

                if (ctx.setLineDash !== undefined) {
                  ctx.setLineDash(dashArray);
                  ctx.lineDashOffset = dashPhase;
                }
              }
            }, {
              key: "setRenderingIntent",
              value: function setRenderingIntent(intent) {}
            }, {
              key: "setFlatness",
              value: function setFlatness(flatness) {}
            }, {
              key: "setGState",
              value: function setGState(states) {
                for (var i = 0, ii = states.length; i < ii; i++) {
                  var state = states[i];
                  var key = state[0];
                  var value = state[1];

                  switch (key) {
                    case "LW":
                      this.setLineWidth(value);
                      break;

                    case "LC":
                      this.setLineCap(value);
                      break;

                    case "LJ":
                      this.setLineJoin(value);
                      break;

                    case "ML":
                      this.setMiterLimit(value);
                      break;

                    case "D":
                      this.setDash(value[0], value[1]);
                      break;

                    case "RI":
                      this.setRenderingIntent(value);
                      break;

                    case "FL":
                      this.setFlatness(value);
                      break;

                    case "Font":
                      this.setFont(value[0], value[1]);
                      break;

                    case "CA":
                      this.current.strokeAlpha = state[1];
                      break;

                    case "ca":
                      this.current.fillAlpha = state[1];
                      this.ctx.globalAlpha = state[1];
                      break;

                    case "BM":
                      this.ctx.globalCompositeOperation = value;
                      break;

                    case "SMask":
                      if (this.current.activeSMask) {
                        if (this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1].activeSMask === this.current.activeSMask) {
                          this.suspendSMaskGroup();
                        } else {
                          this.endSMaskGroup();
                        }
                      }

                      this.current.activeSMask = value ? this.tempSMask : null;

                      if (this.current.activeSMask) {
                        this.beginSMaskGroup();
                      }

                      this.tempSMask = null;
                      break;

                    case "TR":
                      this.current.transferMaps = value;
                  }
                }
              }
            }, {
              key: "beginSMaskGroup",
              value: function beginSMaskGroup() {
                var activeSMask = this.current.activeSMask;
                var drawnWidth = activeSMask.canvas.width;
                var drawnHeight = activeSMask.canvas.height;
                var cacheId = "smaskGroupAt" + this.groupLevel;
                var scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);
                var currentCtx = this.ctx;
                var currentTransform = currentCtx.mozCurrentTransform;
                this.ctx.save();
                var groupCtx = scratchCanvas.context;
                groupCtx.scale(1 / activeSMask.scaleX, 1 / activeSMask.scaleY);
                groupCtx.translate(-activeSMask.offsetX, -activeSMask.offsetY);
                groupCtx.transform.apply(groupCtx, currentTransform);
                activeSMask.startTransformInverse = groupCtx.mozCurrentTransformInverse;
                copyCtxState(currentCtx, groupCtx);
                this.ctx = groupCtx;
                this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]]);
                this.groupStack.push(currentCtx);
                this.groupLevel++;
              }
            }, {
              key: "suspendSMaskGroup",
              value: function suspendSMaskGroup() {
                var groupCtx = this.ctx;
                this.groupLevel--;
                this.ctx = this.groupStack.pop();
                composeSMask(this.ctx, this.current.activeSMask, groupCtx);
                this.ctx.restore();
                this.ctx.save();
                copyCtxState(groupCtx, this.ctx);
                this.current.resumeSMaskCtx = groupCtx;

                var deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);

                this.ctx.transform.apply(this.ctx, deltaTransform);
                groupCtx.save();
                groupCtx.setTransform(1, 0, 0, 1, 0, 0);
                groupCtx.clearRect(0, 0, groupCtx.canvas.width, groupCtx.canvas.height);
                groupCtx.restore();
              }
            }, {
              key: "resumeSMaskGroup",
              value: function resumeSMaskGroup() {
                var groupCtx = this.current.resumeSMaskCtx;
                var currentCtx = this.ctx;
                this.ctx = groupCtx;
                this.groupStack.push(currentCtx);
                this.groupLevel++;
              }
            }, {
              key: "endSMaskGroup",
              value: function endSMaskGroup() {
                var groupCtx = this.ctx;
                this.groupLevel--;
                this.ctx = this.groupStack.pop();
                composeSMask(this.ctx, this.current.activeSMask, groupCtx);
                this.ctx.restore();
                copyCtxState(groupCtx, this.ctx);

                var deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);

                this.ctx.transform.apply(this.ctx, deltaTransform);
              }
            }, {
              key: "save",
              value: function save() {
                this.ctx.save();
                var old = this.current;
                this.stateStack.push(old);
                this.current = old.clone();
                this.current.resumeSMaskCtx = null;
              }
            }, {
              key: "restore",
              value: function restore() {
                if (this.current.resumeSMaskCtx) {
                  this.resumeSMaskGroup();
                }

                if (this.current.activeSMask !== null && (this.stateStack.length === 0 || this.stateStack[this.stateStack.length - 1].activeSMask !== this.current.activeSMask)) {
                  this.endSMaskGroup();
                }

                if (this.stateStack.length !== 0) {
                  this.current = this.stateStack.pop();
                  this.ctx.restore();
                  this.pendingClip = null;
                  this._cachedGetSinglePixelWidth = null;
                } else {
                  this.current.activeSMask = null;
                }
              }
            }, {
              key: "transform",
              value: function transform(a, b, c, d, e, f) {
                this.ctx.transform(a, b, c, d, e, f);
                this._cachedGetSinglePixelWidth = null;
              }
            }, {
              key: "constructPath",
              value: function constructPath(ops, args) {
                var ctx = this.ctx;
                var current = this.current;
                var x = current.x,
                    y = current.y;

                for (var i = 0, j = 0, ii = ops.length; i < ii; i++) {
                  switch (ops[i] | 0) {
                    case _util.OPS.rectangle:
                      x = args[j++];
                      y = args[j++];
                      var width = args[j++];
                      var height = args[j++];
                      var xw = x + width;
                      var yh = y + height;
                      ctx.moveTo(x, y);

                      if (width === 0 || height === 0) {
                        ctx.lineTo(xw, yh);
                      } else {
                        ctx.lineTo(xw, y);
                        ctx.lineTo(xw, yh);
                        ctx.lineTo(x, yh);
                      }

                      ctx.closePath();
                      break;

                    case _util.OPS.moveTo:
                      x = args[j++];
                      y = args[j++];
                      ctx.moveTo(x, y);
                      break;

                    case _util.OPS.lineTo:
                      x = args[j++];
                      y = args[j++];
                      ctx.lineTo(x, y);
                      break;

                    case _util.OPS.curveTo:
                      x = args[j + 4];
                      y = args[j + 5];
                      ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);
                      j += 6;
                      break;

                    case _util.OPS.curveTo2:
                      ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);
                      x = args[j + 2];
                      y = args[j + 3];
                      j += 4;
                      break;

                    case _util.OPS.curveTo3:
                      x = args[j + 2];
                      y = args[j + 3];
                      ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);
                      j += 4;
                      break;

                    case _util.OPS.closePath:
                      ctx.closePath();
                      break;
                  }
                }

                current.setCurrentPoint(x, y);
              }
            }, {
              key: "closePath",
              value: function closePath() {
                this.ctx.closePath();
              }
            }, {
              key: "stroke",
              value: function stroke(consumePath) {
                consumePath = typeof consumePath !== "undefined" ? consumePath : true;
                var ctx = this.ctx;
                var strokeColor = this.current.strokeColor;
                ctx.globalAlpha = this.current.strokeAlpha;

                if (this.contentVisible) {
                  if (_typeof(strokeColor) === "object" && strokeColor !== null && strokeColor !== void 0 && strokeColor.getPattern) {
                    var lineWidth = this.getSinglePixelWidth();
                    ctx.save();
                    ctx.strokeStyle = strokeColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse);
                    ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);
                    ctx.stroke();
                    ctx.restore();
                  } else {
                    var _lineWidth = this.getSinglePixelWidth();

                    if (_lineWidth < 0 && -_lineWidth >= this.current.lineWidth) {
                      ctx.save();
                      ctx.resetTransform();
                      ctx.lineWidth = Math.round(this._combinedScaleFactor);
                      ctx.stroke();
                      ctx.restore();
                    } else {
                      ctx.lineWidth = Math.max(_lineWidth, this.current.lineWidth);
                      ctx.stroke();
                    }
                  }
                }

                if (consumePath) {
                  this.consumePath();
                }

                ctx.globalAlpha = this.current.fillAlpha;
              }
            }, {
              key: "closeStroke",
              value: function closeStroke() {
                this.closePath();
                this.stroke();
              }
            }, {
              key: "fill",
              value: function fill(consumePath) {
                consumePath = typeof consumePath !== "undefined" ? consumePath : true;
                var ctx = this.ctx;
                var fillColor = this.current.fillColor;
                var isPatternFill = this.current.patternFill;
                var needRestore = false;

                if (isPatternFill) {
                  ctx.save();
                  ctx.fillStyle = fillColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse);
                  needRestore = true;
                }

                if (this.contentVisible) {
                  if (this.pendingEOFill) {
                    ctx.fill("evenodd");
                    this.pendingEOFill = false;
                  } else {
                    ctx.fill();
                  }
                }

                if (needRestore) {
                  ctx.restore();
                }

                if (consumePath) {
                  this.consumePath();
                }
              }
            }, {
              key: "eoFill",
              value: function eoFill() {
                this.pendingEOFill = true;
                this.fill();
              }
            }, {
              key: "fillStroke",
              value: function fillStroke() {
                this.fill(false);
                this.stroke(false);
                this.consumePath();
              }
            }, {
              key: "eoFillStroke",
              value: function eoFillStroke() {
                this.pendingEOFill = true;
                this.fillStroke();
              }
            }, {
              key: "closeFillStroke",
              value: function closeFillStroke() {
                this.closePath();
                this.fillStroke();
              }
            }, {
              key: "closeEOFillStroke",
              value: function closeEOFillStroke() {
                this.pendingEOFill = true;
                this.closePath();
                this.fillStroke();
              }
            }, {
              key: "endPath",
              value: function endPath() {
                this.consumePath();
              }
            }, {
              key: "clip",
              value: function clip() {
                this.pendingClip = NORMAL_CLIP;
              }
            }, {
              key: "eoClip",
              value: function eoClip() {
                this.pendingClip = EO_CLIP;
              }
            }, {
              key: "beginText",
              value: function beginText() {
                this.current.textMatrix = _util.IDENTITY_MATRIX;
                this.current.textMatrixScale = 1;
                this.current.x = this.current.lineX = 0;
                this.current.y = this.current.lineY = 0;
              }
            }, {
              key: "endText",
              value: function endText() {
                var paths = this.pendingTextPaths;
                var ctx = this.ctx;

                if (paths === undefined) {
                  ctx.beginPath();
                  return;
                }

                ctx.save();
                ctx.beginPath();

                for (var i = 0; i < paths.length; i++) {
                  var path = paths[i];
                  ctx.setTransform.apply(ctx, path.transform);
                  ctx.translate(path.x, path.y);
                  path.addToPath(ctx, path.fontSize);
                }

                ctx.restore();
                ctx.clip();
                ctx.beginPath();
                delete this.pendingTextPaths;
              }
            }, {
              key: "setCharSpacing",
              value: function setCharSpacing(spacing) {
                this.current.charSpacing = spacing;
              }
            }, {
              key: "setWordSpacing",
              value: function setWordSpacing(spacing) {
                this.current.wordSpacing = spacing;
              }
            }, {
              key: "setHScale",
              value: function setHScale(scale) {
                this.current.textHScale = scale / 100;
              }
            }, {
              key: "setLeading",
              value: function setLeading(leading) {
                this.current.leading = -leading;
              }
            }, {
              key: "setFont",
              value: function setFont(fontRefName, size) {
                var fontObj = this.commonObjs.get(fontRefName);
                var current = this.current;

                if (!fontObj) {
                  throw new Error("Can't find font for ".concat(fontRefName));
                }

                current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;

                if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {
                  (0, _util.warn)("Invalid font matrix for font " + fontRefName);
                }

                if (size < 0) {
                  size = -size;
                  current.fontDirection = -1;
                } else {
                  current.fontDirection = 1;
                }

                this.current.font = fontObj;
                this.current.fontSize = size;

                if (fontObj.isType3Font) {
                  return;
                }

                var name = fontObj.loadedName || "sans-serif";
                var bold = "normal";

                if (fontObj.black) {
                  bold = "900";
                } else if (fontObj.bold) {
                  bold = "bold";
                }

                var italic = fontObj.italic ? "italic" : "normal";
                var typeface = "\"".concat(name, "\", ").concat(fontObj.fallbackName);
                var browserFontSize = size;

                if (size < MIN_FONT_SIZE) {
                  browserFontSize = MIN_FONT_SIZE;
                } else if (size > MAX_FONT_SIZE) {
                  browserFontSize = MAX_FONT_SIZE;
                }

                this.current.fontSizeScale = size / browserFontSize;
                this.ctx.font = "".concat(italic, " ").concat(bold, " ").concat(browserFontSize, "px ").concat(typeface);
              }
            }, {
              key: "setTextRenderingMode",
              value: function setTextRenderingMode(mode) {
                this.current.textRenderingMode = mode;
              }
            }, {
              key: "setTextRise",
              value: function setTextRise(rise) {
                this.current.textRise = rise;
              }
            }, {
              key: "moveText",
              value: function moveText(x, y) {
                this.current.x = this.current.lineX += x;
                this.current.y = this.current.lineY += y;
              }
            }, {
              key: "setLeadingMoveText",
              value: function setLeadingMoveText(x, y) {
                this.setLeading(-y);
                this.moveText(x, y);
              }
            }, {
              key: "setTextMatrix",
              value: function setTextMatrix(a, b, c, d, e, f) {
                this.current.textMatrix = [a, b, c, d, e, f];
                this.current.textMatrixScale = Math.hypot(a, b);
                this.current.x = this.current.lineX = 0;
                this.current.y = this.current.lineY = 0;
              }
            }, {
              key: "nextLine",
              value: function nextLine() {
                this.moveText(0, this.current.leading);
              }
            }, {
              key: "paintChar",
              value: function paintChar(character, x, y, patternTransform, resetLineWidthToOne) {
                var ctx = this.ctx;
                var current = this.current;
                var font = current.font;
                var textRenderingMode = current.textRenderingMode;
                var fontSize = current.fontSize / current.fontSizeScale;
                var fillStrokeMode = textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;
                var isAddToPathSet = !!(textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);
                var patternFill = current.patternFill && !font.missingFile;
                var addToPath;

                if (font.disableFontFace || isAddToPathSet || patternFill) {
                  addToPath = font.getPathGenerator(this.commonObjs, character);
                }

                if (font.disableFontFace || patternFill) {
                  ctx.save();
                  ctx.translate(x, y);
                  ctx.beginPath();
                  addToPath(ctx, fontSize);

                  if (patternTransform) {
                    ctx.setTransform.apply(ctx, patternTransform);
                  }

                  if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                    ctx.fill();
                  }

                  if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                    if (resetLineWidthToOne) {
                      ctx.resetTransform();
                      ctx.lineWidth = Math.round(this._combinedScaleFactor);
                    }

                    ctx.stroke();
                  }

                  ctx.restore();
                } else {
                  if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                    ctx.fillText(character, x, y);
                  }

                  if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                    if (resetLineWidthToOne) {
                      ctx.save();
                      ctx.moveTo(x, y);
                      ctx.resetTransform();
                      ctx.lineWidth = Math.round(this._combinedScaleFactor);
                      ctx.strokeText(character, 0, 0);
                      ctx.restore();
                    } else {
                      ctx.strokeText(character, x, y);
                    }
                  }
                }

                if (isAddToPathSet) {
                  var paths = this.pendingTextPaths || (this.pendingTextPaths = []);
                  paths.push({
                    transform: ctx.mozCurrentTransform,
                    x: x,
                    y: y,
                    fontSize: fontSize,
                    addToPath: addToPath
                  });
                }
              }
            }, {
              key: "showText",
              value: function showText(glyphs) {
                var current = this.current;
                var font = current.font;

                if (font.isType3Font) {
                  return this.showType3Text(glyphs);
                }

                var fontSize = current.fontSize;

                if (fontSize === 0) {
                  return undefined;
                }

                var ctx = this.ctx;
                var fontSizeScale = current.fontSizeScale;
                var charSpacing = current.charSpacing;
                var wordSpacing = current.wordSpacing;
                var fontDirection = current.fontDirection;
                var textHScale = current.textHScale * fontDirection;
                var glyphsLength = glyphs.length;
                var vertical = font.vertical;
                var spacingDir = vertical ? 1 : -1;
                var defaultVMetrics = font.defaultVMetrics;
                var widthAdvanceScale = fontSize * current.fontMatrix[0];
                var simpleFillText = current.textRenderingMode === _util.TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;
                ctx.save();
                var patternTransform;

                if (current.patternFill) {
                  ctx.save();
                  var pattern = current.fillColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse);
                  patternTransform = ctx.mozCurrentTransform;
                  ctx.restore();
                  ctx.fillStyle = pattern;
                }

                ctx.transform.apply(ctx, current.textMatrix);
                ctx.translate(current.x, current.y + current.textRise);

                if (fontDirection > 0) {
                  ctx.scale(textHScale, -1);
                } else {
                  ctx.scale(textHScale, 1);
                }

                var lineWidth = current.lineWidth;
                var resetLineWidthToOne = false;
                var scale = current.textMatrixScale;

                if (scale === 0 || lineWidth === 0) {
                  var fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;

                  if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                    this._cachedGetSinglePixelWidth = null;
                    lineWidth = this.getSinglePixelWidth();
                    resetLineWidthToOne = lineWidth < 0;
                  }
                } else {
                  lineWidth /= scale;
                }

                if (fontSizeScale !== 1.0) {
                  ctx.scale(fontSizeScale, fontSizeScale);
                  lineWidth /= fontSizeScale;
                }

                ctx.lineWidth = lineWidth;
                var x = 0,
                    i;

                for (i = 0; i < glyphsLength; ++i) {
                  var glyph = glyphs[i];

                  if ((0, _util.isNum)(glyph)) {
                    x += spacingDir * glyph * fontSize / 1000;
                    continue;
                  }

                  var restoreNeeded = false;
                  var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
                  var character = glyph.fontChar;
                  var accent = glyph.accent;
                  var scaledX = void 0,
                      scaledY = void 0;
                  var width = glyph.width;

                  if (vertical) {
                    var vmetric = glyph.vmetric || defaultVMetrics;
                    var vx = -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;
                    var vy = vmetric[2] * widthAdvanceScale;
                    width = vmetric ? -vmetric[0] : width;
                    scaledX = vx / fontSizeScale;
                    scaledY = (x + vy) / fontSizeScale;
                  } else {
                    scaledX = x / fontSizeScale;
                    scaledY = 0;
                  }

                  if (font.remeasure && width > 0) {
                    var measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;

                    if (width < measuredWidth && this.isFontSubpixelAAEnabled) {
                      var characterScaleX = width / measuredWidth;
                      restoreNeeded = true;
                      ctx.save();
                      ctx.scale(characterScaleX, 1);
                      scaledX /= characterScaleX;
                    } else if (width !== measuredWidth) {
                      scaledX += (width - measuredWidth) / 2000 * fontSize / fontSizeScale;
                    }
                  }

                  if (this.contentVisible && (glyph.isInFont || font.missingFile)) {
                    if (simpleFillText && !accent) {
                      ctx.fillText(character, scaledX, scaledY);
                    } else {
                      this.paintChar(character, scaledX, scaledY, patternTransform, resetLineWidthToOne);

                      if (accent) {
                        var scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;
                        var scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;
                        this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform, resetLineWidthToOne);
                      }
                    }
                  }

                  var charWidth = void 0;

                  if (vertical) {
                    charWidth = width * widthAdvanceScale - spacing * fontDirection;
                  } else {
                    charWidth = width * widthAdvanceScale + spacing * fontDirection;
                  }

                  x += charWidth;

                  if (restoreNeeded) {
                    ctx.restore();
                  }
                }

                if (vertical) {
                  current.y -= x;
                } else {
                  current.x += x * textHScale;
                }

                ctx.restore();
                return undefined;
              }
            }, {
              key: "showType3Text",
              value: function showType3Text(glyphs) {
                var ctx = this.ctx;
                var current = this.current;
                var font = current.font;
                var fontSize = current.fontSize;
                var fontDirection = current.fontDirection;
                var spacingDir = font.vertical ? 1 : -1;
                var charSpacing = current.charSpacing;
                var wordSpacing = current.wordSpacing;
                var textHScale = current.textHScale * fontDirection;
                var fontMatrix = current.fontMatrix || _util.FONT_IDENTITY_MATRIX;
                var glyphsLength = glyphs.length;
                var isTextInvisible = current.textRenderingMode === _util.TextRenderingMode.INVISIBLE;
                var i, glyph, width, spacingLength;

                if (isTextInvisible || fontSize === 0) {
                  return;
                }

                this._cachedGetSinglePixelWidth = null;
                ctx.save();
                ctx.transform.apply(ctx, current.textMatrix);
                ctx.translate(current.x, current.y);
                ctx.scale(textHScale, fontDirection);

                for (i = 0; i < glyphsLength; ++i) {
                  glyph = glyphs[i];

                  if ((0, _util.isNum)(glyph)) {
                    spacingLength = spacingDir * glyph * fontSize / 1000;
                    this.ctx.translate(spacingLength, 0);
                    current.x += spacingLength * textHScale;
                    continue;
                  }

                  var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
                  var operatorList = font.charProcOperatorList[glyph.operatorListId];

                  if (!operatorList) {
                    (0, _util.warn)("Type3 character \"".concat(glyph.operatorListId, "\" is not available."));
                    continue;
                  }

                  if (this.contentVisible) {
                    this.processingType3 = glyph;
                    this.save();
                    ctx.scale(fontSize, fontSize);
                    ctx.transform.apply(ctx, fontMatrix);
                    this.executeOperatorList(operatorList);
                    this.restore();
                  }

                  var transformed = _util.Util.applyTransform([glyph.width, 0], fontMatrix);

                  width = transformed[0] * fontSize + spacing;
                  ctx.translate(width, 0);
                  current.x += width * textHScale;
                }

                ctx.restore();
                this.processingType3 = null;
              }
            }, {
              key: "setCharWidth",
              value: function setCharWidth(xWidth, yWidth) {}
            }, {
              key: "setCharWidthAndBounds",
              value: function setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {
                this.ctx.rect(llx, lly, urx - llx, ury - lly);
                this.clip();
                this.endPath();
              }
            }, {
              key: "getColorN_Pattern",
              value: function getColorN_Pattern(IR) {
                var _this26 = this;

                var pattern;

                if (IR[0] === "TilingPattern") {
                  var color = IR[1];
                  var baseTransform = this.baseTransform || this.ctx.mozCurrentTransform.slice();
                  var canvasGraphicsFactory = {
                    createCanvasGraphics: function createCanvasGraphics(ctx) {
                      return new CanvasGraphics(ctx, _this26.commonObjs, _this26.objs, _this26.canvasFactory);
                    }
                  };
                  pattern = new _pattern_helper.TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);
                } else {
                  pattern = this._getPattern(IR[1]);
                }

                return pattern;
              }
            }, {
              key: "setStrokeColorN",
              value: function setStrokeColorN() {
                this.current.strokeColor = this.getColorN_Pattern(arguments);
              }
            }, {
              key: "setFillColorN",
              value: function setFillColorN() {
                this.current.fillColor = this.getColorN_Pattern(arguments);
                this.current.patternFill = true;
              }
            }, {
              key: "setStrokeRGBColor",
              value: function setStrokeRGBColor(r, g, b) {
                var color = _util.Util.makeHexColor(r, g, b);

                this.ctx.strokeStyle = color;
                this.current.strokeColor = color;
              }
            }, {
              key: "setFillRGBColor",
              value: function setFillRGBColor(r, g, b) {
                var color = _util.Util.makeHexColor(r, g, b);

                this.ctx.fillStyle = color;
                this.current.fillColor = color;
                this.current.patternFill = false;
              }
            }, {
              key: "_getPattern",
              value: function _getPattern(objId) {
                if (this.cachedPatterns.has(objId)) {
                  return this.cachedPatterns.get(objId);
                }

                var pattern = (0, _pattern_helper.getShadingPattern)(this.objs.get(objId));
                this.cachedPatterns.set(objId, pattern);
                return pattern;
              }
            }, {
              key: "shadingFill",
              value: function shadingFill(objId) {
                if (!this.contentVisible) {
                  return;
                }

                var ctx = this.ctx;
                this.save();

                var pattern = this._getPattern(objId);

                ctx.fillStyle = pattern.getPattern(ctx, this, ctx.mozCurrentTransformInverse, true);
                var inv = ctx.mozCurrentTransformInverse;

                if (inv) {
                  var canvas = ctx.canvas;
                  var width = canvas.width;
                  var height = canvas.height;

                  var bl = _util.Util.applyTransform([0, 0], inv);

                  var br = _util.Util.applyTransform([0, height], inv);

                  var ul = _util.Util.applyTransform([width, 0], inv);

                  var ur = _util.Util.applyTransform([width, height], inv);

                  var x0 = Math.min(bl[0], br[0], ul[0], ur[0]);
                  var y0 = Math.min(bl[1], br[1], ul[1], ur[1]);
                  var x1 = Math.max(bl[0], br[0], ul[0], ur[0]);
                  var y1 = Math.max(bl[1], br[1], ul[1], ur[1]);
                  this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);
                } else {
                  this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);
                }

                this.restore();
              }
            }, {
              key: "beginInlineImage",
              value: function beginInlineImage() {
                (0, _util.unreachable)("Should not call beginInlineImage");
              }
            }, {
              key: "beginImageData",
              value: function beginImageData() {
                (0, _util.unreachable)("Should not call beginImageData");
              }
            }, {
              key: "paintFormXObjectBegin",
              value: function paintFormXObjectBegin(matrix, bbox) {
                if (!this.contentVisible) {
                  return;
                }

                this.save();
                this.baseTransformStack.push(this.baseTransform);

                if (Array.isArray(matrix) && matrix.length === 6) {
                  this.transform.apply(this, matrix);
                }

                this.baseTransform = this.ctx.mozCurrentTransform;

                if (bbox) {
                  var width = bbox[2] - bbox[0];
                  var height = bbox[3] - bbox[1];
                  this.ctx.rect(bbox[0], bbox[1], width, height);
                  this.clip();
                  this.endPath();
                }
              }
            }, {
              key: "paintFormXObjectEnd",
              value: function paintFormXObjectEnd() {
                if (!this.contentVisible) {
                  return;
                }

                this.restore();
                this.baseTransform = this.baseTransformStack.pop();
              }
            }, {
              key: "beginGroup",
              value: function beginGroup(group) {
                if (!this.contentVisible) {
                  return;
                }

                this.save();
                var currentCtx = this.ctx;

                if (!group.isolated) {
                  (0, _util.info)("TODO: Support non-isolated groups.");
                }

                if (group.knockout) {
                  (0, _util.warn)("Knockout groups not supported.");
                }

                var currentTransform = currentCtx.mozCurrentTransform;

                if (group.matrix) {
                  currentCtx.transform.apply(currentCtx, group.matrix);
                }

                if (!group.bbox) {
                  throw new Error("Bounding box is required.");
                }

                var bounds = _util.Util.getAxialAlignedBoundingBox(group.bbox, currentCtx.mozCurrentTransform);

                var canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];
                bounds = _util.Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];
                var offsetX = Math.floor(bounds[0]);
                var offsetY = Math.floor(bounds[1]);
                var drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);
                var drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);
                var scaleX = 1,
                    scaleY = 1;

                if (drawnWidth > MAX_GROUP_SIZE) {
                  scaleX = drawnWidth / MAX_GROUP_SIZE;
                  drawnWidth = MAX_GROUP_SIZE;
                }

                if (drawnHeight > MAX_GROUP_SIZE) {
                  scaleY = drawnHeight / MAX_GROUP_SIZE;
                  drawnHeight = MAX_GROUP_SIZE;
                }

                var cacheId = "groupAt" + this.groupLevel;

                if (group.smask) {
                  cacheId += "_smask_" + this.smaskCounter++ % 2;
                }

                var scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);
                var groupCtx = scratchCanvas.context;
                groupCtx.scale(1 / scaleX, 1 / scaleY);
                groupCtx.translate(-offsetX, -offsetY);
                groupCtx.transform.apply(groupCtx, currentTransform);

                if (group.smask) {
                  this.smaskStack.push({
                    canvas: scratchCanvas.canvas,
                    context: groupCtx,
                    offsetX: offsetX,
                    offsetY: offsetY,
                    scaleX: scaleX,
                    scaleY: scaleY,
                    subtype: group.smask.subtype,
                    backdrop: group.smask.backdrop,
                    transferMap: group.smask.transferMap || null,
                    startTransformInverse: null
                  });
                } else {
                  currentCtx.setTransform(1, 0, 0, 1, 0, 0);
                  currentCtx.translate(offsetX, offsetY);
                  currentCtx.scale(scaleX, scaleY);
                }

                copyCtxState(currentCtx, groupCtx);
                this.ctx = groupCtx;
                this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]]);
                this.groupStack.push(currentCtx);
                this.groupLevel++;
                this.current.activeSMask = null;
              }
            }, {
              key: "endGroup",
              value: function endGroup(group) {
                if (!this.contentVisible) {
                  return;
                }

                this.groupLevel--;
                var groupCtx = this.ctx;
                this.ctx = this.groupStack.pop();

                if (this.ctx.imageSmoothingEnabled !== undefined) {
                  this.ctx.imageSmoothingEnabled = false;
                } else {
                  this.ctx.mozImageSmoothingEnabled = false;
                }

                if (group.smask) {
                  this.tempSMask = this.smaskStack.pop();
                } else {
                  this.ctx.drawImage(groupCtx.canvas, 0, 0);
                }

                this.restore();
              }
            }, {
              key: "beginAnnotations",
              value: function beginAnnotations() {
                this.save();

                if (this.baseTransform) {
                  this.ctx.setTransform.apply(this.ctx, this.baseTransform);
                }
              }
            }, {
              key: "endAnnotations",
              value: function endAnnotations() {
                this.restore();
              }
            }, {
              key: "beginAnnotation",
              value: function beginAnnotation(id, rect, transform, matrix) {
                this.save();
                resetCtxToDefault(this.ctx);
                this.current = new CanvasExtraState();

                if (Array.isArray(rect) && rect.length === 4) {
                  var width = rect[2] - rect[0];
                  var height = rect[3] - rect[1];
                  this.ctx.rect(rect[0], rect[1], width, height);
                  this.clip();
                  this.endPath();
                }

                this.transform.apply(this, transform);
                this.transform.apply(this, matrix);
              }
            }, {
              key: "endAnnotation",
              value: function endAnnotation() {
                this.restore();
              }
            }, {
              key: "paintImageMaskXObject",
              value: function paintImageMaskXObject(img) {
                if (!this.contentVisible) {
                  return;
                }

                var ctx = this.ctx;
                var width = img.width,
                    height = img.height;
                var glyph = this.processingType3;

                if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {
                  if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {
                    glyph.compiled = compileType3Glyph({
                      data: img.data,
                      width: width,
                      height: height
                    });
                  } else {
                    glyph.compiled = null;
                  }
                }

                if (glyph !== null && glyph !== void 0 && glyph.compiled) {
                  glyph.compiled(ctx);
                  return;
                }

                var mask = this._createMaskCanvas(img);

                var maskCanvas = mask.canvas;
                ctx.save();
                ctx.setTransform(1, 0, 0, 1, 0, 0);
                ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);
                ctx.restore();
              }
            }, {
              key: "paintImageMaskXObjectRepeat",
              value: function paintImageMaskXObjectRepeat(imgData, scaleX) {
                var skewX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                var skewY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
                var scaleY = arguments.length > 4 ? arguments[4] : undefined;
                var positions = arguments.length > 5 ? arguments[5] : undefined;

                if (!this.contentVisible) {
                  return;
                }

                var ctx = this.ctx;
                ctx.save();
                var currentTransform = ctx.mozCurrentTransform;
                ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);

                var mask = this._createMaskCanvas(imgData);

                ctx.setTransform(1, 0, 0, 1, 0, 0);

                for (var i = 0, ii = positions.length; i < ii; i += 2) {
                  var trans = _util.Util.transform(currentTransform, [scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]]);

                  var _util$Util$applyTrans = _util.Util.applyTransform([0, 0], trans),
                      _util$Util$applyTrans2 = _slicedToArray(_util$Util$applyTrans, 2),
                      x = _util$Util$applyTrans2[0],
                      y = _util$Util$applyTrans2[1];

                  ctx.drawImage(mask.canvas, x, y);
                }

                ctx.restore();
              }
            }, {
              key: "paintImageMaskXObjectGroup",
              value: function paintImageMaskXObjectGroup(images) {
                if (!this.contentVisible) {
                  return;
                }

                var ctx = this.ctx;
                var fillColor = this.current.fillColor;
                var isPatternFill = this.current.patternFill;

                for (var i = 0, ii = images.length; i < ii; i++) {
                  var image = images[i];
                  var width = image.width,
                      height = image.height;
                  var maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);
                  var maskCtx = maskCanvas.context;
                  maskCtx.save();
                  putBinaryImageMask(maskCtx, image);
                  maskCtx.globalCompositeOperation = "source-in";
                  maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this, ctx.mozCurrentTransformInverse, false) : fillColor;
                  maskCtx.fillRect(0, 0, width, height);
                  maskCtx.restore();
                  ctx.save();
                  ctx.transform.apply(ctx, image.transform);
                  ctx.scale(1, -1);
                  ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);
                  ctx.restore();
                }
              }
            }, {
              key: "paintImageXObject",
              value: function paintImageXObject(objId) {
                if (!this.contentVisible) {
                  return;
                }

                var imgData = objId.startsWith("g_") ? this.commonObjs.get(objId) : this.objs.get(objId);

                if (!imgData) {
                  (0, _util.warn)("Dependent image isn't ready yet");
                  return;
                }

                this.paintInlineImageXObject(imgData);
              }
            }, {
              key: "paintImageXObjectRepeat",
              value: function paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {
                if (!this.contentVisible) {
                  return;
                }

                var imgData = objId.startsWith("g_") ? this.commonObjs.get(objId) : this.objs.get(objId);

                if (!imgData) {
                  (0, _util.warn)("Dependent image isn't ready yet");
                  return;
                }

                var width = imgData.width;
                var height = imgData.height;
                var map = [];

                for (var i = 0, ii = positions.length; i < ii; i += 2) {
                  map.push({
                    transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],
                    x: 0,
                    y: 0,
                    w: width,
                    h: height
                  });
                }

                this.paintInlineImageXObjectGroup(imgData, map);
              }
            }, {
              key: "paintInlineImageXObject",
              value: function paintInlineImageXObject(imgData) {
                if (!this.contentVisible) {
                  return;
                }

                var width = imgData.width;
                var height = imgData.height;
                var ctx = this.ctx;
                this.save();
                ctx.scale(1 / width, -1 / height);
                var imgToPaint;

                if (typeof HTMLElement === "function" && imgData instanceof HTMLElement || !imgData.data) {
                  imgToPaint = imgData;
                } else {
                  var tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", width, height);
                  var tmpCtx = tmpCanvas.context;
                  putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);
                  imgToPaint = tmpCanvas.canvas;
                }

                var scaled = this._scaleImage(imgToPaint, ctx.mozCurrentTransformInverse);

                ctx.drawImage(scaled.img, 0, 0, scaled.paintWidth, scaled.paintHeight, 0, -height, width, height);

                if (this.imageLayer) {
                  var position = this.getCanvasPosition(0, -height);
                  this.imageLayer.appendImage({
                    imgData: imgData,
                    left: position[0],
                    top: position[1],
                    width: width / ctx.mozCurrentTransformInverse[0],
                    height: height / ctx.mozCurrentTransformInverse[3]
                  });
                }

                this.restore();
              }
            }, {
              key: "paintInlineImageXObjectGroup",
              value: function paintInlineImageXObjectGroup(imgData, map) {
                if (!this.contentVisible) {
                  return;
                }

                var ctx = this.ctx;
                var w = imgData.width;
                var h = imgData.height;
                var tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", w, h);
                var tmpCtx = tmpCanvas.context;
                putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);

                for (var i = 0, ii = map.length; i < ii; i++) {
                  var entry = map[i];
                  ctx.save();
                  ctx.transform.apply(ctx, entry.transform);
                  ctx.scale(1, -1);
                  ctx.drawImage(tmpCanvas.canvas, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);

                  if (this.imageLayer) {
                    var position = this.getCanvasPosition(entry.x, entry.y);
                    this.imageLayer.appendImage({
                      imgData: imgData,
                      left: position[0],
                      top: position[1],
                      width: w,
                      height: h
                    });
                  }

                  ctx.restore();
                }
              }
            }, {
              key: "paintSolidColorImageMask",
              value: function paintSolidColorImageMask() {
                if (!this.contentVisible) {
                  return;
                }

                this.ctx.fillRect(0, 0, 1, 1);
              }
            }, {
              key: "markPoint",
              value: function markPoint(tag) {}
            }, {
              key: "markPointProps",
              value: function markPointProps(tag, properties) {}
            }, {
              key: "beginMarkedContent",
              value: function beginMarkedContent(tag) {
                this.markedContentStack.push({
                  visible: true
                });
              }
            }, {
              key: "beginMarkedContentProps",
              value: function beginMarkedContentProps(tag, properties) {
                if (tag === "OC") {
                  this.markedContentStack.push({
                    visible: this.optionalContentConfig.isVisible(properties)
                  });
                } else {
                  this.markedContentStack.push({
                    visible: true
                  });
                }

                this.contentVisible = this.isContentVisible();
              }
            }, {
              key: "endMarkedContent",
              value: function endMarkedContent() {
                this.markedContentStack.pop();
                this.contentVisible = this.isContentVisible();
              }
            }, {
              key: "beginCompat",
              value: function beginCompat() {}
            }, {
              key: "endCompat",
              value: function endCompat() {}
            }, {
              key: "consumePath",
              value: function consumePath() {
                var ctx = this.ctx;

                if (this.pendingClip) {
                  if (this.pendingClip === EO_CLIP) {
                    ctx.clip("evenodd");
                  } else {
                    ctx.clip();
                  }

                  this.pendingClip = null;
                }

                ctx.beginPath();
              }
            }, {
              key: "getSinglePixelWidth",
              value: function getSinglePixelWidth() {
                if (this._cachedGetSinglePixelWidth === null) {
                  var m = this.ctx.mozCurrentTransform;
                  var absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);
                  var sqNorm1 = Math.pow(m[0], 2) + Math.pow(m[2], 2);
                  var sqNorm2 = Math.pow(m[1], 2) + Math.pow(m[3], 2);
                  var pixelHeight = Math.sqrt(Math.max(sqNorm1, sqNorm2)) / absDet;

                  if (sqNorm1 !== sqNorm2 && this._combinedScaleFactor * pixelHeight > 1) {
                    this._cachedGetSinglePixelWidth = -(this._combinedScaleFactor * pixelHeight);
                  } else if (absDet > Number.EPSILON) {
                    this._cachedGetSinglePixelWidth = pixelHeight;
                  } else {
                    this._cachedGetSinglePixelWidth = 1;
                  }
                }

                return this._cachedGetSinglePixelWidth;
              }
            }, {
              key: "getCanvasPosition",
              value: function getCanvasPosition(x, y) {
                var transform = this.ctx.mozCurrentTransform;
                return [transform[0] * x + transform[2] * y + transform[4], transform[1] * x + transform[3] * y + transform[5]];
              }
            }, {
              key: "isContentVisible",
              value: function isContentVisible() {
                for (var i = this.markedContentStack.length - 1; i >= 0; i--) {
                  if (!this.markedContentStack[i].visible) {
                    return false;
                  }
                }

                return true;
              }
            }, {
              key: "isFontSubpixelAAEnabled",
              get: function get() {
                var _this$cachedCanvases$ = this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled", 10, 10),
                    ctx = _this$cachedCanvases$.context;

                ctx.scale(1.5, 1);
                ctx.fillText("I", 0, 10);
                var data = ctx.getImageData(0, 0, 10, 10).data;
                var enabled = false;

                for (var i = 3; i < data.length; i += 4) {
                  if (data[i] > 0 && data[i] < 255) {
                    enabled = true;
                    break;
                  }
                }

                return (0, _util.shadow)(this, "isFontSubpixelAAEnabled", enabled);
              }
            }]);

            return CanvasGraphics;
          }();

          for (var op in _util.OPS) {
            CanvasGraphics.prototype[_util.OPS[op]] = CanvasGraphics.prototype[op];
          }

          return CanvasGraphics;
        }();

        exports.CanvasGraphics = CanvasGraphics;
        /***/
      },
      /* 11 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.getShadingPattern = getShadingPattern;
        exports.TilingPattern = void 0;

        var _util = __w_pdfjs_require__(2);

        function applyBoundingBox(ctx, bbox) {
          if (!bbox || typeof Path2D === "undefined") {
            return;
          }

          var width = bbox[2] - bbox[0];
          var height = bbox[3] - bbox[1];
          var region = new Path2D();
          region.rect(bbox[0], bbox[1], width, height);
          ctx.clip(region);
        }

        var BaseShadingPattern =
        /*#__PURE__*/
        function () {
          function BaseShadingPattern() {
            _classCallCheck(this, BaseShadingPattern);

            if (this.constructor === BaseShadingPattern) {
              (0, _util.unreachable)("Cannot initialize BaseShadingPattern.");
            }
          }

          _createClass(BaseShadingPattern, [{
            key: "getPattern",
            value: function getPattern() {
              (0, _util.unreachable)("Abstract method `getPattern` called.");
            }
          }]);

          return BaseShadingPattern;
        }();

        var RadialAxialShadingPattern =
        /*#__PURE__*/
        function (_BaseShadingPattern) {
          _inherits(RadialAxialShadingPattern, _BaseShadingPattern);

          function RadialAxialShadingPattern(IR) {
            var _this27;

            _classCallCheck(this, RadialAxialShadingPattern);

            _this27 = _possibleConstructorReturn(this, _getPrototypeOf(RadialAxialShadingPattern).call(this));
            _this27._type = IR[1];
            _this27._bbox = IR[2];
            _this27._colorStops = IR[3];
            _this27._p0 = IR[4];
            _this27._p1 = IR[5];
            _this27._r0 = IR[6];
            _this27._r1 = IR[7];
            _this27._matrix = IR[8];
            _this27._patternCache = null;
            return _this27;
          }

          _createClass(RadialAxialShadingPattern, [{
            key: "_createGradient",
            value: function _createGradient(ctx) {
              var grad;

              if (this._type === "axial") {
                grad = ctx.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]);
              } else if (this._type === "radial") {
                grad = ctx.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1);
              }

              var _iteratorNormalCompletion23 = true;
              var _didIteratorError23 = false;
              var _iteratorError23 = undefined;

              try {
                for (var _iterator23 = this._colorStops[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {
                  var colorStop = _step23.value;
                  grad.addColorStop(colorStop[0], colorStop[1]);
                }
              } catch (err) {
                _didIteratorError23 = true;
                _iteratorError23 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion23 && _iterator23["return"] != null) {
                    _iterator23["return"]();
                  }
                } finally {
                  if (_didIteratorError23) {
                    throw _iteratorError23;
                  }
                }
              }

              return grad;
            }
          }, {
            key: "getPattern",
            value: function getPattern(ctx, owner, inverse) {
              var shadingFill = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
              var pattern;

              if (this._patternCache) {
                pattern = this._patternCache;
              } else {
                if (!shadingFill) {
                  var tmpCanvas = owner.cachedCanvases.getCanvas("pattern", owner.ctx.canvas.width, owner.ctx.canvas.height, true);
                  var tmpCtx = tmpCanvas.context;
                  tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);
                  tmpCtx.beginPath();
                  tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);
                  tmpCtx.setTransform.apply(tmpCtx, owner.baseTransform);

                  if (this._matrix) {
                    tmpCtx.transform.apply(tmpCtx, this._matrix);
                  }

                  applyBoundingBox(tmpCtx, this._bbox);
                  tmpCtx.fillStyle = this._createGradient(tmpCtx);
                  tmpCtx.fill();
                  pattern = ctx.createPattern(tmpCanvas.canvas, "repeat");
                } else {
                  applyBoundingBox(ctx, this._bbox);
                  pattern = this._createGradient(ctx);
                }

                this._patternCache = pattern;
              }

              if (!shadingFill) {
                var domMatrix = new DOMMatrix(inverse);

                try {
                  pattern.setTransform(domMatrix);
                } catch (ex) {
                  (0, _util.warn)("RadialAxialShadingPattern.getPattern: \"".concat(ex === null || ex === void 0 ? void 0 : ex.message, "\"."));
                }
              }

              return pattern;
            }
          }]);

          return RadialAxialShadingPattern;
        }(BaseShadingPattern);

        function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {
          var coords = context.coords,
              colors = context.colors;
          var bytes = data.data,
              rowSize = data.width * 4;
          var tmp;

          if (coords[p1 + 1] > coords[p2 + 1]) {
            tmp = p1;
            p1 = p2;
            p2 = tmp;
            tmp = c1;
            c1 = c2;
            c2 = tmp;
          }

          if (coords[p2 + 1] > coords[p3 + 1]) {
            tmp = p2;
            p2 = p3;
            p3 = tmp;
            tmp = c2;
            c2 = c3;
            c3 = tmp;
          }

          if (coords[p1 + 1] > coords[p2 + 1]) {
            tmp = p1;
            p1 = p2;
            p2 = tmp;
            tmp = c1;
            c1 = c2;
            c2 = tmp;
          }

          var x1 = (coords[p1] + context.offsetX) * context.scaleX;
          var y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;
          var x2 = (coords[p2] + context.offsetX) * context.scaleX;
          var y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;
          var x3 = (coords[p3] + context.offsetX) * context.scaleX;
          var y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;

          if (y1 >= y3) {
            return;
          }

          var c1r = colors[c1],
              c1g = colors[c1 + 1],
              c1b = colors[c1 + 2];
          var c2r = colors[c2],
              c2g = colors[c2 + 1],
              c2b = colors[c2 + 2];
          var c3r = colors[c3],
              c3g = colors[c3 + 1],
              c3b = colors[c3 + 2];
          var minY = Math.round(y1),
              maxY = Math.round(y3);
          var xa, car, cag, cab;
          var xb, cbr, cbg, cbb;

          for (var y = minY; y <= maxY; y++) {
            if (y < y2) {
              var _k4 = void 0;

              if (y < y1) {
                _k4 = 0;
              } else {
                _k4 = (y1 - y) / (y1 - y2);
              }

              xa = x1 - (x1 - x2) * _k4;
              car = c1r - (c1r - c2r) * _k4;
              cag = c1g - (c1g - c2g) * _k4;
              cab = c1b - (c1b - c2b) * _k4;
            } else {
              var _k5 = void 0;

              if (y > y3) {
                _k5 = 1;
              } else if (y2 === y3) {
                _k5 = 0;
              } else {
                _k5 = (y2 - y) / (y2 - y3);
              }

              xa = x2 - (x2 - x3) * _k5;
              car = c2r - (c2r - c3r) * _k5;
              cag = c2g - (c2g - c3g) * _k5;
              cab = c2b - (c2b - c3b) * _k5;
            }

            var k = void 0;

            if (y < y1) {
              k = 0;
            } else if (y > y3) {
              k = 1;
            } else {
              k = (y1 - y) / (y1 - y3);
            }

            xb = x1 - (x1 - x3) * k;
            cbr = c1r - (c1r - c3r) * k;
            cbg = c1g - (c1g - c3g) * k;
            cbb = c1b - (c1b - c3b) * k;
            var x1_ = Math.round(Math.min(xa, xb));
            var x2_ = Math.round(Math.max(xa, xb));
            var j = rowSize * y + x1_ * 4;

            for (var x = x1_; x <= x2_; x++) {
              k = (xa - x) / (xa - xb);

              if (k < 0) {
                k = 0;
              } else if (k > 1) {
                k = 1;
              }

              bytes[j++] = car - (car - cbr) * k | 0;
              bytes[j++] = cag - (cag - cbg) * k | 0;
              bytes[j++] = cab - (cab - cbb) * k | 0;
              bytes[j++] = 255;
            }
          }
        }

        function drawFigure(data, figure, context) {
          var ps = figure.coords;
          var cs = figure.colors;
          var i, ii;

          switch (figure.type) {
            case "lattice":
              var verticesPerRow = figure.verticesPerRow;
              var rows = Math.floor(ps.length / verticesPerRow) - 1;
              var cols = verticesPerRow - 1;

              for (i = 0; i < rows; i++) {
                var q = i * verticesPerRow;

                for (var j = 0; j < cols; j++, q++) {
                  drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);
                  drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);
                }
              }

              break;

            case "triangles":
              for (i = 0, ii = ps.length; i < ii; i += 3) {
                drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);
              }

              break;

            default:
              throw new Error("illegal figure");
          }
        }

        var MeshShadingPattern =
        /*#__PURE__*/
        function (_BaseShadingPattern2) {
          _inherits(MeshShadingPattern, _BaseShadingPattern2);

          function MeshShadingPattern(IR) {
            var _this28;

            _classCallCheck(this, MeshShadingPattern);

            _this28 = _possibleConstructorReturn(this, _getPrototypeOf(MeshShadingPattern).call(this));
            _this28._coords = IR[2];
            _this28._colors = IR[3];
            _this28._figures = IR[4];
            _this28._bounds = IR[5];
            _this28._matrix = IR[6];
            _this28._bbox = IR[7];
            _this28._background = IR[8];
            return _this28;
          }

          _createClass(MeshShadingPattern, [{
            key: "_createMeshCanvas",
            value: function _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {
              var EXPECTED_SCALE = 1.1;
              var MAX_PATTERN_SIZE = 3000;
              var BORDER_SIZE = 2;
              var offsetX = Math.floor(this._bounds[0]);
              var offsetY = Math.floor(this._bounds[1]);
              var boundsWidth = Math.ceil(this._bounds[2]) - offsetX;
              var boundsHeight = Math.ceil(this._bounds[3]) - offsetY;
              var width = Math.min(Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
              var height = Math.min(Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
              var scaleX = boundsWidth / width;
              var scaleY = boundsHeight / height;
              var context = {
                coords: this._coords,
                colors: this._colors,
                offsetX: -offsetX,
                offsetY: -offsetY,
                scaleX: 1 / scaleX,
                scaleY: 1 / scaleY
              };
              var paddedWidth = width + BORDER_SIZE * 2;
              var paddedHeight = height + BORDER_SIZE * 2;
              var tmpCanvas = cachedCanvases.getCanvas("mesh", paddedWidth, paddedHeight, false);
              var tmpCtx = tmpCanvas.context;
              var data = tmpCtx.createImageData(width, height);

              if (backgroundColor) {
                var bytes = data.data;

                for (var i = 0, ii = bytes.length; i < ii; i += 4) {
                  bytes[i] = backgroundColor[0];
                  bytes[i + 1] = backgroundColor[1];
                  bytes[i + 2] = backgroundColor[2];
                  bytes[i + 3] = 255;
                }
              }

              var _iteratorNormalCompletion24 = true;
              var _didIteratorError24 = false;
              var _iteratorError24 = undefined;

              try {
                for (var _iterator24 = this._figures[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {
                  var figure = _step24.value;
                  drawFigure(data, figure, context);
                }
              } catch (err) {
                _didIteratorError24 = true;
                _iteratorError24 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion24 && _iterator24["return"] != null) {
                    _iterator24["return"]();
                  }
                } finally {
                  if (_didIteratorError24) {
                    throw _iteratorError24;
                  }
                }
              }

              tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);
              var canvas = tmpCanvas.canvas;
              return {
                canvas: canvas,
                offsetX: offsetX - BORDER_SIZE * scaleX,
                offsetY: offsetY - BORDER_SIZE * scaleY,
                scaleX: scaleX,
                scaleY: scaleY
              };
            }
          }, {
            key: "getPattern",
            value: function getPattern(ctx, owner, inverse) {
              var shadingFill = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
              applyBoundingBox(ctx, this._bbox);
              var scale;

              if (shadingFill) {
                scale = _util.Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);
              } else {
                scale = _util.Util.singularValueDecompose2dScale(owner.baseTransform);

                if (this._matrix) {
                  var matrixScale = _util.Util.singularValueDecompose2dScale(this._matrix);

                  scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];
                }
              }

              var temporaryPatternCanvas = this._createMeshCanvas(scale, shadingFill ? null : this._background, owner.cachedCanvases);

              if (!shadingFill) {
                ctx.setTransform.apply(ctx, owner.baseTransform);

                if (this._matrix) {
                  ctx.transform.apply(ctx, this._matrix);
                }
              }

              ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);
              ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);
              return ctx.createPattern(temporaryPatternCanvas.canvas, "no-repeat");
            }
          }]);

          return MeshShadingPattern;
        }(BaseShadingPattern);

        var DummyShadingPattern =
        /*#__PURE__*/
        function (_BaseShadingPattern3) {
          _inherits(DummyShadingPattern, _BaseShadingPattern3);

          function DummyShadingPattern() {
            _classCallCheck(this, DummyShadingPattern);

            return _possibleConstructorReturn(this, _getPrototypeOf(DummyShadingPattern).apply(this, arguments));
          }

          _createClass(DummyShadingPattern, [{
            key: "getPattern",
            value: function getPattern() {
              return "hotpink";
            }
          }]);

          return DummyShadingPattern;
        }(BaseShadingPattern);

        function getShadingPattern(IR) {
          switch (IR[0]) {
            case "RadialAxial":
              return new RadialAxialShadingPattern(IR);

            case "Mesh":
              return new MeshShadingPattern(IR);

            case "Dummy":
              return new DummyShadingPattern();
          }

          throw new Error("Unknown IR type: ".concat(IR[0]));
        }

        var PaintType = {
          COLORED: 1,
          UNCOLORED: 2
        };

        var TilingPattern =
        /*#__PURE__*/
        function () {
          _createClass(TilingPattern, null, [{
            key: "MAX_PATTERN_SIZE",
            get: function get() {
              return (0, _util.shadow)(this, "MAX_PATTERN_SIZE", 3000);
            }
          }]);

          function TilingPattern(IR, color, ctx, canvasGraphicsFactory, baseTransform) {
            _classCallCheck(this, TilingPattern);

            this.operatorList = IR[2];
            this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];
            this.bbox = IR[4];
            this.xstep = IR[5];
            this.ystep = IR[6];
            this.paintType = IR[7];
            this.tilingType = IR[8];
            this.color = color;
            this.ctx = ctx;
            this.canvasGraphicsFactory = canvasGraphicsFactory;
            this.baseTransform = baseTransform;
          }

          _createClass(TilingPattern, [{
            key: "createPatternCanvas",
            value: function createPatternCanvas(owner) {
              var operatorList = this.operatorList;
              var bbox = this.bbox;
              var xstep = this.xstep;
              var ystep = this.ystep;
              var paintType = this.paintType;
              var tilingType = this.tilingType;
              var color = this.color;
              var canvasGraphicsFactory = this.canvasGraphicsFactory;
              (0, _util.info)("TilingType: " + tilingType);
              var x0 = bbox[0],
                  y0 = bbox[1],
                  x1 = bbox[2],
                  y1 = bbox[3];

              var matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);

              var curMatrixScale = _util.Util.singularValueDecompose2dScale(this.baseTransform);

              var combinedScale = [matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1]];
              var dimx = this.getSizeAndScale(xstep, this.ctx.canvas.width, combinedScale[0]);
              var dimy = this.getSizeAndScale(ystep, this.ctx.canvas.height, combinedScale[1]);
              var tmpCanvas = owner.cachedCanvases.getCanvas("pattern", dimx.size, dimy.size, true);
              var tmpCtx = tmpCanvas.context;
              var graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);
              graphics.groupLevel = owner.groupLevel;
              this.setFillAndStrokeStyleToContext(graphics, paintType, color);
              var adjustedX0 = x0;
              var adjustedY0 = y0;
              var adjustedX1 = x1;
              var adjustedY1 = y1;

              if (x0 < 0) {
                adjustedX0 = 0;
                adjustedX1 += Math.abs(x0);
              }

              if (y0 < 0) {
                adjustedY0 = 0;
                adjustedY1 += Math.abs(y0);
              }

              tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));
              graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);
              this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);
              graphics.baseTransform = graphics.ctx.mozCurrentTransform.slice();
              graphics.executeOperatorList(operatorList);
              graphics.endDrawing();
              return {
                canvas: tmpCanvas.canvas,
                scaleX: dimx.scale,
                scaleY: dimy.scale,
                offsetX: adjustedX0,
                offsetY: adjustedY0
              };
            }
          }, {
            key: "getSizeAndScale",
            value: function getSizeAndScale(step, realOutputSize, scale) {
              step = Math.abs(step);
              var maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);
              var size = Math.ceil(step * scale);

              if (size >= maxSize) {
                size = maxSize;
              } else {
                scale = size / step;
              }

              return {
                scale: scale,
                size: size
              };
            }
          }, {
            key: "clipBbox",
            value: function clipBbox(graphics, x0, y0, x1, y1) {
              var bboxWidth = x1 - x0;
              var bboxHeight = y1 - y0;
              graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);
              graphics.clip();
              graphics.endPath();
            }
          }, {
            key: "setFillAndStrokeStyleToContext",
            value: function setFillAndStrokeStyleToContext(graphics, paintType, color) {
              var context = graphics.ctx,
                  current = graphics.current;

              switch (paintType) {
                case PaintType.COLORED:
                  var ctx = this.ctx;
                  context.fillStyle = ctx.fillStyle;
                  context.strokeStyle = ctx.strokeStyle;
                  current.fillColor = ctx.fillStyle;
                  current.strokeColor = ctx.strokeStyle;
                  break;

                case PaintType.UNCOLORED:
                  var cssColor = _util.Util.makeHexColor(color[0], color[1], color[2]);

                  context.fillStyle = cssColor;
                  context.strokeStyle = cssColor;
                  current.fillColor = cssColor;
                  current.strokeColor = cssColor;
                  break;

                default:
                  throw new _util.FormatError("Unsupported paint type: ".concat(paintType));
              }
            }
          }, {
            key: "getPattern",
            value: function getPattern(ctx, owner, inverse) {
              var shadingFill = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
              var matrix = inverse;

              if (!shadingFill) {
                matrix = _util.Util.transform(matrix, owner.baseTransform);

                if (this.matrix) {
                  matrix = _util.Util.transform(matrix, this.matrix);
                }
              }

              var temporaryPatternCanvas = this.createPatternCanvas(owner);
              var domMatrix = new DOMMatrix(matrix);
              domMatrix = domMatrix.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);
              domMatrix = domMatrix.scale(1 / temporaryPatternCanvas.scaleX, 1 / temporaryPatternCanvas.scaleY);
              var pattern = ctx.createPattern(temporaryPatternCanvas.canvas, "repeat");

              try {
                pattern.setTransform(domMatrix);
              } catch (ex) {
                (0, _util.warn)("TilingPattern.getPattern: \"".concat(ex === null || ex === void 0 ? void 0 : ex.message, "\"."));
              }

              return pattern;
            }
          }]);

          return TilingPattern;
        }();

        exports.TilingPattern = TilingPattern;
        /***/
      },
      /* 12 */

      /***/
      function (__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GlobalWorkerOptions = void 0;
        var GlobalWorkerOptions = Object.create(null);
        exports.GlobalWorkerOptions = GlobalWorkerOptions;
        GlobalWorkerOptions.workerPort = GlobalWorkerOptions.workerPort === undefined ? null : GlobalWorkerOptions.workerPort;
        GlobalWorkerOptions.workerSrc = GlobalWorkerOptions.workerSrc === undefined ? "" : GlobalWorkerOptions.workerSrc;
        /***/
      },
      /* 13 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.MessageHandler = void 0;

        var _util = __w_pdfjs_require__(2);

        var CallbackKind = {
          UNKNOWN: 0,
          DATA: 1,
          ERROR: 2
        };
        var StreamKind = {
          UNKNOWN: 0,
          CANCEL: 1,
          CANCEL_COMPLETE: 2,
          CLOSE: 3,
          ENQUEUE: 4,
          ERROR: 5,
          PULL: 6,
          PULL_COMPLETE: 7,
          START_COMPLETE: 8
        };

        function wrapReason(reason) {
          if (_typeof(reason) !== "object" || reason === null) {
            return reason;
          }

          switch (reason.name) {
            case "AbortException":
              return new _util.AbortException(reason.message);

            case "MissingPDFException":
              return new _util.MissingPDFException(reason.message);

            case "UnexpectedResponseException":
              return new _util.UnexpectedResponseException(reason.message, reason.status);

            case "UnknownErrorException":
              return new _util.UnknownErrorException(reason.message, reason.details);

            default:
              return new _util.UnknownErrorException(reason.message, reason.toString());
          }
        }

        var MessageHandler =
        /*#__PURE__*/
        function () {
          function MessageHandler(sourceName, targetName, comObj) {
            var _this29 = this;

            _classCallCheck(this, MessageHandler);

            this.sourceName = sourceName;
            this.targetName = targetName;
            this.comObj = comObj;
            this.callbackId = 1;
            this.streamId = 1;
            this.postMessageTransfers = true;
            this.streamSinks = Object.create(null);
            this.streamControllers = Object.create(null);
            this.callbackCapabilities = Object.create(null);
            this.actionHandler = Object.create(null);

            this._onComObjOnMessage = function (event) {
              var data = event.data;

              if (data.targetName !== _this29.sourceName) {
                return;
              }

              if (data.stream) {
                _this29._processStreamMessage(data);

                return;
              }

              if (data.callback) {
                var callbackId = data.callbackId;
                var capability = _this29.callbackCapabilities[callbackId];

                if (!capability) {
                  throw new Error("Cannot resolve callback ".concat(callbackId));
                }

                delete _this29.callbackCapabilities[callbackId];

                if (data.callback === CallbackKind.DATA) {
                  capability.resolve(data.data);
                } else if (data.callback === CallbackKind.ERROR) {
                  capability.reject(wrapReason(data.reason));
                } else {
                  throw new Error("Unexpected callback case");
                }

                return;
              }

              var action = _this29.actionHandler[data.action];

              if (!action) {
                throw new Error("Unknown action from worker: ".concat(data.action));
              }

              if (data.callbackId) {
                var cbSourceName = _this29.sourceName;
                var cbTargetName = data.sourceName;
                new Promise(function (resolve) {
                  resolve(action(data.data));
                }).then(function (result) {
                  comObj.postMessage({
                    sourceName: cbSourceName,
                    targetName: cbTargetName,
                    callback: CallbackKind.DATA,
                    callbackId: data.callbackId,
                    data: result
                  });
                }, function (reason) {
                  comObj.postMessage({
                    sourceName: cbSourceName,
                    targetName: cbTargetName,
                    callback: CallbackKind.ERROR,
                    callbackId: data.callbackId,
                    reason: wrapReason(reason)
                  });
                });
                return;
              }

              if (data.streamId) {
                _this29._createStreamSink(data);

                return;
              }

              action(data.data);
            };

            comObj.addEventListener("message", this._onComObjOnMessage);
          }

          _createClass(MessageHandler, [{
            key: "on",
            value: function on(actionName, handler) {
              var ah = this.actionHandler;

              if (ah[actionName]) {
                throw new Error("There is already an actionName called \"".concat(actionName, "\""));
              }

              ah[actionName] = handler;
            }
          }, {
            key: "send",
            value: function send(actionName, data, transfers) {
              this._postMessage({
                sourceName: this.sourceName,
                targetName: this.targetName,
                action: actionName,
                data: data
              }, transfers);
            }
          }, {
            key: "sendWithPromise",
            value: function sendWithPromise(actionName, data, transfers) {
              var callbackId = this.callbackId++;
              var capability = (0, _util.createPromiseCapability)();
              this.callbackCapabilities[callbackId] = capability;

              try {
                this._postMessage({
                  sourceName: this.sourceName,
                  targetName: this.targetName,
                  action: actionName,
                  callbackId: callbackId,
                  data: data
                }, transfers);
              } catch (ex) {
                capability.reject(ex);
              }

              return capability.promise;
            }
          }, {
            key: "sendWithStream",
            value: function sendWithStream(actionName, data, queueingStrategy, transfers) {
              var _this30 = this;

              var streamId = this.streamId++;
              var sourceName = this.sourceName;
              var targetName = this.targetName;
              var comObj = this.comObj;
              return new ReadableStream({
                start: function start(controller) {
                  var startCapability = (0, _util.createPromiseCapability)();
                  _this30.streamControllers[streamId] = {
                    controller: controller,
                    startCall: startCapability,
                    pullCall: null,
                    cancelCall: null,
                    isClosed: false
                  };

                  _this30._postMessage({
                    sourceName: sourceName,
                    targetName: targetName,
                    action: actionName,
                    streamId: streamId,
                    data: data,
                    desiredSize: controller.desiredSize
                  }, transfers);

                  return startCapability.promise;
                },
                pull: function pull(controller) {
                  var pullCapability = (0, _util.createPromiseCapability)();
                  _this30.streamControllers[streamId].pullCall = pullCapability;
                  comObj.postMessage({
                    sourceName: sourceName,
                    targetName: targetName,
                    stream: StreamKind.PULL,
                    streamId: streamId,
                    desiredSize: controller.desiredSize
                  });
                  return pullCapability.promise;
                },
                cancel: function cancel(reason) {
                  (0, _util.assert)(reason instanceof Error, "cancel must have a valid reason");
                  var cancelCapability = (0, _util.createPromiseCapability)();
                  _this30.streamControllers[streamId].cancelCall = cancelCapability;
                  _this30.streamControllers[streamId].isClosed = true;
                  comObj.postMessage({
                    sourceName: sourceName,
                    targetName: targetName,
                    stream: StreamKind.CANCEL,
                    streamId: streamId,
                    reason: wrapReason(reason)
                  });
                  return cancelCapability.promise;
                }
              }, queueingStrategy);
            }
          }, {
            key: "_createStreamSink",
            value: function _createStreamSink(data) {
              var self = this;
              var action = this.actionHandler[data.action];
              var streamId = data.streamId;
              var sourceName = this.sourceName;
              var targetName = data.sourceName;
              var comObj = this.comObj;
              var streamSink = {
                enqueue: function enqueue(chunk) {
                  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
                  var transfers = arguments.length > 2 ? arguments[2] : undefined;

                  if (this.isCancelled) {
                    return;
                  }

                  var lastDesiredSize = this.desiredSize;
                  this.desiredSize -= size;

                  if (lastDesiredSize > 0 && this.desiredSize <= 0) {
                    this.sinkCapability = (0, _util.createPromiseCapability)();
                    this.ready = this.sinkCapability.promise;
                  }

                  self._postMessage({
                    sourceName: sourceName,
                    targetName: targetName,
                    stream: StreamKind.ENQUEUE,
                    streamId: streamId,
                    chunk: chunk
                  }, transfers);
                },
                close: function close() {
                  if (this.isCancelled) {
                    return;
                  }

                  this.isCancelled = true;
                  comObj.postMessage({
                    sourceName: sourceName,
                    targetName: targetName,
                    stream: StreamKind.CLOSE,
                    streamId: streamId
                  });
                  delete self.streamSinks[streamId];
                },
                error: function error(reason) {
                  (0, _util.assert)(reason instanceof Error, "error must have a valid reason");

                  if (this.isCancelled) {
                    return;
                  }

                  this.isCancelled = true;
                  comObj.postMessage({
                    sourceName: sourceName,
                    targetName: targetName,
                    stream: StreamKind.ERROR,
                    streamId: streamId,
                    reason: wrapReason(reason)
                  });
                },
                sinkCapability: (0, _util.createPromiseCapability)(),
                onPull: null,
                onCancel: null,
                isCancelled: false,
                desiredSize: data.desiredSize,
                ready: null
              };
              streamSink.sinkCapability.resolve();
              streamSink.ready = streamSink.sinkCapability.promise;
              this.streamSinks[streamId] = streamSink;
              new Promise(function (resolve) {
                resolve(action(data.data, streamSink));
              }).then(function () {
                comObj.postMessage({
                  sourceName: sourceName,
                  targetName: targetName,
                  stream: StreamKind.START_COMPLETE,
                  streamId: streamId,
                  success: true
                });
              }, function (reason) {
                comObj.postMessage({
                  sourceName: sourceName,
                  targetName: targetName,
                  stream: StreamKind.START_COMPLETE,
                  streamId: streamId,
                  reason: wrapReason(reason)
                });
              });
            }
          }, {
            key: "_processStreamMessage",
            value: function _processStreamMessage(data) {
              var streamId = data.streamId;
              var sourceName = this.sourceName;
              var targetName = data.sourceName;
              var comObj = this.comObj;

              switch (data.stream) {
                case StreamKind.START_COMPLETE:
                  if (data.success) {
                    this.streamControllers[streamId].startCall.resolve();
                  } else {
                    this.streamControllers[streamId].startCall.reject(wrapReason(data.reason));
                  }

                  break;

                case StreamKind.PULL_COMPLETE:
                  if (data.success) {
                    this.streamControllers[streamId].pullCall.resolve();
                  } else {
                    this.streamControllers[streamId].pullCall.reject(wrapReason(data.reason));
                  }

                  break;

                case StreamKind.PULL:
                  if (!this.streamSinks[streamId]) {
                    comObj.postMessage({
                      sourceName: sourceName,
                      targetName: targetName,
                      stream: StreamKind.PULL_COMPLETE,
                      streamId: streamId,
                      success: true
                    });
                    break;
                  }

                  if (this.streamSinks[streamId].desiredSize <= 0 && data.desiredSize > 0) {
                    this.streamSinks[streamId].sinkCapability.resolve();
                  }

                  this.streamSinks[streamId].desiredSize = data.desiredSize;
                  var onPull = this.streamSinks[data.streamId].onPull;
                  new Promise(function (resolve) {
                    resolve(onPull && onPull());
                  }).then(function () {
                    comObj.postMessage({
                      sourceName: sourceName,
                      targetName: targetName,
                      stream: StreamKind.PULL_COMPLETE,
                      streamId: streamId,
                      success: true
                    });
                  }, function (reason) {
                    comObj.postMessage({
                      sourceName: sourceName,
                      targetName: targetName,
                      stream: StreamKind.PULL_COMPLETE,
                      streamId: streamId,
                      reason: wrapReason(reason)
                    });
                  });
                  break;

                case StreamKind.ENQUEUE:
                  (0, _util.assert)(this.streamControllers[streamId], "enqueue should have stream controller");

                  if (this.streamControllers[streamId].isClosed) {
                    break;
                  }

                  this.streamControllers[streamId].controller.enqueue(data.chunk);
                  break;

                case StreamKind.CLOSE:
                  (0, _util.assert)(this.streamControllers[streamId], "close should have stream controller");

                  if (this.streamControllers[streamId].isClosed) {
                    break;
                  }

                  this.streamControllers[streamId].isClosed = true;
                  this.streamControllers[streamId].controller.close();

                  this._deleteStreamController(streamId);

                  break;

                case StreamKind.ERROR:
                  (0, _util.assert)(this.streamControllers[streamId], "error should have stream controller");
                  this.streamControllers[streamId].controller.error(wrapReason(data.reason));

                  this._deleteStreamController(streamId);

                  break;

                case StreamKind.CANCEL_COMPLETE:
                  if (data.success) {
                    this.streamControllers[streamId].cancelCall.resolve();
                  } else {
                    this.streamControllers[streamId].cancelCall.reject(wrapReason(data.reason));
                  }

                  this._deleteStreamController(streamId);

                  break;

                case StreamKind.CANCEL:
                  if (!this.streamSinks[streamId]) {
                    break;
                  }

                  var onCancel = this.streamSinks[data.streamId].onCancel;
                  new Promise(function (resolve) {
                    resolve(onCancel && onCancel(wrapReason(data.reason)));
                  }).then(function () {
                    comObj.postMessage({
                      sourceName: sourceName,
                      targetName: targetName,
                      stream: StreamKind.CANCEL_COMPLETE,
                      streamId: streamId,
                      success: true
                    });
                  }, function (reason) {
                    comObj.postMessage({
                      sourceName: sourceName,
                      targetName: targetName,
                      stream: StreamKind.CANCEL_COMPLETE,
                      streamId: streamId,
                      reason: wrapReason(reason)
                    });
                  });
                  this.streamSinks[streamId].sinkCapability.reject(wrapReason(data.reason));
                  this.streamSinks[streamId].isCancelled = true;
                  delete this.streamSinks[streamId];
                  break;

                default:
                  throw new Error("Unexpected stream case");
              }
            }
          }, {
            key: "_deleteStreamController",
            value: function () {
              var _deleteStreamController2 = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee9(streamId) {
                return regeneratorRuntime.wrap(function _callee9$(_context9) {
                  while (1) {
                    switch (_context9.prev = _context9.next) {
                      case 0:
                        _context9.next = 2;
                        return Promise.allSettled([this.streamControllers[streamId].startCall, this.streamControllers[streamId].pullCall, this.streamControllers[streamId].cancelCall].map(function (capability) {
                          return capability && capability.promise;
                        }));

                      case 2:
                        delete this.streamControllers[streamId];

                      case 3:
                      case "end":
                        return _context9.stop();
                    }
                  }
                }, _callee9, this);
              }));

              function _deleteStreamController(_x5) {
                return _deleteStreamController2.apply(this, arguments);
              }

              return _deleteStreamController;
            }()
          }, {
            key: "_postMessage",
            value: function _postMessage(message, transfers) {
              if (transfers && this.postMessageTransfers) {
                this.comObj.postMessage(message, transfers);
              } else {
                this.comObj.postMessage(message);
              }
            }
          }, {
            key: "destroy",
            value: function destroy() {
              this.comObj.removeEventListener("message", this._onComObjOnMessage);
            }
          }]);

          return MessageHandler;
        }();

        exports.MessageHandler = MessageHandler;
        /***/
      },
      /* 14 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Metadata = void 0;

        var _util = __w_pdfjs_require__(2);

        var Metadata =
        /*#__PURE__*/
        function () {
          function Metadata(_ref38) {
            var parsedData = _ref38.parsedData,
                rawData = _ref38.rawData;

            _classCallCheck(this, Metadata);

            this._metadataMap = parsedData;
            this._data = rawData;
          }

          _createClass(Metadata, [{
            key: "getRaw",
            value: function getRaw() {
              return this._data;
            }
          }, {
            key: "get",
            value: function get(name) {
              var _this$_metadataMap$ge;

              return (_this$_metadataMap$ge = this._metadataMap.get(name)) !== null && _this$_metadataMap$ge !== void 0 ? _this$_metadataMap$ge : null;
            }
          }, {
            key: "getAll",
            value: function getAll() {
              return (0, _util.objectFromMap)(this._metadataMap);
            }
          }, {
            key: "has",
            value: function has(name) {
              return this._metadataMap.has(name);
            }
          }]);

          return Metadata;
        }();

        exports.Metadata = Metadata;
        /***/
      },
      /* 15 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.OptionalContentConfig = void 0;

        var _util = __w_pdfjs_require__(2);

        var OptionalContentGroup = function OptionalContentGroup(name, intent) {
          _classCallCheck(this, OptionalContentGroup);

          this.visible = true;
          this.name = name;
          this.intent = intent;
        };

        var OptionalContentConfig =
        /*#__PURE__*/
        function () {
          function OptionalContentConfig(data) {
            _classCallCheck(this, OptionalContentConfig);

            this.name = null;
            this.creator = null;
            this._order = null;
            this._groups = new Map();

            if (data === null) {
              return;
            }

            this.name = data.name;
            this.creator = data.creator;
            this._order = data.order;
            var _iteratorNormalCompletion25 = true;
            var _didIteratorError25 = false;
            var _iteratorError25 = undefined;

            try {
              for (var _iterator25 = data.groups[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {
                var _group = _step25.value;

                this._groups.set(_group.id, new OptionalContentGroup(_group.name, _group.intent));
              }
            } catch (err) {
              _didIteratorError25 = true;
              _iteratorError25 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion25 && _iterator25["return"] != null) {
                  _iterator25["return"]();
                }
              } finally {
                if (_didIteratorError25) {
                  throw _iteratorError25;
                }
              }
            }

            if (data.baseState === "OFF") {
              var _iteratorNormalCompletion26 = true;
              var _didIteratorError26 = false;
              var _iteratorError26 = undefined;

              try {
                for (var _iterator26 = this._groups[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {
                  var group = _step26.value;
                  group.visible = false;
                }
              } catch (err) {
                _didIteratorError26 = true;
                _iteratorError26 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion26 && _iterator26["return"] != null) {
                    _iterator26["return"]();
                  }
                } finally {
                  if (_didIteratorError26) {
                    throw _iteratorError26;
                  }
                }
              }
            }

            var _iteratorNormalCompletion27 = true;
            var _didIteratorError27 = false;
            var _iteratorError27 = undefined;

            try {
              for (var _iterator27 = data.on[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {
                var on = _step27.value;
                this._groups.get(on).visible = true;
              }
            } catch (err) {
              _didIteratorError27 = true;
              _iteratorError27 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion27 && _iterator27["return"] != null) {
                  _iterator27["return"]();
                }
              } finally {
                if (_didIteratorError27) {
                  throw _iteratorError27;
                }
              }
            }

            var _iteratorNormalCompletion28 = true;
            var _didIteratorError28 = false;
            var _iteratorError28 = undefined;

            try {
              for (var _iterator28 = data.off[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {
                var off = _step28.value;
                this._groups.get(off).visible = false;
              }
            } catch (err) {
              _didIteratorError28 = true;
              _iteratorError28 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion28 && _iterator28["return"] != null) {
                  _iterator28["return"]();
                }
              } finally {
                if (_didIteratorError28) {
                  throw _iteratorError28;
                }
              }
            }
          }

          _createClass(OptionalContentConfig, [{
            key: "_evaluateVisibilityExpression",
            value: function _evaluateVisibilityExpression(array) {
              var length = array.length;

              if (length < 2) {
                return true;
              }

              var operator = array[0];

              for (var i = 1; i < length; i++) {
                var element = array[i];
                var state = void 0;

                if (Array.isArray(element)) {
                  state = this._evaluateVisibilityExpression(element);
                } else if (this._groups.has(element)) {
                  state = this._groups.get(element).visible;
                } else {
                  (0, _util.warn)("Optional content group not found: ".concat(element));
                  return true;
                }

                switch (operator) {
                  case "And":
                    if (!state) {
                      return false;
                    }

                    break;

                  case "Or":
                    if (state) {
                      return true;
                    }

                    break;

                  case "Not":
                    return !state;

                  default:
                    return true;
                }
              }

              return operator === "And";
            }
          }, {
            key: "isVisible",
            value: function isVisible(group) {
              if (group.type === "OCG") {
                if (!this._groups.has(group.id)) {
                  (0, _util.warn)("Optional content group not found: ".concat(group.id));
                  return true;
                }

                return this._groups.get(group.id).visible;
              } else if (group.type === "OCMD") {
                if (group.expression) {
                  return this._evaluateVisibilityExpression(group.expression);
                }

                if (!group.policy || group.policy === "AnyOn") {
                  var _iteratorNormalCompletion29 = true;
                  var _didIteratorError29 = false;
                  var _iteratorError29 = undefined;

                  try {
                    for (var _iterator29 = group.ids[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {
                      var id = _step29.value;

                      if (!this._groups.has(id)) {
                        (0, _util.warn)("Optional content group not found: ".concat(id));
                        return true;
                      }

                      if (this._groups.get(id).visible) {
                        return true;
                      }
                    }
                  } catch (err) {
                    _didIteratorError29 = true;
                    _iteratorError29 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion29 && _iterator29["return"] != null) {
                        _iterator29["return"]();
                      }
                    } finally {
                      if (_didIteratorError29) {
                        throw _iteratorError29;
                      }
                    }
                  }

                  return false;
                } else if (group.policy === "AllOn") {
                  var _iteratorNormalCompletion30 = true;
                  var _didIteratorError30 = false;
                  var _iteratorError30 = undefined;

                  try {
                    for (var _iterator30 = group.ids[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {
                      var _id = _step30.value;

                      if (!this._groups.has(_id)) {
                        (0, _util.warn)("Optional content group not found: ".concat(_id));
                        return true;
                      }

                      if (!this._groups.get(_id).visible) {
                        return false;
                      }
                    }
                  } catch (err) {
                    _didIteratorError30 = true;
                    _iteratorError30 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion30 && _iterator30["return"] != null) {
                        _iterator30["return"]();
                      }
                    } finally {
                      if (_didIteratorError30) {
                        throw _iteratorError30;
                      }
                    }
                  }

                  return true;
                } else if (group.policy === "AnyOff") {
                  var _iteratorNormalCompletion31 = true;
                  var _didIteratorError31 = false;
                  var _iteratorError31 = undefined;

                  try {
                    for (var _iterator31 = group.ids[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {
                      var _id2 = _step31.value;

                      if (!this._groups.has(_id2)) {
                        (0, _util.warn)("Optional content group not found: ".concat(_id2));
                        return true;
                      }

                      if (!this._groups.get(_id2).visible) {
                        return true;
                      }
                    }
                  } catch (err) {
                    _didIteratorError31 = true;
                    _iteratorError31 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion31 && _iterator31["return"] != null) {
                        _iterator31["return"]();
                      }
                    } finally {
                      if (_didIteratorError31) {
                        throw _iteratorError31;
                      }
                    }
                  }

                  return false;
                } else if (group.policy === "AllOff") {
                  var _iteratorNormalCompletion32 = true;
                  var _didIteratorError32 = false;
                  var _iteratorError32 = undefined;

                  try {
                    for (var _iterator32 = group.ids[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {
                      var _id3 = _step32.value;

                      if (!this._groups.has(_id3)) {
                        (0, _util.warn)("Optional content group not found: ".concat(_id3));
                        return true;
                      }

                      if (this._groups.get(_id3).visible) {
                        return false;
                      }
                    }
                  } catch (err) {
                    _didIteratorError32 = true;
                    _iteratorError32 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion32 && _iterator32["return"] != null) {
                        _iterator32["return"]();
                      }
                    } finally {
                      if (_didIteratorError32) {
                        throw _iteratorError32;
                      }
                    }
                  }

                  return true;
                }

                (0, _util.warn)("Unknown optional content policy ".concat(group.policy, "."));
                return true;
              }

              (0, _util.warn)("Unknown group type ".concat(group.type, "."));
              return true;
            }
          }, {
            key: "setVisibility",
            value: function setVisibility(id) {
              var visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

              if (!this._groups.has(id)) {
                (0, _util.warn)("Optional content group not found: ".concat(id));
                return;
              }

              this._groups.get(id).visible = !!visible;
            }
          }, {
            key: "getOrder",
            value: function getOrder() {
              if (!this._groups.size) {
                return null;
              }

              if (this._order) {
                return this._order.slice();
              }

              return Array.from(this._groups.keys());
            }
          }, {
            key: "getGroups",
            value: function getGroups() {
              return this._groups.size > 0 ? (0, _util.objectFromMap)(this._groups) : null;
            }
          }, {
            key: "getGroup",
            value: function getGroup(id) {
              return this._groups.get(id) || null;
            }
          }]);

          return OptionalContentConfig;
        }();

        exports.OptionalContentConfig = OptionalContentConfig;
        /***/
      },
      /* 16 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFDataTransportStream = void 0;

        var _util = __w_pdfjs_require__(2);

        var _display_utils = __w_pdfjs_require__(1);

        var PDFDataTransportStream =
        /*#__PURE__*/
        function () {
          function PDFDataTransportStream(params, pdfDataRangeTransport) {
            var _this31 = this;

            _classCallCheck(this, PDFDataTransportStream);

            (0, _util.assert)(pdfDataRangeTransport, 'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.');
            this._queuedChunks = [];
            this._progressiveDone = params.progressiveDone || false;
            this._contentDispositionFilename = params.contentDispositionFilename || null;
            var initialData = params.initialData;

            if ((initialData === null || initialData === void 0 ? void 0 : initialData.length) > 0) {
              var buffer = new Uint8Array(initialData).buffer;

              this._queuedChunks.push(buffer);
            }

            this._pdfDataRangeTransport = pdfDataRangeTransport;
            this._isStreamingSupported = !params.disableStream;
            this._isRangeSupported = !params.disableRange;
            this._contentLength = params.length;
            this._fullRequestReader = null;
            this._rangeReaders = [];

            this._pdfDataRangeTransport.addRangeListener(function (begin, chunk) {
              _this31._onReceiveData({
                begin: begin,
                chunk: chunk
              });
            });

            this._pdfDataRangeTransport.addProgressListener(function (loaded, total) {
              _this31._onProgress({
                loaded: loaded,
                total: total
              });
            });

            this._pdfDataRangeTransport.addProgressiveReadListener(function (chunk) {
              _this31._onReceiveData({
                chunk: chunk
              });
            });

            this._pdfDataRangeTransport.addProgressiveDoneListener(function () {
              _this31._onProgressiveDone();
            });

            this._pdfDataRangeTransport.transportReady();
          }

          _createClass(PDFDataTransportStream, [{
            key: "_onReceiveData",
            value: function _onReceiveData(args) {
              var buffer = new Uint8Array(args.chunk).buffer;

              if (args.begin === undefined) {
                if (this._fullRequestReader) {
                  this._fullRequestReader._enqueue(buffer);
                } else {
                  this._queuedChunks.push(buffer);
                }
              } else {
                var found = this._rangeReaders.some(function (rangeReader) {
                  if (rangeReader._begin !== args.begin) {
                    return false;
                  }

                  rangeReader._enqueue(buffer);

                  return true;
                });

                (0, _util.assert)(found, "_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.");
              }
            }
          }, {
            key: "_onProgress",
            value: function _onProgress(evt) {
              if (evt.total === undefined) {
                var firstReader = this._rangeReaders[0];

                if (firstReader !== null && firstReader !== void 0 && firstReader.onProgress) {
                  firstReader.onProgress({
                    loaded: evt.loaded
                  });
                }
              } else {
                var fullReader = this._fullRequestReader;

                if (fullReader !== null && fullReader !== void 0 && fullReader.onProgress) {
                  fullReader.onProgress({
                    loaded: evt.loaded,
                    total: evt.total
                  });
                }
              }
            }
          }, {
            key: "_onProgressiveDone",
            value: function _onProgressiveDone() {
              if (this._fullRequestReader) {
                this._fullRequestReader.progressiveDone();
              }

              this._progressiveDone = true;
            }
          }, {
            key: "_removeRangeReader",
            value: function _removeRangeReader(reader) {
              var i = this._rangeReaders.indexOf(reader);

              if (i >= 0) {
                this._rangeReaders.splice(i, 1);
              }
            }
          }, {
            key: "getFullReader",
            value: function getFullReader() {
              (0, _util.assert)(!this._fullRequestReader, "PDFDataTransportStream.getFullReader can only be called once.");
              var queuedChunks = this._queuedChunks;
              this._queuedChunks = null;
              return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone, this._contentDispositionFilename);
            }
          }, {
            key: "getRangeReader",
            value: function getRangeReader(begin, end) {
              if (end <= this._progressiveDataLength) {
                return null;
              }

              var reader = new PDFDataTransportStreamRangeReader(this, begin, end);

              this._pdfDataRangeTransport.requestDataRange(begin, end);

              this._rangeReaders.push(reader);

              return reader;
            }
          }, {
            key: "cancelAllRequests",
            value: function cancelAllRequests(reason) {
              if (this._fullRequestReader) {
                this._fullRequestReader.cancel(reason);
              }

              var _iteratorNormalCompletion33 = true;
              var _didIteratorError33 = false;
              var _iteratorError33 = undefined;

              try {
                for (var _iterator33 = this._rangeReaders.slice(0)[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {
                  var reader = _step33.value;
                  reader.cancel(reason);
                }
              } catch (err) {
                _didIteratorError33 = true;
                _iteratorError33 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion33 && _iterator33["return"] != null) {
                    _iterator33["return"]();
                  }
                } finally {
                  if (_didIteratorError33) {
                    throw _iteratorError33;
                  }
                }
              }

              this._pdfDataRangeTransport.abort();
            }
          }, {
            key: "_progressiveDataLength",
            get: function get() {
              var _ref39, _this$_fullRequestRea;

              return (_ref39 = (_this$_fullRequestRea = this._fullRequestReader) === null || _this$_fullRequestRea === void 0 ? void 0 : _this$_fullRequestRea._loaded) !== null && _ref39 !== void 0 ? _ref39 : 0;
            }
          }]);

          return PDFDataTransportStream;
        }();

        exports.PDFDataTransportStream = PDFDataTransportStream;

        var PDFDataTransportStreamReader =
        /*#__PURE__*/
        function () {
          function PDFDataTransportStreamReader(stream, queuedChunks) {
            var progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var contentDispositionFilename = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

            _classCallCheck(this, PDFDataTransportStreamReader);

            this._stream = stream;
            this._done = progressiveDone || false;
            this._filename = (0, _display_utils.isPdfFile)(contentDispositionFilename) ? contentDispositionFilename : null;
            this._queuedChunks = queuedChunks || [];
            this._loaded = 0;
            var _iteratorNormalCompletion34 = true;
            var _didIteratorError34 = false;
            var _iteratorError34 = undefined;

            try {
              for (var _iterator34 = this._queuedChunks[Symbol.iterator](), _step34; !(_iteratorNormalCompletion34 = (_step34 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {
                var chunk = _step34.value;
                this._loaded += chunk.byteLength;
              }
            } catch (err) {
              _didIteratorError34 = true;
              _iteratorError34 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion34 && _iterator34["return"] != null) {
                  _iterator34["return"]();
                }
              } finally {
                if (_didIteratorError34) {
                  throw _iteratorError34;
                }
              }
            }

            this._requests = [];
            this._headersReady = Promise.resolve();
            stream._fullRequestReader = this;
            this.onProgress = null;
          }

          _createClass(PDFDataTransportStreamReader, [{
            key: "_enqueue",
            value: function _enqueue(chunk) {
              if (this._done) {
                return;
              }

              if (this._requests.length > 0) {
                var requestCapability = this._requests.shift();

                requestCapability.resolve({
                  value: chunk,
                  done: false
                });
              } else {
                this._queuedChunks.push(chunk);
              }

              this._loaded += chunk.byteLength;
            }
          }, {
            key: "read",
            value: function () {
              var _read = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee10() {
                var chunk, requestCapability;
                return regeneratorRuntime.wrap(function _callee10$(_context10) {
                  while (1) {
                    switch (_context10.prev = _context10.next) {
                      case 0:
                        if (!(this._queuedChunks.length > 0)) {
                          _context10.next = 3;
                          break;
                        }

                        chunk = this._queuedChunks.shift();
                        return _context10.abrupt("return", {
                          value: chunk,
                          done: false
                        });

                      case 3:
                        if (!this._done) {
                          _context10.next = 5;
                          break;
                        }

                        return _context10.abrupt("return", {
                          value: undefined,
                          done: true
                        });

                      case 5:
                        requestCapability = (0, _util.createPromiseCapability)();

                        this._requests.push(requestCapability);

                        return _context10.abrupt("return", requestCapability.promise);

                      case 8:
                      case "end":
                        return _context10.stop();
                    }
                  }
                }, _callee10, this);
              }));

              function read() {
                return _read.apply(this, arguments);
              }

              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              this._done = true;
              var _iteratorNormalCompletion35 = true;
              var _didIteratorError35 = false;
              var _iteratorError35 = undefined;

              try {
                for (var _iterator35 = this._requests[Symbol.iterator](), _step35; !(_iteratorNormalCompletion35 = (_step35 = _iterator35.next()).done); _iteratorNormalCompletion35 = true) {
                  var requestCapability = _step35.value;
                  requestCapability.resolve({
                    value: undefined,
                    done: true
                  });
                }
              } catch (err) {
                _didIteratorError35 = true;
                _iteratorError35 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion35 && _iterator35["return"] != null) {
                    _iterator35["return"]();
                  }
                } finally {
                  if (_didIteratorError35) {
                    throw _iteratorError35;
                  }
                }
              }

              this._requests.length = 0;
            }
          }, {
            key: "progressiveDone",
            value: function progressiveDone() {
              if (this._done) {
                return;
              }

              this._done = true;
            }
          }, {
            key: "headersReady",
            get: function get() {
              return this._headersReady;
            }
          }, {
            key: "filename",
            get: function get() {
              return this._filename;
            }
          }, {
            key: "isRangeSupported",
            get: function get() {
              return this._stream._isRangeSupported;
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return this._stream._isStreamingSupported;
            }
          }, {
            key: "contentLength",
            get: function get() {
              return this._stream._contentLength;
            }
          }]);

          return PDFDataTransportStreamReader;
        }();

        var PDFDataTransportStreamRangeReader =
        /*#__PURE__*/
        function () {
          function PDFDataTransportStreamRangeReader(stream, begin, end) {
            _classCallCheck(this, PDFDataTransportStreamRangeReader);

            this._stream = stream;
            this._begin = begin;
            this._end = end;
            this._queuedChunk = null;
            this._requests = [];
            this._done = false;
            this.onProgress = null;
          }

          _createClass(PDFDataTransportStreamRangeReader, [{
            key: "_enqueue",
            value: function _enqueue(chunk) {
              if (this._done) {
                return;
              }

              if (this._requests.length === 0) {
                this._queuedChunk = chunk;
              } else {
                var requestsCapability = this._requests.shift();

                requestsCapability.resolve({
                  value: chunk,
                  done: false
                });
                var _iteratorNormalCompletion36 = true;
                var _didIteratorError36 = false;
                var _iteratorError36 = undefined;

                try {
                  for (var _iterator36 = this._requests[Symbol.iterator](), _step36; !(_iteratorNormalCompletion36 = (_step36 = _iterator36.next()).done); _iteratorNormalCompletion36 = true) {
                    var requestCapability = _step36.value;
                    requestCapability.resolve({
                      value: undefined,
                      done: true
                    });
                  }
                } catch (err) {
                  _didIteratorError36 = true;
                  _iteratorError36 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion36 && _iterator36["return"] != null) {
                      _iterator36["return"]();
                    }
                  } finally {
                    if (_didIteratorError36) {
                      throw _iteratorError36;
                    }
                  }
                }

                this._requests.length = 0;
              }

              this._done = true;

              this._stream._removeRangeReader(this);
            }
          }, {
            key: "read",
            value: function () {
              var _read2 = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee11() {
                var chunk, requestCapability;
                return regeneratorRuntime.wrap(function _callee11$(_context11) {
                  while (1) {
                    switch (_context11.prev = _context11.next) {
                      case 0:
                        if (!this._queuedChunk) {
                          _context11.next = 4;
                          break;
                        }

                        chunk = this._queuedChunk;
                        this._queuedChunk = null;
                        return _context11.abrupt("return", {
                          value: chunk,
                          done: false
                        });

                      case 4:
                        if (!this._done) {
                          _context11.next = 6;
                          break;
                        }

                        return _context11.abrupt("return", {
                          value: undefined,
                          done: true
                        });

                      case 6:
                        requestCapability = (0, _util.createPromiseCapability)();

                        this._requests.push(requestCapability);

                        return _context11.abrupt("return", requestCapability.promise);

                      case 9:
                      case "end":
                        return _context11.stop();
                    }
                  }
                }, _callee11, this);
              }));

              function read() {
                return _read2.apply(this, arguments);
              }

              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              this._done = true;
              var _iteratorNormalCompletion37 = true;
              var _didIteratorError37 = false;
              var _iteratorError37 = undefined;

              try {
                for (var _iterator37 = this._requests[Symbol.iterator](), _step37; !(_iteratorNormalCompletion37 = (_step37 = _iterator37.next()).done); _iteratorNormalCompletion37 = true) {
                  var requestCapability = _step37.value;
                  requestCapability.resolve({
                    value: undefined,
                    done: true
                  });
                }
              } catch (err) {
                _didIteratorError37 = true;
                _iteratorError37 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion37 && _iterator37["return"] != null) {
                    _iterator37["return"]();
                  }
                } finally {
                  if (_didIteratorError37) {
                    throw _iteratorError37;
                  }
                }
              }

              this._requests.length = 0;

              this._stream._removeRangeReader(this);
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return false;
            }
          }]);

          return PDFDataTransportStreamRangeReader;
        }();
        /***/

      },
      /* 17 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.AnnotationLayer = void 0;

        var _display_utils = __w_pdfjs_require__(1);

        var _util = __w_pdfjs_require__(2);

        var _annotation_storage = __w_pdfjs_require__(9);

        var _scripting_utils = __w_pdfjs_require__(18);

        var AnnotationElementFactory =
        /*#__PURE__*/
        function () {
          function AnnotationElementFactory() {
            _classCallCheck(this, AnnotationElementFactory);
          }

          _createClass(AnnotationElementFactory, null, [{
            key: "create",
            value: function create(parameters) {
              var subtype = parameters.data.annotationType;

              switch (subtype) {
                case _util.AnnotationType.LINK:
                  return new LinkAnnotationElement(parameters);

                case _util.AnnotationType.TEXT:
                  return new TextAnnotationElement(parameters);

                case _util.AnnotationType.WIDGET:
                  var fieldType = parameters.data.fieldType;

                  switch (fieldType) {
                    case "Tx":
                      return new TextWidgetAnnotationElement(parameters);

                    case "Btn":
                      if (parameters.data.radioButton) {
                        return new RadioButtonWidgetAnnotationElement(parameters);
                      } else if (parameters.data.checkBox) {
                        return new CheckboxWidgetAnnotationElement(parameters);
                      }

                      return new PushButtonWidgetAnnotationElement(parameters);

                    case "Ch":
                      return new ChoiceWidgetAnnotationElement(parameters);
                  }

                  return new WidgetAnnotationElement(parameters);

                case _util.AnnotationType.POPUP:
                  return new PopupAnnotationElement(parameters);

                case _util.AnnotationType.FREETEXT:
                  return new FreeTextAnnotationElement(parameters);

                case _util.AnnotationType.LINE:
                  return new LineAnnotationElement(parameters);

                case _util.AnnotationType.SQUARE:
                  return new SquareAnnotationElement(parameters);

                case _util.AnnotationType.CIRCLE:
                  return new CircleAnnotationElement(parameters);

                case _util.AnnotationType.POLYLINE:
                  return new PolylineAnnotationElement(parameters);

                case _util.AnnotationType.CARET:
                  return new CaretAnnotationElement(parameters);

                case _util.AnnotationType.INK:
                  return new InkAnnotationElement(parameters);

                case _util.AnnotationType.POLYGON:
                  return new PolygonAnnotationElement(parameters);

                case _util.AnnotationType.HIGHLIGHT:
                  return new HighlightAnnotationElement(parameters);

                case _util.AnnotationType.UNDERLINE:
                  return new UnderlineAnnotationElement(parameters);

                case _util.AnnotationType.SQUIGGLY:
                  return new SquigglyAnnotationElement(parameters);

                case _util.AnnotationType.STRIKEOUT:
                  return new StrikeOutAnnotationElement(parameters);

                case _util.AnnotationType.STAMP:
                  return new StampAnnotationElement(parameters);

                case _util.AnnotationType.FILEATTACHMENT:
                  return new FileAttachmentAnnotationElement(parameters);

                default:
                  return new AnnotationElement(parameters);
              }
            }
          }]);

          return AnnotationElementFactory;
        }();

        var AnnotationElement =
        /*#__PURE__*/
        function () {
          function AnnotationElement(parameters) {
            var _ref40 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                _ref40$isRenderable = _ref40.isRenderable,
                isRenderable = _ref40$isRenderable === void 0 ? false : _ref40$isRenderable,
                _ref40$ignoreBorder = _ref40.ignoreBorder,
                ignoreBorder = _ref40$ignoreBorder === void 0 ? false : _ref40$ignoreBorder,
                _ref40$createQuadrila = _ref40.createQuadrilaterals,
                createQuadrilaterals = _ref40$createQuadrila === void 0 ? false : _ref40$createQuadrila;

            _classCallCheck(this, AnnotationElement);

            this.isRenderable = isRenderable;
            this.data = parameters.data;
            this.layer = parameters.layer;
            this.page = parameters.page;
            this.viewport = parameters.viewport;
            this.linkService = parameters.linkService;
            this.downloadManager = parameters.downloadManager;
            this.imageResourcesPath = parameters.imageResourcesPath;
            this.renderInteractiveForms = parameters.renderInteractiveForms;
            this.svgFactory = parameters.svgFactory;
            this.annotationStorage = parameters.annotationStorage;
            this.enableScripting = parameters.enableScripting;
            this.hasJSActions = parameters.hasJSActions;
            this._mouseState = parameters.mouseState;

            if (isRenderable) {
              this.container = this._createContainer(ignoreBorder);
            }

            if (createQuadrilaterals) {
              this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);
            }
          }

          _createClass(AnnotationElement, [{
            key: "_createContainer",
            value: function _createContainer() {
              var ignoreBorder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              var data = this.data,
                  page = this.page,
                  viewport = this.viewport;
              var container = document.createElement("section");
              var width = data.rect[2] - data.rect[0];
              var height = data.rect[3] - data.rect[1];
              container.setAttribute("data-annotation-id", data.id);

              var rect = _util.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);

              container.style.transform = "matrix(".concat(viewport.transform.join(","), ")");
              container.style.transformOrigin = "".concat(-rect[0], "px ").concat(-rect[1], "px");

              if (!ignoreBorder && data.borderStyle.width > 0) {
                container.style.borderWidth = "".concat(data.borderStyle.width, "px");

                if (data.borderStyle.style !== _util.AnnotationBorderStyleType.UNDERLINE) {
                  width -= 2 * data.borderStyle.width;
                  height -= 2 * data.borderStyle.width;
                }

                var horizontalRadius = data.borderStyle.horizontalCornerRadius;
                var verticalRadius = data.borderStyle.verticalCornerRadius;

                if (horizontalRadius > 0 || verticalRadius > 0) {
                  var radius = "".concat(horizontalRadius, "px / ").concat(verticalRadius, "px");
                  container.style.borderRadius = radius;
                }

                switch (data.borderStyle.style) {
                  case _util.AnnotationBorderStyleType.SOLID:
                    container.style.borderStyle = "solid";
                    break;

                  case _util.AnnotationBorderStyleType.DASHED:
                    container.style.borderStyle = "dashed";
                    break;

                  case _util.AnnotationBorderStyleType.BEVELED:
                    (0, _util.warn)("Unimplemented border style: beveled");
                    break;

                  case _util.AnnotationBorderStyleType.INSET:
                    (0, _util.warn)("Unimplemented border style: inset");
                    break;

                  case _util.AnnotationBorderStyleType.UNDERLINE:
                    container.style.borderBottomStyle = "solid";
                    break;

                  default:
                    break;
                }

                if (data.color) {
                  container.style.borderColor = _util.Util.makeHexColor(data.color[0] | 0, data.color[1] | 0, data.color[2] | 0);
                } else {
                  container.style.borderWidth = 0;
                }
              }

              container.style.left = "".concat(rect[0], "px");
              container.style.top = "".concat(rect[1], "px");
              container.style.width = "".concat(width, "px");
              container.style.height = "".concat(height, "px");
              return container;
            }
          }, {
            key: "_createQuadrilaterals",
            value: function _createQuadrilaterals() {
              var ignoreBorder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

              if (!this.data.quadPoints) {
                return null;
              }

              var quadrilaterals = [];
              var savedRect = this.data.rect;
              var _iteratorNormalCompletion38 = true;
              var _didIteratorError38 = false;
              var _iteratorError38 = undefined;

              try {
                for (var _iterator38 = this.data.quadPoints[Symbol.iterator](), _step38; !(_iteratorNormalCompletion38 = (_step38 = _iterator38.next()).done); _iteratorNormalCompletion38 = true) {
                  var quadPoint = _step38.value;
                  this.data.rect = [quadPoint[2].x, quadPoint[2].y, quadPoint[1].x, quadPoint[1].y];
                  quadrilaterals.push(this._createContainer(ignoreBorder));
                }
              } catch (err) {
                _didIteratorError38 = true;
                _iteratorError38 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion38 && _iterator38["return"] != null) {
                    _iterator38["return"]();
                  }
                } finally {
                  if (_didIteratorError38) {
                    throw _iteratorError38;
                  }
                }
              }

              this.data.rect = savedRect;
              return quadrilaterals;
            }
          }, {
            key: "_createPopup",
            value: function _createPopup(trigger, data) {
              var container = this.container;

              if (this.quadrilaterals) {
                trigger = trigger || this.quadrilaterals;
                container = this.quadrilaterals[0];
              }

              if (!trigger) {
                trigger = document.createElement("div");
                trigger.style.height = container.style.height;
                trigger.style.width = container.style.width;
                container.appendChild(trigger);
              }

              var popupElement = new PopupElement({
                container: container,
                trigger: trigger,
                color: data.color,
                title: data.title,
                modificationDate: data.modificationDate,
                contents: data.contents,
                hideWrapper: true
              });
              var popup = popupElement.render();
              popup.style.left = container.style.width;
              container.appendChild(popup);
            }
          }, {
            key: "_renderQuadrilaterals",
            value: function _renderQuadrilaterals(className) {
              var _iteratorNormalCompletion39 = true;
              var _didIteratorError39 = false;
              var _iteratorError39 = undefined;

              try {
                for (var _iterator39 = this.quadrilaterals[Symbol.iterator](), _step39; !(_iteratorNormalCompletion39 = (_step39 = _iterator39.next()).done); _iteratorNormalCompletion39 = true) {
                  var quadrilateral = _step39.value;
                  quadrilateral.className = className;
                }
              } catch (err) {
                _didIteratorError39 = true;
                _iteratorError39 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion39 && _iterator39["return"] != null) {
                    _iterator39["return"]();
                  }
                } finally {
                  if (_didIteratorError39) {
                    throw _iteratorError39;
                  }
                }
              }

              return this.quadrilaterals;
            }
          }, {
            key: "render",
            value: function render() {
              (0, _util.unreachable)("Abstract method `AnnotationElement.render` called");
            }
          }]);

          return AnnotationElement;
        }();

        var LinkAnnotationElement =
        /*#__PURE__*/
        function (_AnnotationElement) {
          _inherits(LinkAnnotationElement, _AnnotationElement);

          function LinkAnnotationElement(parameters) {
            _classCallCheck(this, LinkAnnotationElement);

            var isRenderable = !!(parameters.data.url || parameters.data.dest || parameters.data.action || parameters.data.isTooltipOnly || parameters.data.actions && (parameters.data.actions.Action || parameters.data.actions["Mouse Up"] || parameters.data.actions["Mouse Down"]));
            return _possibleConstructorReturn(this, _getPrototypeOf(LinkAnnotationElement).call(this, parameters, {
              isRenderable: isRenderable,
              createQuadrilaterals: true
            }));
          }

          _createClass(LinkAnnotationElement, [{
            key: "render",
            value: function render() {
              var data = this.data,
                  linkService = this.linkService;
              var link = document.createElement("a");

              if (data.url) {
                (0, _display_utils.addLinkAttributes)(link, {
                  url: data.url,
                  target: data.newWindow ? _display_utils.LinkTarget.BLANK : linkService.externalLinkTarget,
                  rel: linkService.externalLinkRel,
                  enabled: linkService.externalLinkEnabled
                });
              } else if (data.action) {
                this._bindNamedAction(link, data.action);
              } else if (data.dest) {
                this._bindLink(link, data.dest);
              } else if (data.actions && (data.actions.Action || data.actions["Mouse Up"] || data.actions["Mouse Down"]) && this.enableScripting && this.hasJSActions) {
                this._bindJSAction(link, data);
              } else {
                this._bindLink(link, "");
              }

              if (this.quadrilaterals) {
                return this._renderQuadrilaterals("linkAnnotation").map(function (quadrilateral, index) {
                  var linkElement = index === 0 ? link : link.cloneNode();
                  quadrilateral.appendChild(linkElement);
                  return quadrilateral;
                });
              }

              this.container.className = "linkAnnotation";
              this.container.appendChild(link);
              return this.container;
            }
          }, {
            key: "_bindLink",
            value: function _bindLink(link, destination) {
              var _this32 = this;

              link.href = this.linkService.getDestinationHash(destination);

              link.onclick = function () {
                if (destination) {
                  _this32.linkService.goToDestination(destination);
                }

                return false;
              };

              if (destination || destination === "") {
                link.className = "internalLink";
              }
            }
          }, {
            key: "_bindNamedAction",
            value: function _bindNamedAction(link, action) {
              var _this33 = this;

              link.href = this.linkService.getAnchorUrl("");

              link.onclick = function () {
                _this33.linkService.executeNamedAction(action);

                return false;
              };

              link.className = "internalLink";
            }
          }, {
            key: "_bindJSAction",
            value: function _bindJSAction(link, data) {
              var _this34 = this;

              link.href = this.linkService.getAnchorUrl("");
              var map = new Map([["Action", "onclick"], ["Mouse Up", "onmouseup"], ["Mouse Down", "onmousedown"]]);

              var _loop = function _loop() {
                var name = _Object$keys[_i6];
                var jsName = map.get(name);

                if (!jsName) {
                  return "continue";
                }

                link[jsName] = function () {
                  var _this34$linkService$e;

                  (_this34$linkService$e = _this34.linkService.eventBus) === null || _this34$linkService$e === void 0 ? void 0 : _this34$linkService$e.dispatch("dispatcheventinsandbox", {
                    source: _this34,
                    detail: {
                      id: data.id,
                      name: name
                    }
                  });
                  return false;
                };
              };

              for (var _i6 = 0, _Object$keys = Object.keys(data.actions); _i6 < _Object$keys.length; _i6++) {
                var _ret = _loop();

                if (_ret === "continue") continue;
              }

              link.className = "internalLink";
            }
          }]);

          return LinkAnnotationElement;
        }(AnnotationElement);

        var TextAnnotationElement =
        /*#__PURE__*/
        function (_AnnotationElement2) {
          _inherits(TextAnnotationElement, _AnnotationElement2);

          function TextAnnotationElement(parameters) {
            _classCallCheck(this, TextAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _possibleConstructorReturn(this, _getPrototypeOf(TextAnnotationElement).call(this, parameters, {
              isRenderable: isRenderable
            }));
          }

          _createClass(TextAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = "textAnnotation";
              var image = document.createElement("img");
              image.style.height = this.container.style.height;
              image.style.width = this.container.style.width;
              image.src = this.imageResourcesPath + "annotation-" + this.data.name.toLowerCase() + ".svg";
              image.alt = "[{{type}} Annotation]";
              image.dataset.l10nId = "text_annotation_type";
              image.dataset.l10nArgs = JSON.stringify({
                type: this.data.name
              });

              if (!this.data.hasPopup) {
                this._createPopup(image, this.data);
              }

              this.container.appendChild(image);
              return this.container;
            }
          }]);

          return TextAnnotationElement;
        }(AnnotationElement);

        var WidgetAnnotationElement =
        /*#__PURE__*/
        function (_AnnotationElement3) {
          _inherits(WidgetAnnotationElement, _AnnotationElement3);

          function WidgetAnnotationElement() {
            _classCallCheck(this, WidgetAnnotationElement);

            return _possibleConstructorReturn(this, _getPrototypeOf(WidgetAnnotationElement).apply(this, arguments));
          }

          _createClass(WidgetAnnotationElement, [{
            key: "render",
            value: function render() {
              if (this.data.alternativeText) {
                this.container.title = this.data.alternativeText;
              }

              return this.container;
            }
          }, {
            key: "_getKeyModifier",
            value: function _getKeyModifier(event) {
              return navigator.platform.includes("Win") && event.ctrlKey || navigator.platform.includes("Mac") && event.metaKey;
            }
          }, {
            key: "_setEventListener",
            value: function _setEventListener(element, baseName, eventName, valueGetter) {
              var _this35 = this;

              if (baseName.includes("mouse")) {
                element.addEventListener(baseName, function (event) {
                  var _this35$linkService$e;

                  (_this35$linkService$e = _this35.linkService.eventBus) === null || _this35$linkService$e === void 0 ? void 0 : _this35$linkService$e.dispatch("dispatcheventinsandbox", {
                    source: _this35,
                    detail: {
                      id: _this35.data.id,
                      name: eventName,
                      value: valueGetter(event),
                      shift: event.shiftKey,
                      modifier: _this35._getKeyModifier(event)
                    }
                  });
                });
              } else {
                element.addEventListener(baseName, function (event) {
                  var _this35$linkService$e2;

                  (_this35$linkService$e2 = _this35.linkService.eventBus) === null || _this35$linkService$e2 === void 0 ? void 0 : _this35$linkService$e2.dispatch("dispatcheventinsandbox", {
                    source: _this35,
                    detail: {
                      id: _this35.data.id,
                      name: eventName,
                      value: event.target.checked
                    }
                  });
                });
              }
            }
          }, {
            key: "_setEventListeners",
            value: function _setEventListeners(element, names, getter) {
              var _iteratorNormalCompletion40 = true;
              var _didIteratorError40 = false;
              var _iteratorError40 = undefined;

              try {
                for (var _iterator40 = names[Symbol.iterator](), _step40; !(_iteratorNormalCompletion40 = (_step40 = _iterator40.next()).done); _iteratorNormalCompletion40 = true) {
                  var _this$data$actions;

                  var _step40$value = _slicedToArray(_step40.value, 2),
                      baseName = _step40$value[0],
                      eventName = _step40$value[1];

                  if (eventName === "Action" || (_this$data$actions = this.data.actions) !== null && _this$data$actions !== void 0 && _this$data$actions[eventName]) {
                    this._setEventListener(element, baseName, eventName, getter);
                  }
                }
              } catch (err) {
                _didIteratorError40 = true;
                _iteratorError40 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion40 && _iterator40["return"] != null) {
                    _iterator40["return"]();
                  }
                } finally {
                  if (_didIteratorError40) {
                    throw _iteratorError40;
                  }
                }
              }
            }
          }, {
            key: "_dispatchEventFromSandbox",
            value: function _dispatchEventFromSandbox(actions, jsEvent) {
              var _this36 = this;

              var setColor = function setColor(jsName, styleName, event) {
                var color = event.detail[jsName];
                event.target.style[styleName] = _scripting_utils.ColorConverters["".concat(color[0], "_HTML")](color.slice(1));
              };

              var commonActions = {
                display: function display(event) {
                  var hidden = event.detail.display % 2 === 1;
                  event.target.style.visibility = hidden ? "hidden" : "visible";

                  _this36.annotationStorage.setValue(_this36.data.id, {
                    hidden: hidden,
                    print: event.detail.display === 0 || event.detail.display === 3
                  });
                },
                print: function print(event) {
                  _this36.annotationStorage.setValue(_this36.data.id, {
                    print: event.detail.print
                  });
                },
                hidden: function hidden(event) {
                  event.target.style.visibility = event.detail.hidden ? "hidden" : "visible";

                  _this36.annotationStorage.setValue(_this36.data.id, {
                    hidden: event.detail.hidden
                  });
                },
                focus: function focus(event) {
                  setTimeout(function () {
                    return event.target.focus({
                      preventScroll: false
                    });
                  }, 0);
                },
                userName: function userName(event) {
                  event.target.title = event.detail.userName;
                },
                readonly: function readonly(event) {
                  if (event.detail.readonly) {
                    event.target.setAttribute("readonly", "");
                  } else {
                    event.target.removeAttribute("readonly");
                  }
                },
                required: function required(event) {
                  if (event.detail.required) {
                    event.target.setAttribute("required", "");
                  } else {
                    event.target.removeAttribute("required");
                  }
                },
                bgColor: function bgColor(event) {
                  setColor("bgColor", "backgroundColor", event);
                },
                fillColor: function fillColor(event) {
                  setColor("fillColor", "backgroundColor", event);
                },
                fgColor: function fgColor(event) {
                  setColor("fgColor", "color", event);
                },
                textColor: function textColor(event) {
                  setColor("textColor", "color", event);
                },
                borderColor: function borderColor(event) {
                  setColor("borderColor", "borderColor", event);
                },
                strokeColor: function strokeColor(event) {
                  setColor("strokeColor", "borderColor", event);
                }
              };

              for (var _i7 = 0, _Object$keys2 = Object.keys(jsEvent.detail); _i7 < _Object$keys2.length; _i7++) {
                var name = _Object$keys2[_i7];
                var action = actions[name] || commonActions[name];

                if (action) {
                  action(jsEvent);
                }
              }
            }
          }]);

          return WidgetAnnotationElement;
        }(AnnotationElement);

        var TextWidgetAnnotationElement =
        /*#__PURE__*/
        function (_WidgetAnnotationElem) {
          _inherits(TextWidgetAnnotationElement, _WidgetAnnotationElem);

          function TextWidgetAnnotationElement(parameters) {
            _classCallCheck(this, TextWidgetAnnotationElement);

            var isRenderable = parameters.renderInteractiveForms || !parameters.data.hasAppearance && !!parameters.data.fieldValue;
            return _possibleConstructorReturn(this, _getPrototypeOf(TextWidgetAnnotationElement).call(this, parameters, {
              isRenderable: isRenderable
            }));
          }

          _createClass(TextWidgetAnnotationElement, [{
            key: "setPropertyOnSiblings",
            value: function setPropertyOnSiblings(base, key, value, keyInStorage) {
              var storage = this.annotationStorage;
              var _iteratorNormalCompletion41 = true;
              var _didIteratorError41 = false;
              var _iteratorError41 = undefined;

              try {
                for (var _iterator41 = document.getElementsByName(base.name)[Symbol.iterator](), _step41; !(_iteratorNormalCompletion41 = (_step41 = _iterator41.next()).done); _iteratorNormalCompletion41 = true) {
                  var element = _step41.value;

                  if (element !== base) {
                    element[key] = value;
                    var data = Object.create(null);
                    data[keyInStorage] = value;
                    storage.setValue(element.getAttribute("id"), data);
                  }
                }
              } catch (err) {
                _didIteratorError41 = true;
                _iteratorError41 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion41 && _iterator41["return"] != null) {
                    _iterator41["return"]();
                  }
                } finally {
                  if (_didIteratorError41) {
                    throw _iteratorError41;
                  }
                }
              }
            }
          }, {
            key: "render",
            value: function render() {
              var _this37 = this;

              var storage = this.annotationStorage;
              var id = this.data.id;
              this.container.className = "textWidgetAnnotation";
              var element = null;

              if (this.renderInteractiveForms) {
                var storedData = storage.getValue(id, {
                  value: this.data.fieldValue,
                  valueAsString: this.data.fieldValue
                });
                var textContent = storedData.valueAsString || storedData.value || "";
                var elementData = {
                  userValue: null,
                  formattedValue: null,
                  beforeInputSelectionRange: null,
                  beforeInputValue: null
                };

                if (this.data.multiLine) {
                  element = document.createElement("textarea");
                  element.textContent = textContent;
                } else {
                  element = document.createElement("input");
                  element.type = "text";
                  element.setAttribute("value", textContent);
                }

                elementData.userValue = textContent;
                element.setAttribute("id", id);
                element.addEventListener("input", function (event) {
                  storage.setValue(id, {
                    value: event.target.value
                  });

                  _this37.setPropertyOnSiblings(element, "value", event.target.value, "value");
                });

                var blurListener = function blurListener(event) {
                  if (elementData.formattedValue) {
                    event.target.value = elementData.formattedValue;
                  }

                  event.target.scrollLeft = 0;
                  elementData.beforeInputSelectionRange = null;
                };

                if (this.enableScripting && this.hasJSActions) {
                  var _this$data$actions2;

                  element.addEventListener("focus", function (event) {
                    if (elementData.userValue) {
                      event.target.value = elementData.userValue;
                    }
                  });
                  element.addEventListener("updatefromsandbox", function (jsEvent) {
                    var actions = {
                      value: function value(event) {
                        elementData.userValue = event.detail.value || "";
                        storage.setValue(id, {
                          value: elementData.userValue.toString()
                        });

                        if (!elementData.formattedValue) {
                          event.target.value = elementData.userValue;
                        }
                      },
                      valueAsString: function valueAsString(event) {
                        elementData.formattedValue = event.detail.valueAsString || "";

                        if (event.target !== document.activeElement) {
                          event.target.value = elementData.formattedValue;
                        }

                        storage.setValue(id, {
                          formattedValue: elementData.formattedValue
                        });
                      },
                      selRange: function selRange(event) {
                        var _event$detail$selRang = _slicedToArray(event.detail.selRange, 2),
                            selStart = _event$detail$selRang[0],
                            selEnd = _event$detail$selRang[1];

                        if (selStart >= 0 && selEnd < event.target.value.length) {
                          event.target.setSelectionRange(selStart, selEnd);
                        }
                      }
                    };

                    _this37._dispatchEventFromSandbox(actions, jsEvent);
                  });
                  element.addEventListener("keydown", function (event) {
                    var _this37$linkService$e;

                    elementData.beforeInputValue = event.target.value;
                    var commitKey = -1;

                    if (event.key === "Escape") {
                      commitKey = 0;
                    } else if (event.key === "Enter") {
                      commitKey = 2;
                    } else if (event.key === "Tab") {
                      commitKey = 3;
                    }

                    if (commitKey === -1) {
                      return;
                    }

                    elementData.userValue = event.target.value;
                    (_this37$linkService$e = _this37.linkService.eventBus) === null || _this37$linkService$e === void 0 ? void 0 : _this37$linkService$e.dispatch("dispatcheventinsandbox", {
                      source: _this37,
                      detail: {
                        id: id,
                        name: "Keystroke",
                        value: event.target.value,
                        willCommit: true,
                        commitKey: commitKey,
                        selStart: event.target.selectionStart,
                        selEnd: event.target.selectionEnd
                      }
                    });
                  });
                  var _blurListener = blurListener;
                  blurListener = null;
                  element.addEventListener("blur", function (event) {
                    if (_this37._mouseState.isDown) {
                      var _this37$linkService$e2;

                      elementData.userValue = event.target.value;
                      (_this37$linkService$e2 = _this37.linkService.eventBus) === null || _this37$linkService$e2 === void 0 ? void 0 : _this37$linkService$e2.dispatch("dispatcheventinsandbox", {
                        source: _this37,
                        detail: {
                          id: id,
                          name: "Keystroke",
                          value: event.target.value,
                          willCommit: true,
                          commitKey: 1,
                          selStart: event.target.selectionStart,
                          selEnd: event.target.selectionEnd
                        }
                      });
                    }

                    _blurListener(event);
                  });
                  element.addEventListener("mousedown", function (event) {
                    elementData.beforeInputValue = event.target.value;
                    elementData.beforeInputSelectionRange = null;
                  });
                  element.addEventListener("keyup", function (event) {
                    if (event.target.selectionStart === event.target.selectionEnd) {
                      elementData.beforeInputSelectionRange = null;
                    }
                  });
                  element.addEventListener("select", function (event) {
                    elementData.beforeInputSelectionRange = [event.target.selectionStart, event.target.selectionEnd];
                  });

                  if ((_this$data$actions2 = this.data.actions) !== null && _this$data$actions2 !== void 0 && _this$data$actions2.Keystroke) {
                    element.addEventListener("input", function (event) {
                      var _this37$linkService$e3;

                      var selStart = -1;
                      var selEnd = -1;

                      if (elementData.beforeInputSelectionRange) {
                        var _elementData$beforeIn = _slicedToArray(elementData.beforeInputSelectionRange, 2);

                        selStart = _elementData$beforeIn[0];
                        selEnd = _elementData$beforeIn[1];
                      }

                      (_this37$linkService$e3 = _this37.linkService.eventBus) === null || _this37$linkService$e3 === void 0 ? void 0 : _this37$linkService$e3.dispatch("dispatcheventinsandbox", {
                        source: _this37,
                        detail: {
                          id: id,
                          name: "Keystroke",
                          value: elementData.beforeInputValue,
                          change: event.data,
                          willCommit: false,
                          selStart: selStart,
                          selEnd: selEnd
                        }
                      });
                    });
                  }

                  this._setEventListeners(element, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], function (event) {
                    return event.target.value;
                  });
                }

                if (blurListener) {
                  element.addEventListener("blur", blurListener);
                }

                element.disabled = this.data.readOnly;
                element.name = this.data.fieldName;

                if (this.data.maxLen !== null) {
                  element.maxLength = this.data.maxLen;
                }

                if (this.data.comb) {
                  var fieldWidth = this.data.rect[2] - this.data.rect[0];
                  var combWidth = fieldWidth / this.data.maxLen;
                  element.classList.add("comb");
                  element.style.letterSpacing = "calc(".concat(combWidth, "px - 1ch)");
                }
              } else {
                element = document.createElement("div");
                element.textContent = this.data.fieldValue;
                element.style.verticalAlign = "middle";
                element.style.display = "table-cell";
              }

              this._setTextStyle(element);

              this.container.appendChild(element);
              return this.container;
            }
          }, {
            key: "_setTextStyle",
            value: function _setTextStyle(element) {
              var TEXT_ALIGNMENT = ["left", "center", "right"];
              var _this$data$defaultApp = this.data.defaultAppearanceData,
                  fontSize = _this$data$defaultApp.fontSize,
                  fontColor = _this$data$defaultApp.fontColor;
              var style = element.style;

              if (fontSize) {
                style.fontSize = "".concat(fontSize, "px");
              }

              style.color = _util.Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);

              if (this.data.textAlignment !== null) {
                style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];
              }
            }
          }]);

          return TextWidgetAnnotationElement;
        }(WidgetAnnotationElement);

        var CheckboxWidgetAnnotationElement =
        /*#__PURE__*/
        function (_WidgetAnnotationElem2) {
          _inherits(CheckboxWidgetAnnotationElement, _WidgetAnnotationElem2);

          function CheckboxWidgetAnnotationElement(parameters) {
            _classCallCheck(this, CheckboxWidgetAnnotationElement);

            return _possibleConstructorReturn(this, _getPrototypeOf(CheckboxWidgetAnnotationElement).call(this, parameters, {
              isRenderable: parameters.renderInteractiveForms
            }));
          }

          _createClass(CheckboxWidgetAnnotationElement, [{
            key: "render",
            value: function render() {
              var _this38 = this;

              var storage = this.annotationStorage;
              var data = this.data;
              var id = data.id;
              var value = storage.getValue(id, {
                value: data.fieldValue && (data.exportValue && data.exportValue === data.fieldValue || !data.exportValue && data.fieldValue !== "Off")
              }).value;

              if (typeof value === "string") {
                value = value !== "Off";
                storage.setValue(id, {
                  value: value
                });
              }

              this.container.className = "buttonWidgetAnnotation checkBox";
              var element = document.createElement("input");
              element.disabled = data.readOnly;
              element.type = "checkbox";
              element.name = this.data.fieldName;

              if (value) {
                element.setAttribute("checked", true);
              }

              element.setAttribute("id", id);
              element.addEventListener("change", function (event) {
                var name = event.target.name;
                var _iteratorNormalCompletion42 = true;
                var _didIteratorError42 = false;
                var _iteratorError42 = undefined;

                try {
                  for (var _iterator42 = document.getElementsByName(name)[Symbol.iterator](), _step42; !(_iteratorNormalCompletion42 = (_step42 = _iterator42.next()).done); _iteratorNormalCompletion42 = true) {
                    var checkbox = _step42.value;

                    if (checkbox !== event.target) {
                      checkbox.checked = false;
                      storage.setValue(checkbox.parentNode.getAttribute("data-annotation-id"), {
                        value: false
                      });
                    }
                  }
                } catch (err) {
                  _didIteratorError42 = true;
                  _iteratorError42 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion42 && _iterator42["return"] != null) {
                      _iterator42["return"]();
                    }
                  } finally {
                    if (_didIteratorError42) {
                      throw _iteratorError42;
                    }
                  }
                }

                storage.setValue(id, {
                  value: event.target.checked
                });
              });

              if (this.enableScripting && this.hasJSActions) {
                element.addEventListener("updatefromsandbox", function (jsEvent) {
                  var actions = {
                    value: function value(event) {
                      event.target.checked = event.detail.value !== "Off";
                      storage.setValue(id, {
                        value: event.target.checked
                      });
                    }
                  };

                  _this38._dispatchEventFromSandbox(actions, jsEvent);
                });

                this._setEventListeners(element, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], function (event) {
                  return event.target.checked;
                });
              }

              this.container.appendChild(element);
              return this.container;
            }
          }]);

          return CheckboxWidgetAnnotationElement;
        }(WidgetAnnotationElement);

        var RadioButtonWidgetAnnotationElement =
        /*#__PURE__*/
        function (_WidgetAnnotationElem3) {
          _inherits(RadioButtonWidgetAnnotationElement, _WidgetAnnotationElem3);

          function RadioButtonWidgetAnnotationElement(parameters) {
            _classCallCheck(this, RadioButtonWidgetAnnotationElement);

            return _possibleConstructorReturn(this, _getPrototypeOf(RadioButtonWidgetAnnotationElement).call(this, parameters, {
              isRenderable: parameters.renderInteractiveForms
            }));
          }

          _createClass(RadioButtonWidgetAnnotationElement, [{
            key: "render",
            value: function render() {
              var _this39 = this;

              this.container.className = "buttonWidgetAnnotation radioButton";
              var storage = this.annotationStorage;
              var data = this.data;
              var id = data.id;
              var value = storage.getValue(id, {
                value: data.fieldValue === data.buttonValue
              }).value;

              if (typeof value === "string") {
                value = value !== data.buttonValue;
                storage.setValue(id, {
                  value: value
                });
              }

              var element = document.createElement("input");
              element.disabled = data.readOnly;
              element.type = "radio";
              element.name = data.fieldName;

              if (value) {
                element.setAttribute("checked", true);
              }

              element.setAttribute("id", id);
              element.addEventListener("change", function (event) {
                var target = event.target;
                var _iteratorNormalCompletion43 = true;
                var _didIteratorError43 = false;
                var _iteratorError43 = undefined;

                try {
                  for (var _iterator43 = document.getElementsByName(target.name)[Symbol.iterator](), _step43; !(_iteratorNormalCompletion43 = (_step43 = _iterator43.next()).done); _iteratorNormalCompletion43 = true) {
                    var radio = _step43.value;

                    if (radio !== target) {
                      storage.setValue(radio.getAttribute("id"), {
                        value: false
                      });
                    }
                  }
                } catch (err) {
                  _didIteratorError43 = true;
                  _iteratorError43 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion43 && _iterator43["return"] != null) {
                      _iterator43["return"]();
                    }
                  } finally {
                    if (_didIteratorError43) {
                      throw _iteratorError43;
                    }
                  }
                }

                storage.setValue(id, {
                  value: target.checked
                });
              });

              if (this.enableScripting && this.hasJSActions) {
                var pdfButtonValue = data.buttonValue;
                element.addEventListener("updatefromsandbox", function (jsEvent) {
                  var actions = {
                    value: function value(event) {
                      var checked = pdfButtonValue === event.detail.value;
                      var _iteratorNormalCompletion44 = true;
                      var _didIteratorError44 = false;
                      var _iteratorError44 = undefined;

                      try {
                        for (var _iterator44 = document.getElementsByName(event.target.name)[Symbol.iterator](), _step44; !(_iteratorNormalCompletion44 = (_step44 = _iterator44.next()).done); _iteratorNormalCompletion44 = true) {
                          var radio = _step44.value;
                          var radioId = radio.getAttribute("id");
                          radio.checked = radioId === id && checked;
                          storage.setValue(radioId, {
                            value: radio.checked
                          });
                        }
                      } catch (err) {
                        _didIteratorError44 = true;
                        _iteratorError44 = err;
                      } finally {
                        try {
                          if (!_iteratorNormalCompletion44 && _iterator44["return"] != null) {
                            _iterator44["return"]();
                          }
                        } finally {
                          if (_didIteratorError44) {
                            throw _iteratorError44;
                          }
                        }
                      }
                    }
                  };

                  _this39._dispatchEventFromSandbox(actions, jsEvent);
                });

                this._setEventListeners(element, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], function (event) {
                  return event.target.checked;
                });
              }

              this.container.appendChild(element);
              return this.container;
            }
          }]);

          return RadioButtonWidgetAnnotationElement;
        }(WidgetAnnotationElement);

        var PushButtonWidgetAnnotationElement =
        /*#__PURE__*/
        function (_LinkAnnotationElemen) {
          _inherits(PushButtonWidgetAnnotationElement, _LinkAnnotationElemen);

          function PushButtonWidgetAnnotationElement() {
            _classCallCheck(this, PushButtonWidgetAnnotationElement);

            return _possibleConstructorReturn(this, _getPrototypeOf(PushButtonWidgetAnnotationElement).apply(this, arguments));
          }

          _createClass(PushButtonWidgetAnnotationElement, [{
            key: "render",
            value: function render() {
              var container = _get(_getPrototypeOf(PushButtonWidgetAnnotationElement.prototype), "render", this).call(this);

              container.className = "buttonWidgetAnnotation pushButton";

              if (this.data.alternativeText) {
                container.title = this.data.alternativeText;
              }

              return container;
            }
          }]);

          return PushButtonWidgetAnnotationElement;
        }(LinkAnnotationElement);

        var ChoiceWidgetAnnotationElement =
        /*#__PURE__*/
        function (_WidgetAnnotationElem4) {
          _inherits(ChoiceWidgetAnnotationElement, _WidgetAnnotationElem4);

          function ChoiceWidgetAnnotationElement(parameters) {
            _classCallCheck(this, ChoiceWidgetAnnotationElement);

            return _possibleConstructorReturn(this, _getPrototypeOf(ChoiceWidgetAnnotationElement).call(this, parameters, {
              isRenderable: parameters.renderInteractiveForms
            }));
          }

          _createClass(ChoiceWidgetAnnotationElement, [{
            key: "render",
            value: function render() {
              var _this40 = this;

              this.container.className = "choiceWidgetAnnotation";
              var storage = this.annotationStorage;
              var id = this.data.id;
              storage.getValue(id, {
                value: this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : undefined
              });
              var selectElement = document.createElement("select");
              selectElement.disabled = this.data.readOnly;
              selectElement.name = this.data.fieldName;
              selectElement.setAttribute("id", id);

              if (!this.data.combo) {
                selectElement.size = this.data.options.length;

                if (this.data.multiSelect) {
                  selectElement.multiple = true;
                }
              }

              var _iteratorNormalCompletion45 = true;
              var _didIteratorError45 = false;
              var _iteratorError45 = undefined;

              try {
                for (var _iterator45 = this.data.options[Symbol.iterator](), _step45; !(_iteratorNormalCompletion45 = (_step45 = _iterator45.next()).done); _iteratorNormalCompletion45 = true) {
                  var option = _step45.value;
                  var optionElement = document.createElement("option");
                  optionElement.textContent = option.displayValue;
                  optionElement.value = option.exportValue;

                  if (this.data.fieldValue.includes(option.exportValue)) {
                    optionElement.setAttribute("selected", true);
                  }

                  selectElement.appendChild(optionElement);
                }
              } catch (err) {
                _didIteratorError45 = true;
                _iteratorError45 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion45 && _iterator45["return"] != null) {
                    _iterator45["return"]();
                  }
                } finally {
                  if (_didIteratorError45) {
                    throw _iteratorError45;
                  }
                }
              }

              var getValue = function getValue(event, isExport) {
                var name = isExport ? "value" : "textContent";
                var options = event.target.options;

                if (!event.target.multiple) {
                  return options.selectedIndex === -1 ? null : options[options.selectedIndex][name];
                }

                return Array.prototype.filter.call(options, function (option) {
                  return option.selected;
                }).map(function (option) {
                  return option[name];
                });
              };

              var getItems = function getItems(event) {
                var options = event.target.options;
                return Array.prototype.map.call(options, function (option) {
                  return {
                    displayValue: option.textContent,
                    exportValue: option.value
                  };
                });
              };

              if (this.enableScripting && this.hasJSActions) {
                selectElement.addEventListener("updatefromsandbox", function (jsEvent) {
                  var actions = {
                    value: function value(event) {
                      var options = selectElement.options;
                      var value = event.detail.value;
                      var values = new Set(Array.isArray(value) ? value : [value]);
                      Array.prototype.forEach.call(options, function (option) {
                        option.selected = values.has(option.value);
                      });
                      storage.setValue(id, {
                        value: getValue(event, true)
                      });
                    },
                    multipleSelection: function multipleSelection(event) {
                      selectElement.multiple = true;
                    },
                    remove: function remove(event) {
                      var options = selectElement.options;
                      var index = event.detail.remove;
                      options[index].selected = false;
                      selectElement.remove(index);

                      if (options.length > 0) {
                        var i = Array.prototype.findIndex.call(options, function (option) {
                          return option.selected;
                        });

                        if (i === -1) {
                          options[0].selected = true;
                        }
                      }

                      storage.setValue(id, {
                        value: getValue(event, true),
                        items: getItems(event)
                      });
                    },
                    clear: function clear(event) {
                      while (selectElement.length !== 0) {
                        selectElement.remove(0);
                      }

                      storage.setValue(id, {
                        value: null,
                        items: []
                      });
                    },
                    insert: function insert(event) {
                      var _event$detail$insert = event.detail.insert,
                          index = _event$detail$insert.index,
                          displayValue = _event$detail$insert.displayValue,
                          exportValue = _event$detail$insert.exportValue;
                      var optionElement = document.createElement("option");
                      optionElement.textContent = displayValue;
                      optionElement.value = exportValue;
                      selectElement.insertBefore(optionElement, selectElement.children[index]);
                      storage.setValue(id, {
                        value: getValue(event, true),
                        items: getItems(event)
                      });
                    },
                    items: function items(event) {
                      var items = event.detail.items;

                      while (selectElement.length !== 0) {
                        selectElement.remove(0);
                      }

                      var _iteratorNormalCompletion46 = true;
                      var _didIteratorError46 = false;
                      var _iteratorError46 = undefined;

                      try {
                        for (var _iterator46 = items[Symbol.iterator](), _step46; !(_iteratorNormalCompletion46 = (_step46 = _iterator46.next()).done); _iteratorNormalCompletion46 = true) {
                          var item = _step46.value;
                          var displayValue = item.displayValue,
                              exportValue = item.exportValue;
                          var optionElement = document.createElement("option");
                          optionElement.textContent = displayValue;
                          optionElement.value = exportValue;
                          selectElement.appendChild(optionElement);
                        }
                      } catch (err) {
                        _didIteratorError46 = true;
                        _iteratorError46 = err;
                      } finally {
                        try {
                          if (!_iteratorNormalCompletion46 && _iterator46["return"] != null) {
                            _iterator46["return"]();
                          }
                        } finally {
                          if (_didIteratorError46) {
                            throw _iteratorError46;
                          }
                        }
                      }

                      if (selectElement.options.length > 0) {
                        selectElement.options[0].selected = true;
                      }

                      storage.setValue(id, {
                        value: getValue(event, true),
                        items: getItems(event)
                      });
                    },
                    indices: function indices(event) {
                      var indices = new Set(event.detail.indices);
                      var options = event.target.options;
                      Array.prototype.forEach.call(options, function (option, i) {
                        option.selected = indices.has(i);
                      });
                      storage.setValue(id, {
                        value: getValue(event, true)
                      });
                    },
                    editable: function editable(event) {
                      event.target.disabled = !event.detail.editable;
                    }
                  };

                  _this40._dispatchEventFromSandbox(actions, jsEvent);
                });
                selectElement.addEventListener("input", function (event) {
                  var _this40$linkService$e;

                  var exportValue = getValue(event, true);
                  var value = getValue(event, false);
                  storage.setValue(id, {
                    value: exportValue
                  });
                  (_this40$linkService$e = _this40.linkService.eventBus) === null || _this40$linkService$e === void 0 ? void 0 : _this40$linkService$e.dispatch("dispatcheventinsandbox", {
                    source: _this40,
                    detail: {
                      id: id,
                      name: "Keystroke",
                      value: value,
                      changeEx: exportValue,
                      willCommit: true,
                      commitKey: 1,
                      keyDown: false
                    }
                  });
                });

                this._setEventListeners(selectElement, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"], ["input", "Action"]], function (event) {
                  return event.target.checked;
                });
              } else {
                selectElement.addEventListener("input", function (event) {
                  storage.setValue(id, {
                    value: getValue(event)
                  });
                });
              }

              this.container.appendChild(selectElement);
              return this.container;
            }
          }]);

          return ChoiceWidgetAnnotationElement;
        }(WidgetAnnotationElement);

        var PopupAnnotationElement =
        /*#__PURE__*/
        function (_AnnotationElement4) {
          _inherits(PopupAnnotationElement, _AnnotationElement4);

          function PopupAnnotationElement(parameters) {
            _classCallCheck(this, PopupAnnotationElement);

            var isRenderable = !!(parameters.data.title || parameters.data.contents);
            return _possibleConstructorReturn(this, _getPrototypeOf(PopupAnnotationElement).call(this, parameters, {
              isRenderable: isRenderable
            }));
          }

          _createClass(PopupAnnotationElement, [{
            key: "render",
            value: function render() {
              var IGNORE_TYPES = ["Line", "Square", "Circle", "PolyLine", "Polygon", "Ink"];
              this.container.className = "popupAnnotation";

              if (IGNORE_TYPES.includes(this.data.parentType)) {
                return this.container;
              }

              var selector = "[data-annotation-id=\"".concat(this.data.parentId, "\"]");
              var parentElements = this.layer.querySelectorAll(selector);

              if (parentElements.length === 0) {
                return this.container;
              }

              var popup = new PopupElement({
                container: this.container,
                trigger: Array.from(parentElements),
                color: this.data.color,
                title: this.data.title,
                modificationDate: this.data.modificationDate,
                contents: this.data.contents
              });
              var page = this.page;

              var rect = _util.Util.normalizeRect([this.data.parentRect[0], page.view[3] - this.data.parentRect[1] + page.view[1], this.data.parentRect[2], page.view[3] - this.data.parentRect[3] + page.view[1]]);

              var popupLeft = rect[0] + this.data.parentRect[2] - this.data.parentRect[0];
              var popupTop = rect[1];
              this.container.style.transformOrigin = "".concat(-popupLeft, "px ").concat(-popupTop, "px");
              this.container.style.left = "".concat(popupLeft, "px");
              this.container.style.top = "".concat(popupTop, "px");
              this.container.appendChild(popup.render());
              return this.container;
            }
          }]);

          return PopupAnnotationElement;
        }(AnnotationElement);

        var PopupElement =
        /*#__PURE__*/
        function () {
          function PopupElement(parameters) {
            _classCallCheck(this, PopupElement);

            this.container = parameters.container;
            this.trigger = parameters.trigger;
            this.color = parameters.color;
            this.title = parameters.title;
            this.modificationDate = parameters.modificationDate;
            this.contents = parameters.contents;
            this.hideWrapper = parameters.hideWrapper || false;
            this.pinned = false;
          }

          _createClass(PopupElement, [{
            key: "render",
            value: function render() {
              var BACKGROUND_ENLIGHT = 0.7;
              var wrapper = document.createElement("div");
              wrapper.className = "popupWrapper";
              this.hideElement = this.hideWrapper ? wrapper : this.container;
              this.hideElement.hidden = true;
              var popup = document.createElement("div");
              popup.className = "popup";
              var color = this.color;

              if (color) {
                var r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];
                var g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];
                var b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];
                popup.style.backgroundColor = _util.Util.makeHexColor(r | 0, g | 0, b | 0);
              }

              var title = document.createElement("h1");
              title.textContent = this.title;
              popup.appendChild(title);

              var dateObject = _display_utils.PDFDateString.toDateObject(this.modificationDate);

              if (dateObject) {
                var modificationDate = document.createElement("span");
                modificationDate.textContent = "{{date}}, {{time}}";
                modificationDate.dataset.l10nId = "annotation_date_string";
                modificationDate.dataset.l10nArgs = JSON.stringify({
                  date: dateObject.toLocaleDateString(),
                  time: dateObject.toLocaleTimeString()
                });
                popup.appendChild(modificationDate);
              }

              var contents = this._formatContents(this.contents);

              popup.appendChild(contents);

              if (!Array.isArray(this.trigger)) {
                this.trigger = [this.trigger];
              }

              var _iteratorNormalCompletion47 = true;
              var _didIteratorError47 = false;
              var _iteratorError47 = undefined;

              try {
                for (var _iterator47 = this.trigger[Symbol.iterator](), _step47; !(_iteratorNormalCompletion47 = (_step47 = _iterator47.next()).done); _iteratorNormalCompletion47 = true) {
                  var element = _step47.value;
                  element.addEventListener("click", this._toggle.bind(this));
                  element.addEventListener("mouseover", this._show.bind(this, false));
                  element.addEventListener("mouseout", this._hide.bind(this, false));
                }
              } catch (err) {
                _didIteratorError47 = true;
                _iteratorError47 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion47 && _iterator47["return"] != null) {
                    _iterator47["return"]();
                  }
                } finally {
                  if (_didIteratorError47) {
                    throw _iteratorError47;
                  }
                }
              }

              popup.addEventListener("click", this._hide.bind(this, true));
              wrapper.appendChild(popup);
              return wrapper;
            }
          }, {
            key: "_formatContents",
            value: function _formatContents(contents) {
              var p = document.createElement("p");
              var lines = contents.split(/(?:\r\n?|\n)/);

              for (var i = 0, ii = lines.length; i < ii; ++i) {
                var line = lines[i];
                p.appendChild(document.createTextNode(line));

                if (i < ii - 1) {
                  p.appendChild(document.createElement("br"));
                }
              }

              return p;
            }
          }, {
            key: "_toggle",
            value: function _toggle() {
              if (this.pinned) {
                this._hide(true);
              } else {
                this._show(true);
              }
            }
          }, {
            key: "_show",
            value: function _show() {
              var pin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

              if (pin) {
                this.pinned = true;
              }

              if (this.hideElement.hidden) {
                this.hideElement.hidden = false;
                this.container.style.zIndex += 1;
              }
            }
          }, {
            key: "_hide",
            value: function _hide() {
              var unpin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

              if (unpin) {
                this.pinned = false;
              }

              if (!this.hideElement.hidden && !this.pinned) {
                this.hideElement.hidden = true;
                this.container.style.zIndex -= 1;
              }
            }
          }]);

          return PopupElement;
        }();

        var FreeTextAnnotationElement =
        /*#__PURE__*/
        function (_AnnotationElement5) {
          _inherits(FreeTextAnnotationElement, _AnnotationElement5);

          function FreeTextAnnotationElement(parameters) {
            _classCallCheck(this, FreeTextAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _possibleConstructorReturn(this, _getPrototypeOf(FreeTextAnnotationElement).call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            }));
          }

          _createClass(FreeTextAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = "freeTextAnnotation";

              if (!this.data.hasPopup) {
                this._createPopup(null, this.data);
              }

              return this.container;
            }
          }]);

          return FreeTextAnnotationElement;
        }(AnnotationElement);

        var LineAnnotationElement =
        /*#__PURE__*/
        function (_AnnotationElement6) {
          _inherits(LineAnnotationElement, _AnnotationElement6);

          function LineAnnotationElement(parameters) {
            _classCallCheck(this, LineAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _possibleConstructorReturn(this, _getPrototypeOf(LineAnnotationElement).call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            }));
          }

          _createClass(LineAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = "lineAnnotation";
              var data = this.data;
              var width = data.rect[2] - data.rect[0];
              var height = data.rect[3] - data.rect[1];
              var svg = this.svgFactory.create(width, height);
              var line = this.svgFactory.createElement("svg:line");
              line.setAttribute("x1", data.rect[2] - data.lineCoordinates[0]);
              line.setAttribute("y1", data.rect[3] - data.lineCoordinates[1]);
              line.setAttribute("x2", data.rect[2] - data.lineCoordinates[2]);
              line.setAttribute("y2", data.rect[3] - data.lineCoordinates[3]);
              line.setAttribute("stroke-width", data.borderStyle.width || 1);
              line.setAttribute("stroke", "transparent");
              svg.appendChild(line);
              this.container.append(svg);

              this._createPopup(line, data);

              return this.container;
            }
          }]);

          return LineAnnotationElement;
        }(AnnotationElement);

        var SquareAnnotationElement =
        /*#__PURE__*/
        function (_AnnotationElement7) {
          _inherits(SquareAnnotationElement, _AnnotationElement7);

          function SquareAnnotationElement(parameters) {
            _classCallCheck(this, SquareAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _possibleConstructorReturn(this, _getPrototypeOf(SquareAnnotationElement).call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            }));
          }

          _createClass(SquareAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = "squareAnnotation";
              var data = this.data;
              var width = data.rect[2] - data.rect[0];
              var height = data.rect[3] - data.rect[1];
              var svg = this.svgFactory.create(width, height);
              var borderWidth = data.borderStyle.width;
              var square = this.svgFactory.createElement("svg:rect");
              square.setAttribute("x", borderWidth / 2);
              square.setAttribute("y", borderWidth / 2);
              square.setAttribute("width", width - borderWidth);
              square.setAttribute("height", height - borderWidth);
              square.setAttribute("stroke-width", borderWidth || 1);
              square.setAttribute("stroke", "transparent");
              square.setAttribute("fill", "none");
              svg.appendChild(square);
              this.container.append(svg);

              this._createPopup(square, data);

              return this.container;
            }
          }]);

          return SquareAnnotationElement;
        }(AnnotationElement);

        var CircleAnnotationElement =
        /*#__PURE__*/
        function (_AnnotationElement8) {
          _inherits(CircleAnnotationElement, _AnnotationElement8);

          function CircleAnnotationElement(parameters) {
            _classCallCheck(this, CircleAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _possibleConstructorReturn(this, _getPrototypeOf(CircleAnnotationElement).call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            }));
          }

          _createClass(CircleAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = "circleAnnotation";
              var data = this.data;
              var width = data.rect[2] - data.rect[0];
              var height = data.rect[3] - data.rect[1];
              var svg = this.svgFactory.create(width, height);
              var borderWidth = data.borderStyle.width;
              var circle = this.svgFactory.createElement("svg:ellipse");
              circle.setAttribute("cx", width / 2);
              circle.setAttribute("cy", height / 2);
              circle.setAttribute("rx", width / 2 - borderWidth / 2);
              circle.setAttribute("ry", height / 2 - borderWidth / 2);
              circle.setAttribute("stroke-width", borderWidth || 1);
              circle.setAttribute("stroke", "transparent");
              circle.setAttribute("fill", "none");
              svg.appendChild(circle);
              this.container.append(svg);

              this._createPopup(circle, data);

              return this.container;
            }
          }]);

          return CircleAnnotationElement;
        }(AnnotationElement);

        var PolylineAnnotationElement =
        /*#__PURE__*/
        function (_AnnotationElement9) {
          _inherits(PolylineAnnotationElement, _AnnotationElement9);

          function PolylineAnnotationElement(parameters) {
            var _this41;

            _classCallCheck(this, PolylineAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            _this41 = _possibleConstructorReturn(this, _getPrototypeOf(PolylineAnnotationElement).call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            }));
            _this41.containerClassName = "polylineAnnotation";
            _this41.svgElementName = "svg:polyline";
            return _this41;
          }

          _createClass(PolylineAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = this.containerClassName;
              var data = this.data;
              var width = data.rect[2] - data.rect[0];
              var height = data.rect[3] - data.rect[1];
              var svg = this.svgFactory.create(width, height);
              var points = [];
              var _iteratorNormalCompletion48 = true;
              var _didIteratorError48 = false;
              var _iteratorError48 = undefined;

              try {
                for (var _iterator48 = data.vertices[Symbol.iterator](), _step48; !(_iteratorNormalCompletion48 = (_step48 = _iterator48.next()).done); _iteratorNormalCompletion48 = true) {
                  var coordinate = _step48.value;
                  var x = coordinate.x - data.rect[0];
                  var y = data.rect[3] - coordinate.y;
                  points.push(x + "," + y);
                }
              } catch (err) {
                _didIteratorError48 = true;
                _iteratorError48 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion48 && _iterator48["return"] != null) {
                    _iterator48["return"]();
                  }
                } finally {
                  if (_didIteratorError48) {
                    throw _iteratorError48;
                  }
                }
              }

              points = points.join(" ");
              var polyline = this.svgFactory.createElement(this.svgElementName);
              polyline.setAttribute("points", points);
              polyline.setAttribute("stroke-width", data.borderStyle.width || 1);
              polyline.setAttribute("stroke", "transparent");
              polyline.setAttribute("fill", "none");
              svg.appendChild(polyline);
              this.container.append(svg);

              this._createPopup(polyline, data);

              return this.container;
            }
          }]);

          return PolylineAnnotationElement;
        }(AnnotationElement);

        var PolygonAnnotationElement =
        /*#__PURE__*/
        function (_PolylineAnnotationEl) {
          _inherits(PolygonAnnotationElement, _PolylineAnnotationEl);

          function PolygonAnnotationElement(parameters) {
            var _this42;

            _classCallCheck(this, PolygonAnnotationElement);

            _this42 = _possibleConstructorReturn(this, _getPrototypeOf(PolygonAnnotationElement).call(this, parameters));
            _this42.containerClassName = "polygonAnnotation";
            _this42.svgElementName = "svg:polygon";
            return _this42;
          }

          return PolygonAnnotationElement;
        }(PolylineAnnotationElement);

        var CaretAnnotationElement =
        /*#__PURE__*/
        function (_AnnotationElement10) {
          _inherits(CaretAnnotationElement, _AnnotationElement10);

          function CaretAnnotationElement(parameters) {
            _classCallCheck(this, CaretAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _possibleConstructorReturn(this, _getPrototypeOf(CaretAnnotationElement).call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            }));
          }

          _createClass(CaretAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = "caretAnnotation";

              if (!this.data.hasPopup) {
                this._createPopup(null, this.data);
              }

              return this.container;
            }
          }]);

          return CaretAnnotationElement;
        }(AnnotationElement);

        var InkAnnotationElement =
        /*#__PURE__*/
        function (_AnnotationElement11) {
          _inherits(InkAnnotationElement, _AnnotationElement11);

          function InkAnnotationElement(parameters) {
            var _this43;

            _classCallCheck(this, InkAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            _this43 = _possibleConstructorReturn(this, _getPrototypeOf(InkAnnotationElement).call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            }));
            _this43.containerClassName = "inkAnnotation";
            _this43.svgElementName = "svg:polyline";
            return _this43;
          }

          _createClass(InkAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = this.containerClassName;
              var data = this.data;
              var width = data.rect[2] - data.rect[0];
              var height = data.rect[3] - data.rect[1];
              var svg = this.svgFactory.create(width, height);
              var _iteratorNormalCompletion49 = true;
              var _didIteratorError49 = false;
              var _iteratorError49 = undefined;

              try {
                for (var _iterator49 = data.inkLists[Symbol.iterator](), _step49; !(_iteratorNormalCompletion49 = (_step49 = _iterator49.next()).done); _iteratorNormalCompletion49 = true) {
                  var inkList = _step49.value;
                  var points = [];
                  var _iteratorNormalCompletion50 = true;
                  var _didIteratorError50 = false;
                  var _iteratorError50 = undefined;

                  try {
                    for (var _iterator50 = inkList[Symbol.iterator](), _step50; !(_iteratorNormalCompletion50 = (_step50 = _iterator50.next()).done); _iteratorNormalCompletion50 = true) {
                      var coordinate = _step50.value;
                      var x = coordinate.x - data.rect[0];
                      var y = data.rect[3] - coordinate.y;
                      points.push("".concat(x, ",").concat(y));
                    }
                  } catch (err) {
                    _didIteratorError50 = true;
                    _iteratorError50 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion50 && _iterator50["return"] != null) {
                        _iterator50["return"]();
                      }
                    } finally {
                      if (_didIteratorError50) {
                        throw _iteratorError50;
                      }
                    }
                  }

                  points = points.join(" ");
                  var polyline = this.svgFactory.createElement(this.svgElementName);
                  polyline.setAttribute("points", points);
                  polyline.setAttribute("stroke-width", data.borderStyle.width || 1);
                  polyline.setAttribute("stroke", "transparent");
                  polyline.setAttribute("fill", "none");

                  this._createPopup(polyline, data);

                  svg.appendChild(polyline);
                }
              } catch (err) {
                _didIteratorError49 = true;
                _iteratorError49 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion49 && _iterator49["return"] != null) {
                    _iterator49["return"]();
                  }
                } finally {
                  if (_didIteratorError49) {
                    throw _iteratorError49;
                  }
                }
              }

              this.container.append(svg);
              return this.container;
            }
          }]);

          return InkAnnotationElement;
        }(AnnotationElement);

        var HighlightAnnotationElement =
        /*#__PURE__*/
        function (_AnnotationElement12) {
          _inherits(HighlightAnnotationElement, _AnnotationElement12);

          function HighlightAnnotationElement(parameters) {
            _classCallCheck(this, HighlightAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _possibleConstructorReturn(this, _getPrototypeOf(HighlightAnnotationElement).call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true,
              createQuadrilaterals: true
            }));
          }

          _createClass(HighlightAnnotationElement, [{
            key: "render",
            value: function render() {
              if (!this.data.hasPopup) {
                this._createPopup(null, this.data);
              }

              if (this.quadrilaterals) {
                return this._renderQuadrilaterals("highlightAnnotation");
              }

              this.container.className = "highlightAnnotation";
              return this.container;
            }
          }]);

          return HighlightAnnotationElement;
        }(AnnotationElement);

        var UnderlineAnnotationElement =
        /*#__PURE__*/
        function (_AnnotationElement13) {
          _inherits(UnderlineAnnotationElement, _AnnotationElement13);

          function UnderlineAnnotationElement(parameters) {
            _classCallCheck(this, UnderlineAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _possibleConstructorReturn(this, _getPrototypeOf(UnderlineAnnotationElement).call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true,
              createQuadrilaterals: true
            }));
          }

          _createClass(UnderlineAnnotationElement, [{
            key: "render",
            value: function render() {
              if (!this.data.hasPopup) {
                this._createPopup(null, this.data);
              }

              if (this.quadrilaterals) {
                return this._renderQuadrilaterals("underlineAnnotation");
              }

              this.container.className = "underlineAnnotation";
              return this.container;
            }
          }]);

          return UnderlineAnnotationElement;
        }(AnnotationElement);

        var SquigglyAnnotationElement =
        /*#__PURE__*/
        function (_AnnotationElement14) {
          _inherits(SquigglyAnnotationElement, _AnnotationElement14);

          function SquigglyAnnotationElement(parameters) {
            _classCallCheck(this, SquigglyAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _possibleConstructorReturn(this, _getPrototypeOf(SquigglyAnnotationElement).call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true,
              createQuadrilaterals: true
            }));
          }

          _createClass(SquigglyAnnotationElement, [{
            key: "render",
            value: function render() {
              if (!this.data.hasPopup) {
                this._createPopup(null, this.data);
              }

              if (this.quadrilaterals) {
                return this._renderQuadrilaterals("squigglyAnnotation");
              }

              this.container.className = "squigglyAnnotation";
              return this.container;
            }
          }]);

          return SquigglyAnnotationElement;
        }(AnnotationElement);

        var StrikeOutAnnotationElement =
        /*#__PURE__*/
        function (_AnnotationElement15) {
          _inherits(StrikeOutAnnotationElement, _AnnotationElement15);

          function StrikeOutAnnotationElement(parameters) {
            _classCallCheck(this, StrikeOutAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _possibleConstructorReturn(this, _getPrototypeOf(StrikeOutAnnotationElement).call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true,
              createQuadrilaterals: true
            }));
          }

          _createClass(StrikeOutAnnotationElement, [{
            key: "render",
            value: function render() {
              if (!this.data.hasPopup) {
                this._createPopup(null, this.data);
              }

              if (this.quadrilaterals) {
                return this._renderQuadrilaterals("strikeoutAnnotation");
              }

              this.container.className = "strikeoutAnnotation";
              return this.container;
            }
          }]);

          return StrikeOutAnnotationElement;
        }(AnnotationElement);

        var StampAnnotationElement =
        /*#__PURE__*/
        function (_AnnotationElement16) {
          _inherits(StampAnnotationElement, _AnnotationElement16);

          function StampAnnotationElement(parameters) {
            _classCallCheck(this, StampAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _possibleConstructorReturn(this, _getPrototypeOf(StampAnnotationElement).call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            }));
          }

          _createClass(StampAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = "stampAnnotation";

              if (!this.data.hasPopup) {
                this._createPopup(null, this.data);
              }

              return this.container;
            }
          }]);

          return StampAnnotationElement;
        }(AnnotationElement);

        var FileAttachmentAnnotationElement =
        /*#__PURE__*/
        function (_AnnotationElement17) {
          _inherits(FileAttachmentAnnotationElement, _AnnotationElement17);

          function FileAttachmentAnnotationElement(parameters) {
            var _this44$linkService$e;

            var _this44;

            _classCallCheck(this, FileAttachmentAnnotationElement);

            _this44 = _possibleConstructorReturn(this, _getPrototypeOf(FileAttachmentAnnotationElement).call(this, parameters, {
              isRenderable: true
            }));
            var _this44$data$file = _this44.data.file,
                filename = _this44$data$file.filename,
                content = _this44$data$file.content;
            _this44.filename = (0, _display_utils.getFilenameFromUrl)(filename);
            _this44.content = content;
            (_this44$linkService$e = _this44.linkService.eventBus) === null || _this44$linkService$e === void 0 ? void 0 : _this44$linkService$e.dispatch("fileattachmentannotation", {
              source: _assertThisInitialized(_this44),
              id: (0, _util.stringToPDFString)(filename),
              filename: filename,
              content: content
            });
            return _this44;
          }

          _createClass(FileAttachmentAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = "fileAttachmentAnnotation";
              var trigger = document.createElement("div");
              trigger.style.height = this.container.style.height;
              trigger.style.width = this.container.style.width;
              trigger.addEventListener("dblclick", this._download.bind(this));

              if (!this.data.hasPopup && (this.data.title || this.data.contents)) {
                this._createPopup(trigger, this.data);
              }

              this.container.appendChild(trigger);
              return this.container;
            }
          }, {
            key: "_download",
            value: function _download() {
              var _this$downloadManager;

              (_this$downloadManager = this.downloadManager) === null || _this$downloadManager === void 0 ? void 0 : _this$downloadManager.openOrDownloadData(this.container, this.content, this.filename);
            }
          }]);

          return FileAttachmentAnnotationElement;
        }(AnnotationElement);

        var AnnotationLayer =
        /*#__PURE__*/
        function () {
          function AnnotationLayer() {
            _classCallCheck(this, AnnotationLayer);
          }

          _createClass(AnnotationLayer, null, [{
            key: "render",
            value: function render(parameters) {
              var sortedAnnotations = [],
                  popupAnnotations = [];
              var _iteratorNormalCompletion51 = true;
              var _didIteratorError51 = false;
              var _iteratorError51 = undefined;

              try {
                for (var _iterator51 = parameters.annotations[Symbol.iterator](), _step51; !(_iteratorNormalCompletion51 = (_step51 = _iterator51.next()).done); _iteratorNormalCompletion51 = true) {
                  var data = _step51.value;

                  if (!data) {
                    continue;
                  }

                  if (data.annotationType === _util.AnnotationType.POPUP) {
                    popupAnnotations.push(data);
                    continue;
                  }

                  sortedAnnotations.push(data);
                }
              } catch (err) {
                _didIteratorError51 = true;
                _iteratorError51 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion51 && _iterator51["return"] != null) {
                    _iterator51["return"]();
                  }
                } finally {
                  if (_didIteratorError51) {
                    throw _iteratorError51;
                  }
                }
              }

              if (popupAnnotations.length) {
                sortedAnnotations.push.apply(sortedAnnotations, popupAnnotations);
              }

              for (var _i8 = 0, _sortedAnnotations = sortedAnnotations; _i8 < _sortedAnnotations.length; _i8++) {
                var _data3 = _sortedAnnotations[_i8];
                var element = AnnotationElementFactory.create({
                  data: _data3,
                  layer: parameters.div,
                  page: parameters.page,
                  viewport: parameters.viewport,
                  linkService: parameters.linkService,
                  downloadManager: parameters.downloadManager,
                  imageResourcesPath: parameters.imageResourcesPath || "",
                  renderInteractiveForms: parameters.renderInteractiveForms !== false,
                  svgFactory: new _display_utils.DOMSVGFactory(),
                  annotationStorage: parameters.annotationStorage || new _annotation_storage.AnnotationStorage(),
                  enableScripting: parameters.enableScripting,
                  hasJSActions: parameters.hasJSActions,
                  mouseState: parameters.mouseState || {
                    isDown: false
                  }
                });

                if (element.isRenderable) {
                  var rendered = element.render();

                  if (_data3.hidden) {
                    rendered.style.visibility = "hidden";
                  }

                  if (Array.isArray(rendered)) {
                    var _iteratorNormalCompletion52 = true;
                    var _didIteratorError52 = false;
                    var _iteratorError52 = undefined;

                    try {
                      for (var _iterator52 = rendered[Symbol.iterator](), _step52; !(_iteratorNormalCompletion52 = (_step52 = _iterator52.next()).done); _iteratorNormalCompletion52 = true) {
                        var renderedElement = _step52.value;
                        parameters.div.appendChild(renderedElement);
                      }
                    } catch (err) {
                      _didIteratorError52 = true;
                      _iteratorError52 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion52 && _iterator52["return"] != null) {
                          _iterator52["return"]();
                        }
                      } finally {
                        if (_didIteratorError52) {
                          throw _iteratorError52;
                        }
                      }
                    }
                  } else {
                    if (element instanceof PopupAnnotationElement) {
                      parameters.div.prepend(rendered);
                    } else {
                      parameters.div.appendChild(rendered);
                    }
                  }
                }
              }
            }
          }, {
            key: "update",
            value: function update(parameters) {
              var transform = "matrix(".concat(parameters.viewport.transform.join(","), ")");
              var _iteratorNormalCompletion53 = true;
              var _didIteratorError53 = false;
              var _iteratorError53 = undefined;

              try {
                for (var _iterator53 = parameters.annotations[Symbol.iterator](), _step53; !(_iteratorNormalCompletion53 = (_step53 = _iterator53.next()).done); _iteratorNormalCompletion53 = true) {
                  var data = _step53.value;
                  var elements = parameters.div.querySelectorAll("[data-annotation-id=\"".concat(data.id, "\"]"));

                  if (elements) {
                    var _iteratorNormalCompletion54 = true;
                    var _didIteratorError54 = false;
                    var _iteratorError54 = undefined;

                    try {
                      for (var _iterator54 = elements[Symbol.iterator](), _step54; !(_iteratorNormalCompletion54 = (_step54 = _iterator54.next()).done); _iteratorNormalCompletion54 = true) {
                        var element = _step54.value;
                        element.style.transform = transform;
                      }
                    } catch (err) {
                      _didIteratorError54 = true;
                      _iteratorError54 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion54 && _iterator54["return"] != null) {
                          _iterator54["return"]();
                        }
                      } finally {
                        if (_didIteratorError54) {
                          throw _iteratorError54;
                        }
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError53 = true;
                _iteratorError53 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion53 && _iterator53["return"] != null) {
                    _iterator53["return"]();
                  }
                } finally {
                  if (_didIteratorError53) {
                    throw _iteratorError53;
                  }
                }
              }

              parameters.div.hidden = false;
            }
          }]);

          return AnnotationLayer;
        }();

        exports.AnnotationLayer = AnnotationLayer;
        /***/
      },
      /* 18 */

      /***/
      function (__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ColorConverters = void 0;

        function makeColorComp(n) {
          return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, "0");
        }

        var ColorConverters =
        /*#__PURE__*/
        function () {
          function ColorConverters() {
            _classCallCheck(this, ColorConverters);
          }

          _createClass(ColorConverters, null, [{
            key: "CMYK_G",
            value: function CMYK_G(_ref41) {
              var _ref42 = _slicedToArray(_ref41, 4),
                  c = _ref42[0],
                  y = _ref42[1],
                  m = _ref42[2],
                  k = _ref42[3];

              return ["G", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];
            }
          }, {
            key: "G_CMYK",
            value: function G_CMYK(_ref43) {
              var _ref44 = _slicedToArray(_ref43, 1),
                  g = _ref44[0];

              return ["CMYK", 0, 0, 0, 1 - g];
            }
          }, {
            key: "G_RGB",
            value: function G_RGB(_ref45) {
              var _ref46 = _slicedToArray(_ref45, 1),
                  g = _ref46[0];

              return ["RGB", g, g, g];
            }
          }, {
            key: "G_HTML",
            value: function G_HTML(_ref47) {
              var _ref48 = _slicedToArray(_ref47, 1),
                  g = _ref48[0];

              var G = makeColorComp(g);
              return "#".concat(G).concat(G).concat(G);
            }
          }, {
            key: "RGB_G",
            value: function RGB_G(_ref49) {
              var _ref50 = _slicedToArray(_ref49, 3),
                  r = _ref50[0],
                  g = _ref50[1],
                  b = _ref50[2];

              return ["G", 0.3 * r + 0.59 * g + 0.11 * b];
            }
          }, {
            key: "RGB_HTML",
            value: function RGB_HTML(_ref51) {
              var _ref52 = _slicedToArray(_ref51, 3),
                  r = _ref52[0],
                  g = _ref52[1],
                  b = _ref52[2];

              var R = makeColorComp(r);
              var G = makeColorComp(g);
              var B = makeColorComp(b);
              return "#".concat(R).concat(G).concat(B);
            }
          }, {
            key: "T_HTML",
            value: function T_HTML() {
              return "#00000000";
            }
          }, {
            key: "CMYK_RGB",
            value: function CMYK_RGB(_ref53) {
              var _ref54 = _slicedToArray(_ref53, 4),
                  c = _ref54[0],
                  y = _ref54[1],
                  m = _ref54[2],
                  k = _ref54[3];

              return ["RGB", 1 - Math.min(1, c + k), 1 - Math.min(1, m + k), 1 - Math.min(1, y + k)];
            }
          }, {
            key: "CMYK_HTML",
            value: function CMYK_HTML(components) {
              return this.RGB_HTML(this.CMYK_RGB(components));
            }
          }, {
            key: "RGB_CMYK",
            value: function RGB_CMYK(_ref55) {
              var _ref56 = _slicedToArray(_ref55, 3),
                  r = _ref56[0],
                  g = _ref56[1],
                  b = _ref56[2];

              var c = 1 - r;
              var m = 1 - g;
              var y = 1 - b;
              var k = Math.min(c, m, y);
              return ["CMYK", c, m, y, k];
            }
          }]);

          return ColorConverters;
        }();

        exports.ColorConverters = ColorConverters;
        /***/
      },
      /* 19 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.renderTextLayer = renderTextLayer;

        var _util = __w_pdfjs_require__(2);

        var MAX_TEXT_DIVS_TO_RENDER = 100000;
        var DEFAULT_FONT_SIZE = 30;
        var DEFAULT_FONT_ASCENT = 0.8;
        var ascentCache = new Map();
        var AllWhitespaceRegexp = /^\s+$/g;

        function getAscent(fontFamily, ctx) {
          var cachedAscent = ascentCache.get(fontFamily);

          if (cachedAscent) {
            return cachedAscent;
          }

          ctx.save();
          ctx.font = "".concat(DEFAULT_FONT_SIZE, "px ").concat(fontFamily);
          var metrics = ctx.measureText("");
          var ascent = metrics.fontBoundingBoxAscent;
          var descent = Math.abs(metrics.fontBoundingBoxDescent);

          if (ascent) {
            ctx.restore();
            var ratio = ascent / (ascent + descent);
            ascentCache.set(fontFamily, ratio);
            return ratio;
          }

          ctx.strokeStyle = "red";
          ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);
          ctx.strokeText("g", 0, 0);
          var pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;
          descent = 0;

          for (var i = pixels.length - 1 - 3; i >= 0; i -= 4) {
            if (pixels[i] > 0) {
              descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);
              break;
            }
          }

          ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);
          ctx.strokeText("A", 0, DEFAULT_FONT_SIZE);
          pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;
          ascent = 0;

          for (var _i9 = 0, ii = pixels.length; _i9 < ii; _i9 += 4) {
            if (pixels[_i9] > 0) {
              ascent = DEFAULT_FONT_SIZE - Math.floor(_i9 / 4 / DEFAULT_FONT_SIZE);
              break;
            }
          }

          ctx.restore();

          if (ascent) {
            var _ratio = ascent / (ascent + descent);

            ascentCache.set(fontFamily, _ratio);
            return _ratio;
          }

          ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);
          return DEFAULT_FONT_ASCENT;
        }

        function appendText(task, geom, styles, ctx) {
          var textDiv = document.createElement("span");
          var textDivProperties = {
            angle: 0,
            canvasWidth: 0,
            hasText: geom.str !== "",
            hasEOL: geom.hasEOL,
            originalTransform: null,
            paddingBottom: 0,
            paddingLeft: 0,
            paddingRight: 0,
            paddingTop: 0,
            scale: 1
          };

          task._textDivs.push(textDiv);

          var tx = _util.Util.transform(task._viewport.transform, geom.transform);

          var angle = Math.atan2(tx[1], tx[0]);
          var style = styles[geom.fontName];

          if (style.vertical) {
            angle += Math.PI / 2;
          }

          var fontHeight = Math.hypot(tx[2], tx[3]);
          var fontAscent = fontHeight * getAscent(style.fontFamily, ctx);
          var left, top;

          if (angle === 0) {
            left = tx[4];
            top = tx[5] - fontAscent;
          } else {
            left = tx[4] + fontAscent * Math.sin(angle);
            top = tx[5] - fontAscent * Math.cos(angle);
          }

          textDiv.style.left = "".concat(left, "px");
          textDiv.style.top = "".concat(top, "px");
          textDiv.style.fontSize = "".concat(fontHeight, "px");
          textDiv.style.fontFamily = style.fontFamily;
          textDiv.setAttribute("role", "presentation");
          textDiv.textContent = geom.str;
          textDiv.dir = geom.dir;

          if (task._fontInspectorEnabled) {
            textDiv.dataset.fontName = geom.fontName;
          }

          if (angle !== 0) {
            textDivProperties.angle = angle * (180 / Math.PI);
          }

          var shouldScaleText = false;

          if (geom.str.length > 1 || task._enhanceTextSelection && AllWhitespaceRegexp.test(geom.str)) {
            shouldScaleText = true;
          } else if (geom.transform[0] !== geom.transform[3]) {
            var absScaleX = Math.abs(geom.transform[0]),
                absScaleY = Math.abs(geom.transform[3]);

            if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {
              shouldScaleText = true;
            }
          }

          if (shouldScaleText) {
            if (style.vertical) {
              textDivProperties.canvasWidth = geom.height * task._viewport.scale;
            } else {
              textDivProperties.canvasWidth = geom.width * task._viewport.scale;
            }
          }

          task._textDivProperties.set(textDiv, textDivProperties);

          if (task._textContentStream) {
            task._layoutText(textDiv);
          }

          if (task._enhanceTextSelection && textDivProperties.hasText) {
            var angleCos = 1,
                angleSin = 0;

            if (angle !== 0) {
              angleCos = Math.cos(angle);
              angleSin = Math.sin(angle);
            }

            var divWidth = (style.vertical ? geom.height : geom.width) * task._viewport.scale;
            var divHeight = fontHeight;
            var m, b;

            if (angle !== 0) {
              m = [angleCos, angleSin, -angleSin, angleCos, left, top];
              b = _util.Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);
            } else {
              b = [left, top, left + divWidth, top + divHeight];
            }

            task._bounds.push({
              left: b[0],
              top: b[1],
              right: b[2],
              bottom: b[3],
              div: textDiv,
              size: [divWidth, divHeight],
              m: m
            });
          }
        }

        function render(task) {
          if (task._canceled) {
            return;
          }

          var textDivs = task._textDivs;
          var capability = task._capability;
          var textDivsLength = textDivs.length;

          if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {
            task._renderingDone = true;
            capability.resolve();
            return;
          }

          if (!task._textContentStream) {
            for (var i = 0; i < textDivsLength; i++) {
              task._layoutText(textDivs[i]);
            }
          }

          task._renderingDone = true;
          capability.resolve();
        }

        function findPositiveMin(ts, offset, count) {
          var result = 0;

          for (var i = 0; i < count; i++) {
            var t = ts[offset++];

            if (t > 0) {
              result = result ? Math.min(t, result) : t;
            }
          }

          return result;
        }

        function expand(task) {
          var bounds = task._bounds;
          var viewport = task._viewport;
          var expanded = expandBounds(viewport.width, viewport.height, bounds);

          for (var i = 0; i < expanded.length; i++) {
            var div = bounds[i].div;

            var divProperties = task._textDivProperties.get(div);

            if (divProperties.angle === 0) {
              divProperties.paddingLeft = bounds[i].left - expanded[i].left;
              divProperties.paddingTop = bounds[i].top - expanded[i].top;
              divProperties.paddingRight = expanded[i].right - bounds[i].right;
              divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;

              task._textDivProperties.set(div, divProperties);

              continue;
            }

            var e = expanded[i],
                b = bounds[i];
            var m = b.m,
                c = m[0],
                s = m[1];
            var points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];
            var ts = new Float64Array(64);

            for (var j = 0, jj = points.length; j < jj; j++) {
              var t = _util.Util.applyTransform(points[j], m);

              ts[j + 0] = c && (e.left - t[0]) / c;
              ts[j + 4] = s && (e.top - t[1]) / s;
              ts[j + 8] = c && (e.right - t[0]) / c;
              ts[j + 12] = s && (e.bottom - t[1]) / s;
              ts[j + 16] = s && (e.left - t[0]) / -s;
              ts[j + 20] = c && (e.top - t[1]) / c;
              ts[j + 24] = s && (e.right - t[0]) / -s;
              ts[j + 28] = c && (e.bottom - t[1]) / c;
              ts[j + 32] = c && (e.left - t[0]) / -c;
              ts[j + 36] = s && (e.top - t[1]) / -s;
              ts[j + 40] = c && (e.right - t[0]) / -c;
              ts[j + 44] = s && (e.bottom - t[1]) / -s;
              ts[j + 48] = s && (e.left - t[0]) / s;
              ts[j + 52] = c && (e.top - t[1]) / -c;
              ts[j + 56] = s && (e.right - t[0]) / s;
              ts[j + 60] = c && (e.bottom - t[1]) / -c;
            }

            var boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));
            divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;
            divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;
            divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;
            divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;

            task._textDivProperties.set(div, divProperties);
          }
        }

        function expandBounds(width, height, boxes) {
          var bounds = boxes.map(function (box, i) {
            return {
              x1: box.left,
              y1: box.top,
              x2: box.right,
              y2: box.bottom,
              index: i,
              x1New: undefined,
              x2New: undefined
            };
          });
          expandBoundsLTR(width, bounds);
          var expanded = new Array(boxes.length);
          var _iteratorNormalCompletion55 = true;
          var _didIteratorError55 = false;
          var _iteratorError55 = undefined;

          try {
            for (var _iterator55 = bounds[Symbol.iterator](), _step55; !(_iteratorNormalCompletion55 = (_step55 = _iterator55.next()).done); _iteratorNormalCompletion55 = true) {
              var b = _step55.value;
              var i = b.index;
              expanded[i] = {
                left: b.x1New,
                top: 0,
                right: b.x2New,
                bottom: 0
              };
            }
          } catch (err) {
            _didIteratorError55 = true;
            _iteratorError55 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion55 && _iterator55["return"] != null) {
                _iterator55["return"]();
              }
            } finally {
              if (_didIteratorError55) {
                throw _iteratorError55;
              }
            }
          }

          boxes.map(function (box, i) {
            var e = expanded[i],
                b = bounds[i];
            b.x1 = box.top;
            b.y1 = width - e.right;
            b.x2 = box.bottom;
            b.y2 = width - e.left;
            b.index = i;
            b.x1New = undefined;
            b.x2New = undefined;
          });
          expandBoundsLTR(height, bounds);
          var _iteratorNormalCompletion56 = true;
          var _didIteratorError56 = false;
          var _iteratorError56 = undefined;

          try {
            for (var _iterator56 = bounds[Symbol.iterator](), _step56; !(_iteratorNormalCompletion56 = (_step56 = _iterator56.next()).done); _iteratorNormalCompletion56 = true) {
              var _b = _step56.value;
              var _i10 = _b.index;
              expanded[_i10].top = _b.x1New;
              expanded[_i10].bottom = _b.x2New;
            }
          } catch (err) {
            _didIteratorError56 = true;
            _iteratorError56 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion56 && _iterator56["return"] != null) {
                _iterator56["return"]();
              }
            } finally {
              if (_didIteratorError56) {
                throw _iteratorError56;
              }
            }
          }

          return expanded;
        }

        function expandBoundsLTR(width, bounds) {
          bounds.sort(function (a, b) {
            return a.x1 - b.x1 || a.index - b.index;
          });
          var fakeBoundary = {
            x1: -Infinity,
            y1: -Infinity,
            x2: 0,
            y2: Infinity,
            index: -1,
            x1New: 0,
            x2New: 0
          };
          var horizon = [{
            start: -Infinity,
            end: Infinity,
            boundary: fakeBoundary
          }];
          var _iteratorNormalCompletion57 = true;
          var _didIteratorError57 = false;
          var _iteratorError57 = undefined;

          try {
            for (var _iterator57 = bounds[Symbol.iterator](), _step57; !(_iteratorNormalCompletion57 = (_step57 = _iterator57.next()).done); _iteratorNormalCompletion57 = true) {
              var boundary = _step57.value;
              var i = 0;

              while (i < horizon.length && horizon[i].end <= boundary.y1) {
                i++;
              }

              var j = horizon.length - 1;

              while (j >= 0 && horizon[j].start >= boundary.y2) {
                j--;
              }

              var horizonPart = void 0,
                  affectedBoundary = void 0;
              var q = void 0,
                  k = void 0,
                  maxXNew = -Infinity;

              for (q = i; q <= j; q++) {
                horizonPart = horizon[q];
                affectedBoundary = horizonPart.boundary;
                var xNew = void 0;

                if (affectedBoundary.x2 > boundary.x1) {
                  xNew = affectedBoundary.index > boundary.index ? affectedBoundary.x1New : boundary.x1;
                } else if (affectedBoundary.x2New === undefined) {
                  xNew = (affectedBoundary.x2 + boundary.x1) / 2;
                } else {
                  xNew = affectedBoundary.x2New;
                }

                if (xNew > maxXNew) {
                  maxXNew = xNew;
                }
              }

              boundary.x1New = maxXNew;

              for (q = i; q <= j; q++) {
                horizonPart = horizon[q];
                affectedBoundary = horizonPart.boundary;

                if (affectedBoundary.x2New === undefined) {
                  if (affectedBoundary.x2 > boundary.x1) {
                    if (affectedBoundary.index > boundary.index) {
                      affectedBoundary.x2New = affectedBoundary.x2;
                    }
                  } else {
                    affectedBoundary.x2New = maxXNew;
                  }
                } else if (affectedBoundary.x2New > maxXNew) {
                  affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);
                }
              }

              var changedHorizon = [];
              var lastBoundary = null;

              for (q = i; q <= j; q++) {
                horizonPart = horizon[q];
                affectedBoundary = horizonPart.boundary;
                var useBoundary = affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;

                if (lastBoundary === useBoundary) {
                  changedHorizon[changedHorizon.length - 1].end = horizonPart.end;
                } else {
                  changedHorizon.push({
                    start: horizonPart.start,
                    end: horizonPart.end,
                    boundary: useBoundary
                  });
                  lastBoundary = useBoundary;
                }
              }

              if (horizon[i].start < boundary.y1) {
                changedHorizon[0].start = boundary.y1;
                changedHorizon.unshift({
                  start: horizon[i].start,
                  end: boundary.y1,
                  boundary: horizon[i].boundary
                });
              }

              if (boundary.y2 < horizon[j].end) {
                changedHorizon[changedHorizon.length - 1].end = boundary.y2;
                changedHorizon.push({
                  start: boundary.y2,
                  end: horizon[j].end,
                  boundary: horizon[j].boundary
                });
              }

              for (q = i; q <= j; q++) {
                horizonPart = horizon[q];
                affectedBoundary = horizonPart.boundary;

                if (affectedBoundary.x2New !== undefined) {
                  continue;
                }

                var used = false;

                for (k = i - 1; !used && k >= 0 && horizon[k].start >= affectedBoundary.y1; k--) {
                  used = horizon[k].boundary === affectedBoundary;
                }

                for (k = j + 1; !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2; k++) {
                  used = horizon[k].boundary === affectedBoundary;
                }

                for (k = 0; !used && k < changedHorizon.length; k++) {
                  used = changedHorizon[k].boundary === affectedBoundary;
                }

                if (!used) {
                  affectedBoundary.x2New = maxXNew;
                }
              }

              Array.prototype.splice.apply(horizon, [i, j - i + 1].concat(changedHorizon));
            }
          } catch (err) {
            _didIteratorError57 = true;
            _iteratorError57 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion57 && _iterator57["return"] != null) {
                _iterator57["return"]();
              }
            } finally {
              if (_didIteratorError57) {
                throw _iteratorError57;
              }
            }
          }

          for (var _i11 = 0, _horizon = horizon; _i11 < _horizon.length; _i11++) {
            var _horizonPart = _horizon[_i11];
            var _affectedBoundary = _horizonPart.boundary;

            if (_affectedBoundary.x2New === undefined) {
              _affectedBoundary.x2New = Math.max(width, _affectedBoundary.x2);
            }
          }
        }

        var TextLayerRenderTask =
        /*#__PURE__*/
        function () {
          function TextLayerRenderTask(_ref57) {
            var _globalThis$FontInspe2,
                _this45 = this;

            var textContent = _ref57.textContent,
                textContentStream = _ref57.textContentStream,
                container = _ref57.container,
                viewport = _ref57.viewport,
                textDivs = _ref57.textDivs,
                textContentItemsStr = _ref57.textContentItemsStr,
                enhanceTextSelection = _ref57.enhanceTextSelection;

            _classCallCheck(this, TextLayerRenderTask);

            this._textContent = textContent;
            this._textContentStream = textContentStream;
            this._container = container;
            this._document = container.ownerDocument;
            this._viewport = viewport;
            this._textDivs = textDivs || [];
            this._textContentItemsStr = textContentItemsStr || [];
            this._enhanceTextSelection = !!enhanceTextSelection;
            this._fontInspectorEnabled = !!((_globalThis$FontInspe2 = globalThis.FontInspector) !== null && _globalThis$FontInspe2 !== void 0 && _globalThis$FontInspe2.enabled);
            this._reader = null;
            this._layoutTextLastFontSize = null;
            this._layoutTextLastFontFamily = null;
            this._layoutTextCtx = null;
            this._textDivProperties = new WeakMap();
            this._renderingDone = false;
            this._canceled = false;
            this._capability = (0, _util.createPromiseCapability)();
            this._renderTimer = null;
            this._bounds = [];

            this._capability.promise["finally"](function () {
              if (_this45._layoutTextCtx) {
                _this45._layoutTextCtx.canvas.width = 0;
                _this45._layoutTextCtx.canvas.height = 0;
                _this45._layoutTextCtx = null;
              }
            })["catch"](function () {});
          }

          _createClass(TextLayerRenderTask, [{
            key: "cancel",
            value: function cancel() {
              this._canceled = true;

              if (this._reader) {
                this._reader.cancel(new _util.AbortException("TextLayer task cancelled."));

                this._reader = null;
              }

              if (this._renderTimer !== null) {
                clearTimeout(this._renderTimer);
                this._renderTimer = null;
              }

              this._capability.reject(new Error("TextLayer task cancelled."));
            }
          }, {
            key: "_processItems",
            value: function _processItems(items, styleCache) {
              for (var i = 0, len = items.length; i < len; i++) {
                if (items[i].str === undefined) {
                  if (items[i].type === "beginMarkedContentProps" || items[i].type === "beginMarkedContent") {
                    var parent = this._container;
                    this._container = document.createElement("span");

                    this._container.classList.add("markedContent");

                    if (items[i].id !== null) {
                      this._container.setAttribute("id", "".concat(items[i].id));
                    }

                    parent.appendChild(this._container);
                  } else if (items[i].type === "endMarkedContent") {
                    this._container = this._container.parentNode;
                  }

                  continue;
                }

                this._textContentItemsStr.push(items[i].str);

                appendText(this, items[i], styleCache, this._layoutTextCtx);
              }
            }
          }, {
            key: "_layoutText",
            value: function _layoutText(textDiv) {
              var textDivProperties = this._textDivProperties.get(textDiv);

              var transform = "";

              if (textDivProperties.canvasWidth !== 0 && textDivProperties.hasText) {
                var _textDiv$style = textDiv.style,
                    fontSize = _textDiv$style.fontSize,
                    fontFamily = _textDiv$style.fontFamily;

                if (fontSize !== this._layoutTextLastFontSize || fontFamily !== this._layoutTextLastFontFamily) {
                  this._layoutTextCtx.font = "".concat(fontSize, " ").concat(fontFamily);
                  this._layoutTextLastFontSize = fontSize;
                  this._layoutTextLastFontFamily = fontFamily;
                }

                var _this$_layoutTextCtx$ = this._layoutTextCtx.measureText(textDiv.textContent),
                    width = _this$_layoutTextCtx$.width;

                if (width > 0) {
                  textDivProperties.scale = textDivProperties.canvasWidth / width;
                  transform = "scaleX(".concat(textDivProperties.scale, ")");
                }
              }

              if (textDivProperties.angle !== 0) {
                transform = "rotate(".concat(textDivProperties.angle, "deg) ").concat(transform);
              }

              if (transform.length > 0) {
                if (this._enhanceTextSelection) {
                  textDivProperties.originalTransform = transform;
                }

                textDiv.style.transform = transform;
              }

              if (textDivProperties.hasText) {
                this._container.appendChild(textDiv);
              }

              if (textDivProperties.hasEOL) {
                var br = document.createElement("br");
                br.setAttribute("role", "presentation");

                this._container.appendChild(br);
              }
            }
          }, {
            key: "_render",
            value: function _render() {
              var _this46 = this;

              var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
              var capability = (0, _util.createPromiseCapability)();
              var styleCache = Object.create(null);

              var canvas = this._document.createElement("canvas");

              canvas.height = canvas.width = DEFAULT_FONT_SIZE;
              canvas.mozOpaque = true;
              this._layoutTextCtx = canvas.getContext("2d", {
                alpha: false
              });

              if (this._textContent) {
                var textItems = this._textContent.items;
                var textStyles = this._textContent.styles;

                this._processItems(textItems, textStyles);

                capability.resolve();
              } else if (this._textContentStream) {
                var pump = function pump() {
                  _this46._reader.read().then(function (_ref58) {
                    var value = _ref58.value,
                        done = _ref58.done;

                    if (done) {
                      capability.resolve();
                      return;
                    }

                    Object.assign(styleCache, value.styles);

                    _this46._processItems(value.items, styleCache);

                    pump();
                  }, capability.reject);
                };

                this._reader = this._textContentStream.getReader();
                pump();
              } else {
                throw new Error('Neither "textContent" nor "textContentStream"' + " parameters specified.");
              }

              capability.promise.then(function () {
                styleCache = null;

                if (!timeout) {
                  render(_this46);
                } else {
                  _this46._renderTimer = setTimeout(function () {
                    render(_this46);
                    _this46._renderTimer = null;
                  }, timeout);
                }
              }, this._capability.reject);
            }
          }, {
            key: "expandTextDivs",
            value: function expandTextDivs() {
              var expandDivs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

              if (!this._enhanceTextSelection || !this._renderingDone) {
                return;
              }

              if (this._bounds !== null) {
                expand(this);
                this._bounds = null;
              }

              var transformBuf = [],
                  paddingBuf = [];

              for (var i = 0, ii = this._textDivs.length; i < ii; i++) {
                var div = this._textDivs[i];

                var divProps = this._textDivProperties.get(div);

                if (!divProps.hasText) {
                  continue;
                }

                if (expandDivs) {
                  transformBuf.length = 0;
                  paddingBuf.length = 0;

                  if (divProps.originalTransform) {
                    transformBuf.push(divProps.originalTransform);
                  }

                  if (divProps.paddingTop > 0) {
                    paddingBuf.push("".concat(divProps.paddingTop, "px"));
                    transformBuf.push("translateY(".concat(-divProps.paddingTop, "px)"));
                  } else {
                    paddingBuf.push(0);
                  }

                  if (divProps.paddingRight > 0) {
                    paddingBuf.push("".concat(divProps.paddingRight / divProps.scale, "px"));
                  } else {
                    paddingBuf.push(0);
                  }

                  if (divProps.paddingBottom > 0) {
                    paddingBuf.push("".concat(divProps.paddingBottom, "px"));
                  } else {
                    paddingBuf.push(0);
                  }

                  if (divProps.paddingLeft > 0) {
                    paddingBuf.push("".concat(divProps.paddingLeft / divProps.scale, "px"));
                    transformBuf.push("translateX(".concat(-divProps.paddingLeft / divProps.scale, "px)"));
                  } else {
                    paddingBuf.push(0);
                  }

                  div.style.padding = paddingBuf.join(" ");

                  if (transformBuf.length) {
                    div.style.transform = transformBuf.join(" ");
                  }
                } else {
                  div.style.padding = null;
                  div.style.transform = divProps.originalTransform;
                }
              }
            }
          }, {
            key: "promise",
            get: function get() {
              return this._capability.promise;
            }
          }]);

          return TextLayerRenderTask;
        }();

        function renderTextLayer(renderParameters) {
          var task = new TextLayerRenderTask({
            textContent: renderParameters.textContent,
            textContentStream: renderParameters.textContentStream,
            container: renderParameters.container,
            viewport: renderParameters.viewport,
            textDivs: renderParameters.textDivs,
            textContentItemsStr: renderParameters.textContentItemsStr,
            enhanceTextSelection: renderParameters.enhanceTextSelection
          });

          task._render(renderParameters.timeout);

          return task;
        }
        /***/

      },
      /* 20 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SVGGraphics = void 0;

        var _util = __w_pdfjs_require__(2);

        var _display_utils = __w_pdfjs_require__(1);

        var _is_node = __w_pdfjs_require__(4);

        var SVGGraphics = function SVGGraphics() {
          _classCallCheck(this, SVGGraphics);

          (0, _util.unreachable)("Not implemented: SVGGraphics");
        };

        exports.SVGGraphics = SVGGraphics;
        {
          var opListToTree = function opListToTree(opList) {
            var opTree = [];
            var tmp = [];
            var _iteratorNormalCompletion58 = true;
            var _didIteratorError58 = false;
            var _iteratorError58 = undefined;

            try {
              for (var _iterator58 = opList[Symbol.iterator](), _step58; !(_iteratorNormalCompletion58 = (_step58 = _iterator58.next()).done); _iteratorNormalCompletion58 = true) {
                var opListElement = _step58.value;

                if (opListElement.fn === "save") {
                  opTree.push({
                    fnId: 92,
                    fn: "group",
                    items: []
                  });
                  tmp.push(opTree);
                  opTree = opTree[opTree.length - 1].items;
                  continue;
                }

                if (opListElement.fn === "restore") {
                  opTree = tmp.pop();
                } else {
                  opTree.push(opListElement);
                }
              }
            } catch (err) {
              _didIteratorError58 = true;
              _iteratorError58 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion58 && _iterator58["return"] != null) {
                  _iterator58["return"]();
                }
              } finally {
                if (_didIteratorError58) {
                  throw _iteratorError58;
                }
              }
            }

            return opTree;
          };

          var pf = function pf(value) {
            if (Number.isInteger(value)) {
              return value.toString();
            }

            var s = value.toFixed(10);
            var i = s.length - 1;

            if (s[i] !== "0") {
              return s;
            }

            do {
              i--;
            } while (s[i] === "0");

            return s.substring(0, s[i] === "." ? i : i + 1);
          };

          var pm = function pm(m) {
            if (m[4] === 0 && m[5] === 0) {
              if (m[1] === 0 && m[2] === 0) {
                if (m[0] === 1 && m[3] === 1) {
                  return "";
                }

                return "scale(".concat(pf(m[0]), " ").concat(pf(m[3]), ")");
              }

              if (m[0] === m[3] && m[1] === -m[2]) {
                var a = Math.acos(m[0]) * 180 / Math.PI;
                return "rotate(".concat(pf(a), ")");
              }
            } else {
              if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {
                return "translate(".concat(pf(m[4]), " ").concat(pf(m[5]), ")");
              }
            }

            return "matrix(".concat(pf(m[0]), " ").concat(pf(m[1]), " ").concat(pf(m[2]), " ").concat(pf(m[3]), " ").concat(pf(m[4]), " ") + "".concat(pf(m[5]), ")");
          };

          var SVG_DEFAULTS = {
            fontStyle: "normal",
            fontWeight: "normal",
            fillColor: "#000000"
          };
          var XML_NS = "http://www.w3.org/XML/1998/namespace";
          var XLINK_NS = "http://www.w3.org/1999/xlink";
          var LINE_CAP_STYLES = ["butt", "round", "square"];
          var LINE_JOIN_STYLES = ["miter", "round", "bevel"];

          var convertImgDataToPng = function () {
            var PNG_HEADER = new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]);
            var CHUNK_WRAPPER_SIZE = 12;
            var crcTable = new Int32Array(256);

            for (var i = 0; i < 256; i++) {
              var c = i;

              for (var h = 0; h < 8; h++) {
                if (c & 1) {
                  c = 0xedb88320 ^ c >> 1 & 0x7fffffff;
                } else {
                  c = c >> 1 & 0x7fffffff;
                }
              }

              crcTable[i] = c;
            }

            function crc32(data, start, end) {
              var crc = -1;

              for (var _i12 = start; _i12 < end; _i12++) {
                var a = (crc ^ data[_i12]) & 0xff;
                var b = crcTable[a];
                crc = crc >>> 8 ^ b;
              }

              return crc ^ -1;
            }

            function writePngChunk(type, body, data, offset) {
              var p = offset;
              var len = body.length;
              data[p] = len >> 24 & 0xff;
              data[p + 1] = len >> 16 & 0xff;
              data[p + 2] = len >> 8 & 0xff;
              data[p + 3] = len & 0xff;
              p += 4;
              data[p] = type.charCodeAt(0) & 0xff;
              data[p + 1] = type.charCodeAt(1) & 0xff;
              data[p + 2] = type.charCodeAt(2) & 0xff;
              data[p + 3] = type.charCodeAt(3) & 0xff;
              p += 4;
              data.set(body, p);
              p += body.length;
              var crc = crc32(data, offset + 4, p);
              data[p] = crc >> 24 & 0xff;
              data[p + 1] = crc >> 16 & 0xff;
              data[p + 2] = crc >> 8 & 0xff;
              data[p + 3] = crc & 0xff;
            }

            function adler32(data, start, end) {
              var a = 1;
              var b = 0;

              for (var _i13 = start; _i13 < end; ++_i13) {
                a = (a + (data[_i13] & 0xff)) % 65521;
                b = (b + a) % 65521;
              }

              return b << 16 | a;
            }

            function deflateSync(literals) {
              if (!_is_node.isNodeJS) {
                return deflateSyncUncompressed(literals);
              }

              try {
                var input;

                if (parseInt(process.versions.node) >= 8) {
                  input = literals;
                } else {
                  input = Buffer.from(literals);
                }

                var output = __webpack_require__(176).deflateSync(input, {
                  level: 9
                });

                return output instanceof Uint8Array ? output : new Uint8Array(output);
              } catch (e) {
                (0, _util.warn)("Not compressing PNG because zlib.deflateSync is unavailable: " + e);
              }

              return deflateSyncUncompressed(literals);
            }

            function deflateSyncUncompressed(literals) {
              var len = literals.length;
              var maxBlockLength = 0xffff;
              var deflateBlocks = Math.ceil(len / maxBlockLength);
              var idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);
              var pi = 0;
              idat[pi++] = 0x78;
              idat[pi++] = 0x9c;
              var pos = 0;

              while (len > maxBlockLength) {
                idat[pi++] = 0x00;
                idat[pi++] = 0xff;
                idat[pi++] = 0xff;
                idat[pi++] = 0x00;
                idat[pi++] = 0x00;
                idat.set(literals.subarray(pos, pos + maxBlockLength), pi);
                pi += maxBlockLength;
                pos += maxBlockLength;
                len -= maxBlockLength;
              }

              idat[pi++] = 0x01;
              idat[pi++] = len & 0xff;
              idat[pi++] = len >> 8 & 0xff;
              idat[pi++] = ~len & 0xffff & 0xff;
              idat[pi++] = (~len & 0xffff) >> 8 & 0xff;
              idat.set(literals.subarray(pos), pi);
              pi += literals.length - pos;
              var adler = adler32(literals, 0, literals.length);
              idat[pi++] = adler >> 24 & 0xff;
              idat[pi++] = adler >> 16 & 0xff;
              idat[pi++] = adler >> 8 & 0xff;
              idat[pi++] = adler & 0xff;
              return idat;
            }

            function encode(imgData, kind, forceDataSchema, isMask) {
              var width = imgData.width;
              var height = imgData.height;
              var bitDepth, colorType, lineSize;
              var bytes = imgData.data;

              switch (kind) {
                case _util.ImageKind.GRAYSCALE_1BPP:
                  colorType = 0;
                  bitDepth = 1;
                  lineSize = width + 7 >> 3;
                  break;

                case _util.ImageKind.RGB_24BPP:
                  colorType = 2;
                  bitDepth = 8;
                  lineSize = width * 3;
                  break;

                case _util.ImageKind.RGBA_32BPP:
                  colorType = 6;
                  bitDepth = 8;
                  lineSize = width * 4;
                  break;

                default:
                  throw new Error("invalid format");
              }

              var literals = new Uint8Array((1 + lineSize) * height);
              var offsetLiterals = 0,
                  offsetBytes = 0;

              for (var y = 0; y < height; ++y) {
                literals[offsetLiterals++] = 0;
                literals.set(bytes.subarray(offsetBytes, offsetBytes + lineSize), offsetLiterals);
                offsetBytes += lineSize;
                offsetLiterals += lineSize;
              }

              if (kind === _util.ImageKind.GRAYSCALE_1BPP && isMask) {
                offsetLiterals = 0;

                for (var _y = 0; _y < height; _y++) {
                  offsetLiterals++;

                  for (var _i14 = 0; _i14 < lineSize; _i14++) {
                    literals[offsetLiterals++] ^= 0xff;
                  }
                }
              }

              var ihdr = new Uint8Array([width >> 24 & 0xff, width >> 16 & 0xff, width >> 8 & 0xff, width & 0xff, height >> 24 & 0xff, height >> 16 & 0xff, height >> 8 & 0xff, height & 0xff, bitDepth, colorType, 0x00, 0x00, 0x00]);
              var idat = deflateSync(literals);
              var pngLength = PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;
              var data = new Uint8Array(pngLength);
              var offset = 0;
              data.set(PNG_HEADER, offset);
              offset += PNG_HEADER.length;
              writePngChunk("IHDR", ihdr, data, offset);
              offset += CHUNK_WRAPPER_SIZE + ihdr.length;
              writePngChunk("IDATA", idat, data, offset);
              offset += CHUNK_WRAPPER_SIZE + idat.length;
              writePngChunk("IEND", new Uint8Array(0), data, offset);
              return (0, _util.createObjectURL)(data, "image/png", forceDataSchema);
            }

            return function convertImgDataToPng(imgData, forceDataSchema, isMask) {
              var kind = imgData.kind === undefined ? _util.ImageKind.GRAYSCALE_1BPP : imgData.kind;
              return encode(imgData, kind, forceDataSchema, isMask);
            };
          }();

          var SVGExtraState =
          /*#__PURE__*/
          function () {
            function SVGExtraState() {
              _classCallCheck(this, SVGExtraState);

              this.fontSizeScale = 1;
              this.fontWeight = SVG_DEFAULTS.fontWeight;
              this.fontSize = 0;
              this.textMatrix = _util.IDENTITY_MATRIX;
              this.fontMatrix = _util.FONT_IDENTITY_MATRIX;
              this.leading = 0;
              this.textRenderingMode = _util.TextRenderingMode.FILL;
              this.textMatrixScale = 1;
              this.x = 0;
              this.y = 0;
              this.lineX = 0;
              this.lineY = 0;
              this.charSpacing = 0;
              this.wordSpacing = 0;
              this.textHScale = 1;
              this.textRise = 0;
              this.fillColor = SVG_DEFAULTS.fillColor;
              this.strokeColor = "#000000";
              this.fillAlpha = 1;
              this.strokeAlpha = 1;
              this.lineWidth = 1;
              this.lineJoin = "";
              this.lineCap = "";
              this.miterLimit = 0;
              this.dashArray = [];
              this.dashPhase = 0;
              this.dependencies = [];
              this.activeClipUrl = null;
              this.clipGroup = null;
              this.maskId = "";
            }

            _createClass(SVGExtraState, [{
              key: "clone",
              value: function clone() {
                return Object.create(this);
              }
            }, {
              key: "setCurrentPoint",
              value: function setCurrentPoint(x, y) {
                this.x = x;
                this.y = y;
              }
            }]);

            return SVGExtraState;
          }();

          var clipCount = 0;
          var maskCount = 0;
          var shadingCount = 0;

          exports.SVGGraphics = SVGGraphics =
          /*#__PURE__*/
          function () {
            function SVGGraphics(commonObjs, objs) {
              var forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

              _classCallCheck(this, SVGGraphics);

              this.svgFactory = new _display_utils.DOMSVGFactory();
              this.current = new SVGExtraState();
              this.transformMatrix = _util.IDENTITY_MATRIX;
              this.transformStack = [];
              this.extraStack = [];
              this.commonObjs = commonObjs;
              this.objs = objs;
              this.pendingClip = null;
              this.pendingEOFill = false;
              this.embedFonts = false;
              this.embeddedFonts = Object.create(null);
              this.cssStyle = null;
              this.forceDataSchema = !!forceDataSchema;
              this._operatorIdMapping = [];

              for (var op in _util.OPS) {
                this._operatorIdMapping[_util.OPS[op]] = op;
              }
            }

            _createClass(SVGGraphics, [{
              key: "save",
              value: function save() {
                this.transformStack.push(this.transformMatrix);
                var old = this.current;
                this.extraStack.push(old);
                this.current = old.clone();
              }
            }, {
              key: "restore",
              value: function restore() {
                this.transformMatrix = this.transformStack.pop();
                this.current = this.extraStack.pop();
                this.pendingClip = null;
                this.tgrp = null;
              }
            }, {
              key: "group",
              value: function group(items) {
                this.save();
                this.executeOpTree(items);
                this.restore();
              }
            }, {
              key: "loadDependencies",
              value: function loadDependencies(operatorList) {
                var _this47 = this;

                var fnArray = operatorList.fnArray;
                var argsArray = operatorList.argsArray;

                for (var i = 0, ii = fnArray.length; i < ii; i++) {
                  if (fnArray[i] !== _util.OPS.dependency) {
                    continue;
                  }

                  var _iteratorNormalCompletion59 = true;
                  var _didIteratorError59 = false;
                  var _iteratorError59 = undefined;

                  try {
                    var _loop2 = function _loop2() {
                      var obj = _step59.value;
                      var objsPool = obj.startsWith("g_") ? _this47.commonObjs : _this47.objs;
                      var promise = new Promise(function (resolve) {
                        objsPool.get(obj, resolve);
                      });

                      _this47.current.dependencies.push(promise);
                    };

                    for (var _iterator59 = argsArray[i][Symbol.iterator](), _step59; !(_iteratorNormalCompletion59 = (_step59 = _iterator59.next()).done); _iteratorNormalCompletion59 = true) {
                      _loop2();
                    }
                  } catch (err) {
                    _didIteratorError59 = true;
                    _iteratorError59 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion59 && _iterator59["return"] != null) {
                        _iterator59["return"]();
                      }
                    } finally {
                      if (_didIteratorError59) {
                        throw _iteratorError59;
                      }
                    }
                  }
                }

                return Promise.all(this.current.dependencies);
              }
            }, {
              key: "transform",
              value: function transform(a, b, c, d, e, f) {
                var transformMatrix = [a, b, c, d, e, f];
                this.transformMatrix = _util.Util.transform(this.transformMatrix, transformMatrix);
                this.tgrp = null;
              }
            }, {
              key: "getSVG",
              value: function getSVG(operatorList, viewport) {
                var _this48 = this;

                this.viewport = viewport;

                var svgElement = this._initialize(viewport);

                return this.loadDependencies(operatorList).then(function () {
                  _this48.transformMatrix = _util.IDENTITY_MATRIX;

                  _this48.executeOpTree(_this48.convertOpList(operatorList));

                  return svgElement;
                });
              }
            }, {
              key: "convertOpList",
              value: function convertOpList(operatorList) {
                var operatorIdMapping = this._operatorIdMapping;
                var argsArray = operatorList.argsArray;
                var fnArray = operatorList.fnArray;
                var opList = [];

                for (var i = 0, ii = fnArray.length; i < ii; i++) {
                  var fnId = fnArray[i];
                  opList.push({
                    fnId: fnId,
                    fn: operatorIdMapping[fnId],
                    args: argsArray[i]
                  });
                }

                return opListToTree(opList);
              }
            }, {
              key: "executeOpTree",
              value: function executeOpTree(opTree) {
                var _iteratorNormalCompletion60 = true;
                var _didIteratorError60 = false;
                var _iteratorError60 = undefined;

                try {
                  for (var _iterator60 = opTree[Symbol.iterator](), _step60; !(_iteratorNormalCompletion60 = (_step60 = _iterator60.next()).done); _iteratorNormalCompletion60 = true) {
                    var opTreeElement = _step60.value;
                    var fn = opTreeElement.fn;
                    var fnId = opTreeElement.fnId;
                    var args = opTreeElement.args;

                    switch (fnId | 0) {
                      case _util.OPS.beginText:
                        this.beginText();
                        break;

                      case _util.OPS.dependency:
                        break;

                      case _util.OPS.setLeading:
                        this.setLeading(args);
                        break;

                      case _util.OPS.setLeadingMoveText:
                        this.setLeadingMoveText(args[0], args[1]);
                        break;

                      case _util.OPS.setFont:
                        this.setFont(args);
                        break;

                      case _util.OPS.showText:
                        this.showText(args[0]);
                        break;

                      case _util.OPS.showSpacedText:
                        this.showText(args[0]);
                        break;

                      case _util.OPS.endText:
                        this.endText();
                        break;

                      case _util.OPS.moveText:
                        this.moveText(args[0], args[1]);
                        break;

                      case _util.OPS.setCharSpacing:
                        this.setCharSpacing(args[0]);
                        break;

                      case _util.OPS.setWordSpacing:
                        this.setWordSpacing(args[0]);
                        break;

                      case _util.OPS.setHScale:
                        this.setHScale(args[0]);
                        break;

                      case _util.OPS.setTextMatrix:
                        this.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);
                        break;

                      case _util.OPS.setTextRise:
                        this.setTextRise(args[0]);
                        break;

                      case _util.OPS.setTextRenderingMode:
                        this.setTextRenderingMode(args[0]);
                        break;

                      case _util.OPS.setLineWidth:
                        this.setLineWidth(args[0]);
                        break;

                      case _util.OPS.setLineJoin:
                        this.setLineJoin(args[0]);
                        break;

                      case _util.OPS.setLineCap:
                        this.setLineCap(args[0]);
                        break;

                      case _util.OPS.setMiterLimit:
                        this.setMiterLimit(args[0]);
                        break;

                      case _util.OPS.setFillRGBColor:
                        this.setFillRGBColor(args[0], args[1], args[2]);
                        break;

                      case _util.OPS.setStrokeRGBColor:
                        this.setStrokeRGBColor(args[0], args[1], args[2]);
                        break;

                      case _util.OPS.setStrokeColorN:
                        this.setStrokeColorN(args);
                        break;

                      case _util.OPS.setFillColorN:
                        this.setFillColorN(args);
                        break;

                      case _util.OPS.shadingFill:
                        this.shadingFill(args[0]);
                        break;

                      case _util.OPS.setDash:
                        this.setDash(args[0], args[1]);
                        break;

                      case _util.OPS.setRenderingIntent:
                        this.setRenderingIntent(args[0]);
                        break;

                      case _util.OPS.setFlatness:
                        this.setFlatness(args[0]);
                        break;

                      case _util.OPS.setGState:
                        this.setGState(args[0]);
                        break;

                      case _util.OPS.fill:
                        this.fill();
                        break;

                      case _util.OPS.eoFill:
                        this.eoFill();
                        break;

                      case _util.OPS.stroke:
                        this.stroke();
                        break;

                      case _util.OPS.fillStroke:
                        this.fillStroke();
                        break;

                      case _util.OPS.eoFillStroke:
                        this.eoFillStroke();
                        break;

                      case _util.OPS.clip:
                        this.clip("nonzero");
                        break;

                      case _util.OPS.eoClip:
                        this.clip("evenodd");
                        break;

                      case _util.OPS.paintSolidColorImageMask:
                        this.paintSolidColorImageMask();
                        break;

                      case _util.OPS.paintImageXObject:
                        this.paintImageXObject(args[0]);
                        break;

                      case _util.OPS.paintInlineImageXObject:
                        this.paintInlineImageXObject(args[0]);
                        break;

                      case _util.OPS.paintImageMaskXObject:
                        this.paintImageMaskXObject(args[0]);
                        break;

                      case _util.OPS.paintFormXObjectBegin:
                        this.paintFormXObjectBegin(args[0], args[1]);
                        break;

                      case _util.OPS.paintFormXObjectEnd:
                        this.paintFormXObjectEnd();
                        break;

                      case _util.OPS.closePath:
                        this.closePath();
                        break;

                      case _util.OPS.closeStroke:
                        this.closeStroke();
                        break;

                      case _util.OPS.closeFillStroke:
                        this.closeFillStroke();
                        break;

                      case _util.OPS.closeEOFillStroke:
                        this.closeEOFillStroke();
                        break;

                      case _util.OPS.nextLine:
                        this.nextLine();
                        break;

                      case _util.OPS.transform:
                        this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);
                        break;

                      case _util.OPS.constructPath:
                        this.constructPath(args[0], args[1]);
                        break;

                      case _util.OPS.endPath:
                        this.endPath();
                        break;

                      case 92:
                        this.group(opTreeElement.items);
                        break;

                      default:
                        (0, _util.warn)("Unimplemented operator ".concat(fn));
                        break;
                    }
                  }
                } catch (err) {
                  _didIteratorError60 = true;
                  _iteratorError60 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion60 && _iterator60["return"] != null) {
                      _iterator60["return"]();
                    }
                  } finally {
                    if (_didIteratorError60) {
                      throw _iteratorError60;
                    }
                  }
                }
              }
            }, {
              key: "setWordSpacing",
              value: function setWordSpacing(wordSpacing) {
                this.current.wordSpacing = wordSpacing;
              }
            }, {
              key: "setCharSpacing",
              value: function setCharSpacing(charSpacing) {
                this.current.charSpacing = charSpacing;
              }
            }, {
              key: "nextLine",
              value: function nextLine() {
                this.moveText(0, this.current.leading);
              }
            }, {
              key: "setTextMatrix",
              value: function setTextMatrix(a, b, c, d, e, f) {
                var current = this.current;
                current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];
                current.textMatrixScale = Math.hypot(a, b);
                current.x = current.lineX = 0;
                current.y = current.lineY = 0;
                current.xcoords = [];
                current.ycoords = [];
                current.tspan = this.svgFactory.createElement("svg:tspan");
                current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
                current.tspan.setAttributeNS(null, "font-size", "".concat(pf(current.fontSize), "px"));
                current.tspan.setAttributeNS(null, "y", pf(-current.y));
                current.txtElement = this.svgFactory.createElement("svg:text");
                current.txtElement.appendChild(current.tspan);
              }
            }, {
              key: "beginText",
              value: function beginText() {
                var current = this.current;
                current.x = current.lineX = 0;
                current.y = current.lineY = 0;
                current.textMatrix = _util.IDENTITY_MATRIX;
                current.lineMatrix = _util.IDENTITY_MATRIX;
                current.textMatrixScale = 1;
                current.tspan = this.svgFactory.createElement("svg:tspan");
                current.txtElement = this.svgFactory.createElement("svg:text");
                current.txtgrp = this.svgFactory.createElement("svg:g");
                current.xcoords = [];
                current.ycoords = [];
              }
            }, {
              key: "moveText",
              value: function moveText(x, y) {
                var current = this.current;
                current.x = current.lineX += x;
                current.y = current.lineY += y;
                current.xcoords = [];
                current.ycoords = [];
                current.tspan = this.svgFactory.createElement("svg:tspan");
                current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
                current.tspan.setAttributeNS(null, "font-size", "".concat(pf(current.fontSize), "px"));
                current.tspan.setAttributeNS(null, "y", pf(-current.y));
              }
            }, {
              key: "showText",
              value: function showText(glyphs) {
                var current = this.current;
                var font = current.font;
                var fontSize = current.fontSize;

                if (fontSize === 0) {
                  return;
                }

                var fontSizeScale = current.fontSizeScale;
                var charSpacing = current.charSpacing;
                var wordSpacing = current.wordSpacing;
                var fontDirection = current.fontDirection;
                var textHScale = current.textHScale * fontDirection;
                var vertical = font.vertical;
                var spacingDir = vertical ? 1 : -1;
                var defaultVMetrics = font.defaultVMetrics;
                var widthAdvanceScale = fontSize * current.fontMatrix[0];
                var x = 0;
                var _iteratorNormalCompletion61 = true;
                var _didIteratorError61 = false;
                var _iteratorError61 = undefined;

                try {
                  for (var _iterator61 = glyphs[Symbol.iterator](), _step61; !(_iteratorNormalCompletion61 = (_step61 = _iterator61.next()).done); _iteratorNormalCompletion61 = true) {
                    var glyph = _step61.value;

                    if (glyph === null) {
                      x += fontDirection * wordSpacing;
                      continue;
                    } else if ((0, _util.isNum)(glyph)) {
                      x += spacingDir * glyph * fontSize / 1000;
                      continue;
                    }

                    var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
                    var character = glyph.fontChar;
                    var scaledX = void 0,
                        scaledY = void 0;
                    var width = glyph.width;

                    if (vertical) {
                      var vx = void 0;
                      var vmetric = glyph.vmetric || defaultVMetrics;
                      vx = glyph.vmetric ? vmetric[1] : width * 0.5;
                      vx = -vx * widthAdvanceScale;
                      var vy = vmetric[2] * widthAdvanceScale;
                      width = vmetric ? -vmetric[0] : width;
                      scaledX = vx / fontSizeScale;
                      scaledY = (x + vy) / fontSizeScale;
                    } else {
                      scaledX = x / fontSizeScale;
                      scaledY = 0;
                    }

                    if (glyph.isInFont || font.missingFile) {
                      current.xcoords.push(current.x + scaledX);

                      if (vertical) {
                        current.ycoords.push(-current.y + scaledY);
                      }

                      current.tspan.textContent += character;
                    } else {}

                    var charWidth = void 0;

                    if (vertical) {
                      charWidth = width * widthAdvanceScale - spacing * fontDirection;
                    } else {
                      charWidth = width * widthAdvanceScale + spacing * fontDirection;
                    }

                    x += charWidth;
                  }
                } catch (err) {
                  _didIteratorError61 = true;
                  _iteratorError61 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion61 && _iterator61["return"] != null) {
                      _iterator61["return"]();
                    }
                  } finally {
                    if (_didIteratorError61) {
                      throw _iteratorError61;
                    }
                  }
                }

                current.tspan.setAttributeNS(null, "x", current.xcoords.map(pf).join(" "));

                if (vertical) {
                  current.tspan.setAttributeNS(null, "y", current.ycoords.map(pf).join(" "));
                } else {
                  current.tspan.setAttributeNS(null, "y", pf(-current.y));
                }

                if (vertical) {
                  current.y -= x;
                } else {
                  current.x += x * textHScale;
                }

                current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
                current.tspan.setAttributeNS(null, "font-size", "".concat(pf(current.fontSize), "px"));

                if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {
                  current.tspan.setAttributeNS(null, "font-style", current.fontStyle);
                }

                if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {
                  current.tspan.setAttributeNS(null, "font-weight", current.fontWeight);
                }

                var fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;

                if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                  if (current.fillColor !== SVG_DEFAULTS.fillColor) {
                    current.tspan.setAttributeNS(null, "fill", current.fillColor);
                  }

                  if (current.fillAlpha < 1) {
                    current.tspan.setAttributeNS(null, "fill-opacity", current.fillAlpha);
                  }
                } else if (current.textRenderingMode === _util.TextRenderingMode.ADD_TO_PATH) {
                  current.tspan.setAttributeNS(null, "fill", "transparent");
                } else {
                  current.tspan.setAttributeNS(null, "fill", "none");
                }

                if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                  var lineWidthScale = 1 / (current.textMatrixScale || 1);

                  this._setStrokeAttributes(current.tspan, lineWidthScale);
                }

                var textMatrix = current.textMatrix;

                if (current.textRise !== 0) {
                  textMatrix = textMatrix.slice();
                  textMatrix[5] += current.textRise;
                }

                current.txtElement.setAttributeNS(null, "transform", "".concat(pm(textMatrix), " scale(").concat(pf(textHScale), ", -1)"));
                current.txtElement.setAttributeNS(XML_NS, "xml:space", "preserve");
                current.txtElement.appendChild(current.tspan);
                current.txtgrp.appendChild(current.txtElement);

                this._ensureTransformGroup().appendChild(current.txtElement);
              }
            }, {
              key: "setLeadingMoveText",
              value: function setLeadingMoveText(x, y) {
                this.setLeading(-y);
                this.moveText(x, y);
              }
            }, {
              key: "addFontStyle",
              value: function addFontStyle(fontObj) {
                if (!fontObj.data) {
                  throw new Error("addFontStyle: No font data available, " + 'ensure that the "fontExtraProperties" API parameter is set.');
                }

                if (!this.cssStyle) {
                  this.cssStyle = this.svgFactory.createElement("svg:style");
                  this.cssStyle.setAttributeNS(null, "type", "text/css");
                  this.defs.appendChild(this.cssStyle);
                }

                var url = (0, _util.createObjectURL)(fontObj.data, fontObj.mimetype, this.forceDataSchema);
                this.cssStyle.textContent += "@font-face { font-family: \"".concat(fontObj.loadedName, "\";") + " src: url(".concat(url, "); }\n");
              }
            }, {
              key: "setFont",
              value: function setFont(details) {
                var current = this.current;
                var fontObj = this.commonObjs.get(details[0]);
                var size = details[1];
                current.font = fontObj;

                if (this.embedFonts && !fontObj.missingFile && !this.embeddedFonts[fontObj.loadedName]) {
                  this.addFontStyle(fontObj);
                  this.embeddedFonts[fontObj.loadedName] = fontObj;
                }

                current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;
                var bold = "normal";

                if (fontObj.black) {
                  bold = "900";
                } else if (fontObj.bold) {
                  bold = "bold";
                }

                var italic = fontObj.italic ? "italic" : "normal";

                if (size < 0) {
                  size = -size;
                  current.fontDirection = -1;
                } else {
                  current.fontDirection = 1;
                }

                current.fontSize = size;
                current.fontFamily = fontObj.loadedName;
                current.fontWeight = bold;
                current.fontStyle = italic;
                current.tspan = this.svgFactory.createElement("svg:tspan");
                current.tspan.setAttributeNS(null, "y", pf(-current.y));
                current.xcoords = [];
                current.ycoords = [];
              }
            }, {
              key: "endText",
              value: function endText() {
                var _current$txtElement;

                var current = this.current;

                if (current.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG && (_current$txtElement = current.txtElement) !== null && _current$txtElement !== void 0 && _current$txtElement.hasChildNodes()) {
                  current.element = current.txtElement;
                  this.clip("nonzero");
                  this.endPath();
                }
              }
            }, {
              key: "setLineWidth",
              value: function setLineWidth(width) {
                if (width > 0) {
                  this.current.lineWidth = width;
                }
              }
            }, {
              key: "setLineCap",
              value: function setLineCap(style) {
                this.current.lineCap = LINE_CAP_STYLES[style];
              }
            }, {
              key: "setLineJoin",
              value: function setLineJoin(style) {
                this.current.lineJoin = LINE_JOIN_STYLES[style];
              }
            }, {
              key: "setMiterLimit",
              value: function setMiterLimit(limit) {
                this.current.miterLimit = limit;
              }
            }, {
              key: "setStrokeAlpha",
              value: function setStrokeAlpha(strokeAlpha) {
                this.current.strokeAlpha = strokeAlpha;
              }
            }, {
              key: "setStrokeRGBColor",
              value: function setStrokeRGBColor(r, g, b) {
                this.current.strokeColor = _util.Util.makeHexColor(r, g, b);
              }
            }, {
              key: "setFillAlpha",
              value: function setFillAlpha(fillAlpha) {
                this.current.fillAlpha = fillAlpha;
              }
            }, {
              key: "setFillRGBColor",
              value: function setFillRGBColor(r, g, b) {
                this.current.fillColor = _util.Util.makeHexColor(r, g, b);
                this.current.tspan = this.svgFactory.createElement("svg:tspan");
                this.current.xcoords = [];
                this.current.ycoords = [];
              }
            }, {
              key: "setStrokeColorN",
              value: function setStrokeColorN(args) {
                this.current.strokeColor = this._makeColorN_Pattern(args);
              }
            }, {
              key: "setFillColorN",
              value: function setFillColorN(args) {
                this.current.fillColor = this._makeColorN_Pattern(args);
              }
            }, {
              key: "shadingFill",
              value: function shadingFill(args) {
                var width = this.viewport.width;
                var height = this.viewport.height;

                var inv = _util.Util.inverseTransform(this.transformMatrix);

                var bl = _util.Util.applyTransform([0, 0], inv);

                var br = _util.Util.applyTransform([0, height], inv);

                var ul = _util.Util.applyTransform([width, 0], inv);

                var ur = _util.Util.applyTransform([width, height], inv);

                var x0 = Math.min(bl[0], br[0], ul[0], ur[0]);
                var y0 = Math.min(bl[1], br[1], ul[1], ur[1]);
                var x1 = Math.max(bl[0], br[0], ul[0], ur[0]);
                var y1 = Math.max(bl[1], br[1], ul[1], ur[1]);
                var rect = this.svgFactory.createElement("svg:rect");
                rect.setAttributeNS(null, "x", x0);
                rect.setAttributeNS(null, "y", y0);
                rect.setAttributeNS(null, "width", x1 - x0);
                rect.setAttributeNS(null, "height", y1 - y0);
                rect.setAttributeNS(null, "fill", this._makeShadingPattern(args));

                if (this.current.fillAlpha < 1) {
                  rect.setAttributeNS(null, "fill-opacity", this.current.fillAlpha);
                }

                this._ensureTransformGroup().appendChild(rect);
              }
            }, {
              key: "_makeColorN_Pattern",
              value: function _makeColorN_Pattern(args) {
                if (args[0] === "TilingPattern") {
                  return this._makeTilingPattern(args);
                }

                return this._makeShadingPattern(args);
              }
            }, {
              key: "_makeTilingPattern",
              value: function _makeTilingPattern(args) {
                var color = args[1];
                var operatorList = args[2];
                var matrix = args[3] || _util.IDENTITY_MATRIX;

                var _args$ = _slicedToArray(args[4], 4),
                    x0 = _args$[0],
                    y0 = _args$[1],
                    x1 = _args$[2],
                    y1 = _args$[3];

                var xstep = args[5];
                var ystep = args[6];
                var paintType = args[7];
                var tilingId = "shading".concat(shadingCount++);

                var _util$Util$normalizeR = _util.Util.normalizeRect([].concat(_toConsumableArray(_util.Util.applyTransform([x0, y0], matrix)), _toConsumableArray(_util.Util.applyTransform([x1, y1], matrix)))),
                    _util$Util$normalizeR2 = _slicedToArray(_util$Util$normalizeR, 4),
                    tx0 = _util$Util$normalizeR2[0],
                    ty0 = _util$Util$normalizeR2[1],
                    tx1 = _util$Util$normalizeR2[2],
                    ty1 = _util$Util$normalizeR2[3];

                var _util$Util$singularVa = _util.Util.singularValueDecompose2dScale(matrix),
                    _util$Util$singularVa2 = _slicedToArray(_util$Util$singularVa, 2),
                    xscale = _util$Util$singularVa2[0],
                    yscale = _util$Util$singularVa2[1];

                var txstep = xstep * xscale;
                var tystep = ystep * yscale;
                var tiling = this.svgFactory.createElement("svg:pattern");
                tiling.setAttributeNS(null, "id", tilingId);
                tiling.setAttributeNS(null, "patternUnits", "userSpaceOnUse");
                tiling.setAttributeNS(null, "width", txstep);
                tiling.setAttributeNS(null, "height", tystep);
                tiling.setAttributeNS(null, "x", "".concat(tx0));
                tiling.setAttributeNS(null, "y", "".concat(ty0));
                var svg = this.svg;
                var transformMatrix = this.transformMatrix;
                var fillColor = this.current.fillColor;
                var strokeColor = this.current.strokeColor;
                var bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);
                this.svg = bbox;
                this.transformMatrix = matrix;

                if (paintType === 2) {
                  var _util$Util;

                  var cssColor = (_util$Util = _util.Util).makeHexColor.apply(_util$Util, _toConsumableArray(color));

                  this.current.fillColor = cssColor;
                  this.current.strokeColor = cssColor;
                }

                this.executeOpTree(this.convertOpList(operatorList));
                this.svg = svg;
                this.transformMatrix = transformMatrix;
                this.current.fillColor = fillColor;
                this.current.strokeColor = strokeColor;
                tiling.appendChild(bbox.childNodes[0]);
                this.defs.appendChild(tiling);
                return "url(#".concat(tilingId, ")");
              }
            }, {
              key: "_makeShadingPattern",
              value: function _makeShadingPattern(args) {
                switch (args[0]) {
                  case "RadialAxial":
                    var shadingId = "shading".concat(shadingCount++);
                    var colorStops = args[3];
                    var gradient;

                    switch (args[1]) {
                      case "axial":
                        var point0 = args[4];
                        var point1 = args[5];
                        gradient = this.svgFactory.createElement("svg:linearGradient");
                        gradient.setAttributeNS(null, "id", shadingId);
                        gradient.setAttributeNS(null, "gradientUnits", "userSpaceOnUse");
                        gradient.setAttributeNS(null, "x1", point0[0]);
                        gradient.setAttributeNS(null, "y1", point0[1]);
                        gradient.setAttributeNS(null, "x2", point1[0]);
                        gradient.setAttributeNS(null, "y2", point1[1]);
                        break;

                      case "radial":
                        var focalPoint = args[4];
                        var circlePoint = args[5];
                        var focalRadius = args[6];
                        var circleRadius = args[7];
                        gradient = this.svgFactory.createElement("svg:radialGradient");
                        gradient.setAttributeNS(null, "id", shadingId);
                        gradient.setAttributeNS(null, "gradientUnits", "userSpaceOnUse");
                        gradient.setAttributeNS(null, "cx", circlePoint[0]);
                        gradient.setAttributeNS(null, "cy", circlePoint[1]);
                        gradient.setAttributeNS(null, "r", circleRadius);
                        gradient.setAttributeNS(null, "fx", focalPoint[0]);
                        gradient.setAttributeNS(null, "fy", focalPoint[1]);
                        gradient.setAttributeNS(null, "fr", focalRadius);
                        break;

                      default:
                        throw new Error("Unknown RadialAxial type: ".concat(args[1]));
                    }

                    var _iteratorNormalCompletion62 = true;
                    var _didIteratorError62 = false;
                    var _iteratorError62 = undefined;

                    try {
                      for (var _iterator62 = colorStops[Symbol.iterator](), _step62; !(_iteratorNormalCompletion62 = (_step62 = _iterator62.next()).done); _iteratorNormalCompletion62 = true) {
                        var colorStop = _step62.value;
                        var stop = this.svgFactory.createElement("svg:stop");
                        stop.setAttributeNS(null, "offset", colorStop[0]);
                        stop.setAttributeNS(null, "stop-color", colorStop[1]);
                        gradient.appendChild(stop);
                      }
                    } catch (err) {
                      _didIteratorError62 = true;
                      _iteratorError62 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion62 && _iterator62["return"] != null) {
                          _iterator62["return"]();
                        }
                      } finally {
                        if (_didIteratorError62) {
                          throw _iteratorError62;
                        }
                      }
                    }

                    this.defs.appendChild(gradient);
                    return "url(#".concat(shadingId, ")");

                  case "Mesh":
                    (0, _util.warn)("Unimplemented pattern Mesh");
                    return null;

                  case "Dummy":
                    return "hotpink";

                  default:
                    throw new Error("Unknown IR type: ".concat(args[0]));
                }
              }
            }, {
              key: "setDash",
              value: function setDash(dashArray, dashPhase) {
                this.current.dashArray = dashArray;
                this.current.dashPhase = dashPhase;
              }
            }, {
              key: "constructPath",
              value: function constructPath(ops, args) {
                var current = this.current;
                var x = current.x,
                    y = current.y;
                var d = [];
                var j = 0;
                var _iteratorNormalCompletion63 = true;
                var _didIteratorError63 = false;
                var _iteratorError63 = undefined;

                try {
                  for (var _iterator63 = ops[Symbol.iterator](), _step63; !(_iteratorNormalCompletion63 = (_step63 = _iterator63.next()).done); _iteratorNormalCompletion63 = true) {
                    var op = _step63.value;

                    switch (op | 0) {
                      case _util.OPS.rectangle:
                        x = args[j++];
                        y = args[j++];
                        var width = args[j++];
                        var height = args[j++];
                        var xw = x + width;
                        var yh = y + height;
                        d.push("M", pf(x), pf(y), "L", pf(xw), pf(y), "L", pf(xw), pf(yh), "L", pf(x), pf(yh), "Z");
                        break;

                      case _util.OPS.moveTo:
                        x = args[j++];
                        y = args[j++];
                        d.push("M", pf(x), pf(y));
                        break;

                      case _util.OPS.lineTo:
                        x = args[j++];
                        y = args[j++];
                        d.push("L", pf(x), pf(y));
                        break;

                      case _util.OPS.curveTo:
                        x = args[j + 4];
                        y = args[j + 5];
                        d.push("C", pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]), pf(x), pf(y));
                        j += 6;
                        break;

                      case _util.OPS.curveTo2:
                        d.push("C", pf(x), pf(y), pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]));
                        x = args[j + 2];
                        y = args[j + 3];
                        j += 4;
                        break;

                      case _util.OPS.curveTo3:
                        x = args[j + 2];
                        y = args[j + 3];
                        d.push("C", pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));
                        j += 4;
                        break;

                      case _util.OPS.closePath:
                        d.push("Z");
                        break;
                    }
                  }
                } catch (err) {
                  _didIteratorError63 = true;
                  _iteratorError63 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion63 && _iterator63["return"] != null) {
                      _iterator63["return"]();
                    }
                  } finally {
                    if (_didIteratorError63) {
                      throw _iteratorError63;
                    }
                  }
                }

                d = d.join(" ");

                if (current.path && ops.length > 0 && ops[0] !== _util.OPS.rectangle && ops[0] !== _util.OPS.moveTo) {
                  d = current.path.getAttributeNS(null, "d") + d;
                } else {
                  current.path = this.svgFactory.createElement("svg:path");

                  this._ensureTransformGroup().appendChild(current.path);
                }

                current.path.setAttributeNS(null, "d", d);
                current.path.setAttributeNS(null, "fill", "none");
                current.element = current.path;
                current.setCurrentPoint(x, y);
              }
            }, {
              key: "endPath",
              value: function endPath() {
                var current = this.current;
                current.path = null;

                if (!this.pendingClip) {
                  return;
                }

                if (!current.element) {
                  this.pendingClip = null;
                  return;
                }

                var clipId = "clippath".concat(clipCount++);
                var clipPath = this.svgFactory.createElement("svg:clipPath");
                clipPath.setAttributeNS(null, "id", clipId);
                clipPath.setAttributeNS(null, "transform", pm(this.transformMatrix));
                var clipElement = current.element.cloneNode(true);

                if (this.pendingClip === "evenodd") {
                  clipElement.setAttributeNS(null, "clip-rule", "evenodd");
                } else {
                  clipElement.setAttributeNS(null, "clip-rule", "nonzero");
                }

                this.pendingClip = null;
                clipPath.appendChild(clipElement);
                this.defs.appendChild(clipPath);

                if (current.activeClipUrl) {
                  current.clipGroup = null;
                  var _iteratorNormalCompletion64 = true;
                  var _didIteratorError64 = false;
                  var _iteratorError64 = undefined;

                  try {
                    for (var _iterator64 = this.extraStack[Symbol.iterator](), _step64; !(_iteratorNormalCompletion64 = (_step64 = _iterator64.next()).done); _iteratorNormalCompletion64 = true) {
                      var prev = _step64.value;
                      prev.clipGroup = null;
                    }
                  } catch (err) {
                    _didIteratorError64 = true;
                    _iteratorError64 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion64 && _iterator64["return"] != null) {
                        _iterator64["return"]();
                      }
                    } finally {
                      if (_didIteratorError64) {
                        throw _iteratorError64;
                      }
                    }
                  }

                  clipPath.setAttributeNS(null, "clip-path", current.activeClipUrl);
                }

                current.activeClipUrl = "url(#".concat(clipId, ")");
                this.tgrp = null;
              }
            }, {
              key: "clip",
              value: function clip(type) {
                this.pendingClip = type;
              }
            }, {
              key: "closePath",
              value: function closePath() {
                var current = this.current;

                if (current.path) {
                  var d = "".concat(current.path.getAttributeNS(null, "d"), "Z");
                  current.path.setAttributeNS(null, "d", d);
                }
              }
            }, {
              key: "setLeading",
              value: function setLeading(leading) {
                this.current.leading = -leading;
              }
            }, {
              key: "setTextRise",
              value: function setTextRise(textRise) {
                this.current.textRise = textRise;
              }
            }, {
              key: "setTextRenderingMode",
              value: function setTextRenderingMode(textRenderingMode) {
                this.current.textRenderingMode = textRenderingMode;
              }
            }, {
              key: "setHScale",
              value: function setHScale(scale) {
                this.current.textHScale = scale / 100;
              }
            }, {
              key: "setRenderingIntent",
              value: function setRenderingIntent(intent) {}
            }, {
              key: "setFlatness",
              value: function setFlatness(flatness) {}
            }, {
              key: "setGState",
              value: function setGState(states) {
                var _iteratorNormalCompletion65 = true;
                var _didIteratorError65 = false;
                var _iteratorError65 = undefined;

                try {
                  for (var _iterator65 = states[Symbol.iterator](), _step65; !(_iteratorNormalCompletion65 = (_step65 = _iterator65.next()).done); _iteratorNormalCompletion65 = true) {
                    var _step65$value = _slicedToArray(_step65.value, 2),
                        key = _step65$value[0],
                        value = _step65$value[1];

                    switch (key) {
                      case "LW":
                        this.setLineWidth(value);
                        break;

                      case "LC":
                        this.setLineCap(value);
                        break;

                      case "LJ":
                        this.setLineJoin(value);
                        break;

                      case "ML":
                        this.setMiterLimit(value);
                        break;

                      case "D":
                        this.setDash(value[0], value[1]);
                        break;

                      case "RI":
                        this.setRenderingIntent(value);
                        break;

                      case "FL":
                        this.setFlatness(value);
                        break;

                      case "Font":
                        this.setFont(value);
                        break;

                      case "CA":
                        this.setStrokeAlpha(value);
                        break;

                      case "ca":
                        this.setFillAlpha(value);
                        break;

                      default:
                        (0, _util.warn)("Unimplemented graphic state operator ".concat(key));
                        break;
                    }
                  }
                } catch (err) {
                  _didIteratorError65 = true;
                  _iteratorError65 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion65 && _iterator65["return"] != null) {
                      _iterator65["return"]();
                    }
                  } finally {
                    if (_didIteratorError65) {
                      throw _iteratorError65;
                    }
                  }
                }
              }
            }, {
              key: "fill",
              value: function fill() {
                var current = this.current;

                if (current.element) {
                  current.element.setAttributeNS(null, "fill", current.fillColor);
                  current.element.setAttributeNS(null, "fill-opacity", current.fillAlpha);
                  this.endPath();
                }
              }
            }, {
              key: "stroke",
              value: function stroke() {
                var current = this.current;

                if (current.element) {
                  this._setStrokeAttributes(current.element);

                  current.element.setAttributeNS(null, "fill", "none");
                  this.endPath();
                }
              }
            }, {
              key: "_setStrokeAttributes",
              value: function _setStrokeAttributes(element) {
                var lineWidthScale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
                var current = this.current;
                var dashArray = current.dashArray;

                if (lineWidthScale !== 1 && dashArray.length > 0) {
                  dashArray = dashArray.map(function (value) {
                    return lineWidthScale * value;
                  });
                }

                element.setAttributeNS(null, "stroke", current.strokeColor);
                element.setAttributeNS(null, "stroke-opacity", current.strokeAlpha);
                element.setAttributeNS(null, "stroke-miterlimit", pf(current.miterLimit));
                element.setAttributeNS(null, "stroke-linecap", current.lineCap);
                element.setAttributeNS(null, "stroke-linejoin", current.lineJoin);
                element.setAttributeNS(null, "stroke-width", pf(lineWidthScale * current.lineWidth) + "px");
                element.setAttributeNS(null, "stroke-dasharray", dashArray.map(pf).join(" "));
                element.setAttributeNS(null, "stroke-dashoffset", pf(lineWidthScale * current.dashPhase) + "px");
              }
            }, {
              key: "eoFill",
              value: function eoFill() {
                if (this.current.element) {
                  this.current.element.setAttributeNS(null, "fill-rule", "evenodd");
                }

                this.fill();
              }
            }, {
              key: "fillStroke",
              value: function fillStroke() {
                this.stroke();
                this.fill();
              }
            }, {
              key: "eoFillStroke",
              value: function eoFillStroke() {
                if (this.current.element) {
                  this.current.element.setAttributeNS(null, "fill-rule", "evenodd");
                }

                this.fillStroke();
              }
            }, {
              key: "closeStroke",
              value: function closeStroke() {
                this.closePath();
                this.stroke();
              }
            }, {
              key: "closeFillStroke",
              value: function closeFillStroke() {
                this.closePath();
                this.fillStroke();
              }
            }, {
              key: "closeEOFillStroke",
              value: function closeEOFillStroke() {
                this.closePath();
                this.eoFillStroke();
              }
            }, {
              key: "paintSolidColorImageMask",
              value: function paintSolidColorImageMask() {
                var rect = this.svgFactory.createElement("svg:rect");
                rect.setAttributeNS(null, "x", "0");
                rect.setAttributeNS(null, "y", "0");
                rect.setAttributeNS(null, "width", "1px");
                rect.setAttributeNS(null, "height", "1px");
                rect.setAttributeNS(null, "fill", this.current.fillColor);

                this._ensureTransformGroup().appendChild(rect);
              }
            }, {
              key: "paintImageXObject",
              value: function paintImageXObject(objId) {
                var imgData = objId.startsWith("g_") ? this.commonObjs.get(objId) : this.objs.get(objId);

                if (!imgData) {
                  (0, _util.warn)("Dependent image with object ID ".concat(objId, " is not ready yet"));
                  return;
                }

                this.paintInlineImageXObject(imgData);
              }
            }, {
              key: "paintInlineImageXObject",
              value: function paintInlineImageXObject(imgData, mask) {
                var width = imgData.width;
                var height = imgData.height;
                var imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);
                var cliprect = this.svgFactory.createElement("svg:rect");
                cliprect.setAttributeNS(null, "x", "0");
                cliprect.setAttributeNS(null, "y", "0");
                cliprect.setAttributeNS(null, "width", pf(width));
                cliprect.setAttributeNS(null, "height", pf(height));
                this.current.element = cliprect;
                this.clip("nonzero");
                var imgEl = this.svgFactory.createElement("svg:image");
                imgEl.setAttributeNS(XLINK_NS, "xlink:href", imgSrc);
                imgEl.setAttributeNS(null, "x", "0");
                imgEl.setAttributeNS(null, "y", pf(-height));
                imgEl.setAttributeNS(null, "width", pf(width) + "px");
                imgEl.setAttributeNS(null, "height", pf(height) + "px");
                imgEl.setAttributeNS(null, "transform", "scale(".concat(pf(1 / width), " ").concat(pf(-1 / height), ")"));

                if (mask) {
                  mask.appendChild(imgEl);
                } else {
                  this._ensureTransformGroup().appendChild(imgEl);
                }
              }
            }, {
              key: "paintImageMaskXObject",
              value: function paintImageMaskXObject(imgData) {
                var current = this.current;
                var width = imgData.width;
                var height = imgData.height;
                var fillColor = current.fillColor;
                current.maskId = "mask".concat(maskCount++);
                var mask = this.svgFactory.createElement("svg:mask");
                mask.setAttributeNS(null, "id", current.maskId);
                var rect = this.svgFactory.createElement("svg:rect");
                rect.setAttributeNS(null, "x", "0");
                rect.setAttributeNS(null, "y", "0");
                rect.setAttributeNS(null, "width", pf(width));
                rect.setAttributeNS(null, "height", pf(height));
                rect.setAttributeNS(null, "fill", fillColor);
                rect.setAttributeNS(null, "mask", "url(#".concat(current.maskId, ")"));
                this.defs.appendChild(mask);

                this._ensureTransformGroup().appendChild(rect);

                this.paintInlineImageXObject(imgData, mask);
              }
            }, {
              key: "paintFormXObjectBegin",
              value: function paintFormXObjectBegin(matrix, bbox) {
                if (Array.isArray(matrix) && matrix.length === 6) {
                  this.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);
                }

                if (bbox) {
                  var width = bbox[2] - bbox[0];
                  var height = bbox[3] - bbox[1];
                  var cliprect = this.svgFactory.createElement("svg:rect");
                  cliprect.setAttributeNS(null, "x", bbox[0]);
                  cliprect.setAttributeNS(null, "y", bbox[1]);
                  cliprect.setAttributeNS(null, "width", pf(width));
                  cliprect.setAttributeNS(null, "height", pf(height));
                  this.current.element = cliprect;
                  this.clip("nonzero");
                  this.endPath();
                }
              }
            }, {
              key: "paintFormXObjectEnd",
              value: function paintFormXObjectEnd() {}
            }, {
              key: "_initialize",
              value: function _initialize(viewport) {
                var svg = this.svgFactory.create(viewport.width, viewport.height);
                var definitions = this.svgFactory.createElement("svg:defs");
                svg.appendChild(definitions);
                this.defs = definitions;
                var rootGroup = this.svgFactory.createElement("svg:g");
                rootGroup.setAttributeNS(null, "transform", pm(viewport.transform));
                svg.appendChild(rootGroup);
                this.svg = rootGroup;
                return svg;
              }
            }, {
              key: "_ensureClipGroup",
              value: function _ensureClipGroup() {
                if (!this.current.clipGroup) {
                  var clipGroup = this.svgFactory.createElement("svg:g");
                  clipGroup.setAttributeNS(null, "clip-path", this.current.activeClipUrl);
                  this.svg.appendChild(clipGroup);
                  this.current.clipGroup = clipGroup;
                }

                return this.current.clipGroup;
              }
            }, {
              key: "_ensureTransformGroup",
              value: function _ensureTransformGroup() {
                if (!this.tgrp) {
                  this.tgrp = this.svgFactory.createElement("svg:g");
                  this.tgrp.setAttributeNS(null, "transform", pm(this.transformMatrix));

                  if (this.current.activeClipUrl) {
                    this._ensureClipGroup().appendChild(this.tgrp);
                  } else {
                    this.svg.appendChild(this.tgrp);
                  }
                }

                return this.tgrp;
              }
            }]);

            return SVGGraphics;
          }();
        }
        /***/
      },
      /* 21 */

      /***/
      function (__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.XfaLayer = void 0;

        var XfaLayer =
        /*#__PURE__*/
        function () {
          function XfaLayer() {
            _classCallCheck(this, XfaLayer);
          }

          _createClass(XfaLayer, null, [{
            key: "setupStorage",
            value: function setupStorage(html, id, element, storage, intent) {
              var storedData = storage.getValue(id, {
                value: null
              });

              switch (element.name) {
                case "textarea":
                  if (storedData.value !== null) {
                    html.textContent = storedData.value;
                  }

                  if (intent === "print") {
                    break;
                  }

                  html.addEventListener("input", function (event) {
                    storage.setValue(id, {
                      value: event.target.value
                    });
                  });
                  break;

                case "input":
                  if (element.attributes.type === "radio" || element.attributes.type === "checkbox") {
                    if (storedData.value === element.attributes.xfaOn) {
                      html.setAttribute("checked", true);
                    }

                    if (intent === "print") {
                      break;
                    }

                    html.addEventListener("change", function (event) {
                      storage.setValue(id, {
                        value: event.target.getAttribute("xfaOn")
                      });
                    });
                  } else {
                    if (storedData.value !== null) {
                      html.setAttribute("value", storedData.value);
                    }

                    if (intent === "print") {
                      break;
                    }

                    html.addEventListener("input", function (event) {
                      storage.setValue(id, {
                        value: event.target.value
                      });
                    });
                  }

                  break;

                case "select":
                  if (storedData.value !== null) {
                    var _iteratorNormalCompletion66 = true;
                    var _didIteratorError66 = false;
                    var _iteratorError66 = undefined;

                    try {
                      for (var _iterator66 = element.children[Symbol.iterator](), _step66; !(_iteratorNormalCompletion66 = (_step66 = _iterator66.next()).done); _iteratorNormalCompletion66 = true) {
                        var option = _step66.value;

                        if (option.attributes.value === storedData.value) {
                          option.attributes.selected = true;
                        }
                      }
                    } catch (err) {
                      _didIteratorError66 = true;
                      _iteratorError66 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion66 && _iterator66["return"] != null) {
                          _iterator66["return"]();
                        }
                      } finally {
                        if (_didIteratorError66) {
                          throw _iteratorError66;
                        }
                      }
                    }
                  }

                  html.addEventListener("input", function (event) {
                    var options = event.target.options;
                    var value = options.selectedIndex === -1 ? "" : options[options.selectedIndex].value;
                    storage.setValue(id, {
                      value: value
                    });
                  });
                  break;
              }
            }
          }, {
            key: "setAttributes",
            value: function setAttributes(html, element, storage, intent) {
              var attributes = element.attributes;

              if (attributes.type === "radio") {
                attributes.name = "".concat(attributes.name, "-").concat(intent);
              }

              for (var _i15 = 0, _Object$entries2 = Object.entries(attributes); _i15 < _Object$entries2.length; _i15++) {
                var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i15], 2),
                    key = _Object$entries2$_i[0],
                    value = _Object$entries2$_i[1];

                if (value === null || value === undefined || key === "dataId") {
                  continue;
                }

                if (key !== "style") {
                  if (key === "textContent") {
                    html.textContent = value;
                  } else if (key === "class") {
                    html.setAttribute(key, value.join(" "));
                  } else {
                    html.setAttribute(key, value);
                  }
                } else {
                  Object.assign(html.style, value);
                }
              }

              if (storage && attributes.dataId) {
                this.setupStorage(html, attributes.dataId, element, storage);
              }
            }
          }, {
            key: "render",
            value: function render(parameters) {
              var storage = parameters.annotationStorage;
              var root = parameters.xfa;
              var intent = parameters.intent || "display";
              var rootHtml = document.createElement(root.name);

              if (root.attributes) {
                this.setAttributes(rootHtml, root);
              }

              var stack = [[root, -1, rootHtml]];
              var rootDiv = parameters.div;
              rootDiv.appendChild(rootHtml);
              var transform = "matrix(".concat(parameters.viewport.transform.join(","), ")");
              rootDiv.style.transform = transform;
              rootDiv.setAttribute("class", "xfaLayer xfaFont");

              while (stack.length > 0) {
                var _child$attributes;

                var _stack = _slicedToArray(stack[stack.length - 1], 3),
                    parent = _stack[0],
                    i = _stack[1],
                    html = _stack[2];

                if (i + 1 === parent.children.length) {
                  stack.pop();
                  continue;
                }

                var child = parent.children[++stack[stack.length - 1][1]];

                if (child === null) {
                  continue;
                }

                var name = child.name;

                if (name === "#text") {
                  html.appendChild(document.createTextNode(child.value));
                  continue;
                }

                var childHtml = void 0;

                if (child !== null && child !== void 0 && (_child$attributes = child.attributes) !== null && _child$attributes !== void 0 && _child$attributes.xmlns) {
                  childHtml = document.createElementNS(child.attributes.xmlns, name);
                } else {
                  childHtml = document.createElement(name);
                }

                html.appendChild(childHtml);

                if (child.attributes) {
                  this.setAttributes(childHtml, child, storage, intent);
                }

                if (child.children && child.children.length > 0) {
                  stack.push([child, -1, childHtml]);
                } else if (child.value) {
                  childHtml.appendChild(document.createTextNode(child.value));
                }
              }

              var _iteratorNormalCompletion67 = true;
              var _didIteratorError67 = false;
              var _iteratorError67 = undefined;

              try {
                for (var _iterator67 = rootDiv.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea")[Symbol.iterator](), _step67; !(_iteratorNormalCompletion67 = (_step67 = _iterator67.next()).done); _iteratorNormalCompletion67 = true) {
                  var el = _step67.value;
                  el.setAttribute("readOnly", true);
                }
              } catch (err) {
                _didIteratorError67 = true;
                _iteratorError67 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion67 && _iterator67["return"] != null) {
                    _iterator67["return"]();
                  }
                } finally {
                  if (_didIteratorError67) {
                    throw _iteratorError67;
                  }
                }
              }
            }
          }, {
            key: "update",
            value: function update(parameters) {
              var transform = "matrix(".concat(parameters.viewport.transform.join(","), ")");
              parameters.div.style.transform = transform;
              parameters.div.hidden = false;
            }
          }]);

          return XfaLayer;
        }();

        exports.XfaLayer = XfaLayer;
        /***/
      },
      /* 22 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFNodeStream = void 0;

        var _util = __w_pdfjs_require__(2);

        var _network_utils = __w_pdfjs_require__(23);

        ;

        var fs = __webpack_require__(174);

        var http = __webpack_require__(177);

        var https = __webpack_require__(178);

        var url = __webpack_require__(179);

        var fileUriRegex = /^file:\/\/\/[a-zA-Z]:\//;

        function parseUrl(sourceUrl) {
          var parsedUrl = url.parse(sourceUrl);

          if (parsedUrl.protocol === "file:" || parsedUrl.host) {
            return parsedUrl;
          }

          if (/^[a-z]:[/\\]/i.test(sourceUrl)) {
            return url.parse("file:///".concat(sourceUrl));
          }

          if (!parsedUrl.host) {
            parsedUrl.protocol = "file:";
          }

          return parsedUrl;
        }

        var PDFNodeStream =
        /*#__PURE__*/
        function () {
          function PDFNodeStream(source) {
            _classCallCheck(this, PDFNodeStream);

            this.source = source;
            this.url = parseUrl(source.url);
            this.isHttp = this.url.protocol === "http:" || this.url.protocol === "https:";
            this.isFsUrl = this.url.protocol === "file:";
            this.httpHeaders = this.isHttp && source.httpHeaders || {};
            this._fullRequestReader = null;
            this._rangeRequestReaders = [];
          }

          _createClass(PDFNodeStream, [{
            key: "getFullReader",
            value: function getFullReader() {
              (0, _util.assert)(!this._fullRequestReader, "PDFNodeStream.getFullReader can only be called once.");
              this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);
              return this._fullRequestReader;
            }
          }, {
            key: "getRangeReader",
            value: function getRangeReader(start, end) {
              if (end <= this._progressiveDataLength) {
                return null;
              }

              var rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);

              this._rangeRequestReaders.push(rangeReader);

              return rangeReader;
            }
          }, {
            key: "cancelAllRequests",
            value: function cancelAllRequests(reason) {
              if (this._fullRequestReader) {
                this._fullRequestReader.cancel(reason);
              }

              var _iteratorNormalCompletion68 = true;
              var _didIteratorError68 = false;
              var _iteratorError68 = undefined;

              try {
                for (var _iterator68 = this._rangeRequestReaders.slice(0)[Symbol.iterator](), _step68; !(_iteratorNormalCompletion68 = (_step68 = _iterator68.next()).done); _iteratorNormalCompletion68 = true) {
                  var reader = _step68.value;
                  reader.cancel(reason);
                }
              } catch (err) {
                _didIteratorError68 = true;
                _iteratorError68 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion68 && _iterator68["return"] != null) {
                    _iterator68["return"]();
                  }
                } finally {
                  if (_didIteratorError68) {
                    throw _iteratorError68;
                  }
                }
              }
            }
          }, {
            key: "_progressiveDataLength",
            get: function get() {
              var _ref59, _this$_fullRequestRea2;

              return (_ref59 = (_this$_fullRequestRea2 = this._fullRequestReader) === null || _this$_fullRequestRea2 === void 0 ? void 0 : _this$_fullRequestRea2._loaded) !== null && _ref59 !== void 0 ? _ref59 : 0;
            }
          }]);

          return PDFNodeStream;
        }();

        exports.PDFNodeStream = PDFNodeStream;

        var BaseFullReader =
        /*#__PURE__*/
        function () {
          function BaseFullReader(stream) {
            _classCallCheck(this, BaseFullReader);

            this._url = stream.url;
            this._done = false;
            this._storedError = null;
            this.onProgress = null;
            var source = stream.source;
            this._contentLength = source.length;
            this._loaded = 0;
            this._filename = null;
            this._disableRange = source.disableRange || false;
            this._rangeChunkSize = source.rangeChunkSize;

            if (!this._rangeChunkSize && !this._disableRange) {
              this._disableRange = true;
            }

            this._isStreamingSupported = !source.disableStream;
            this._isRangeSupported = !source.disableRange;
            this._readableStream = null;
            this._readCapability = (0, _util.createPromiseCapability)();
            this._headersCapability = (0, _util.createPromiseCapability)();
          }

          _createClass(BaseFullReader, [{
            key: "read",
            value: function () {
              var _read3 = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee12() {
                var chunk, buffer;
                return regeneratorRuntime.wrap(function _callee12$(_context12) {
                  while (1) {
                    switch (_context12.prev = _context12.next) {
                      case 0:
                        _context12.next = 2;
                        return this._readCapability.promise;

                      case 2:
                        if (!this._done) {
                          _context12.next = 4;
                          break;
                        }

                        return _context12.abrupt("return", {
                          value: undefined,
                          done: true
                        });

                      case 4:
                        if (!this._storedError) {
                          _context12.next = 6;
                          break;
                        }

                        throw this._storedError;

                      case 6:
                        chunk = this._readableStream.read();

                        if (!(chunk === null)) {
                          _context12.next = 10;
                          break;
                        }

                        this._readCapability = (0, _util.createPromiseCapability)();
                        return _context12.abrupt("return", this.read());

                      case 10:
                        this._loaded += chunk.length;

                        if (this.onProgress) {
                          this.onProgress({
                            loaded: this._loaded,
                            total: this._contentLength
                          });
                        }

                        buffer = new Uint8Array(chunk).buffer;
                        return _context12.abrupt("return", {
                          value: buffer,
                          done: false
                        });

                      case 14:
                      case "end":
                        return _context12.stop();
                    }
                  }
                }, _callee12, this);
              }));

              function read() {
                return _read3.apply(this, arguments);
              }

              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              if (!this._readableStream) {
                this._error(reason);

                return;
              }

              this._readableStream.destroy(reason);
            }
          }, {
            key: "_error",
            value: function _error(reason) {
              this._storedError = reason;

              this._readCapability.resolve();
            }
          }, {
            key: "_setReadableStream",
            value: function _setReadableStream(readableStream) {
              var _this49 = this;

              this._readableStream = readableStream;
              readableStream.on("readable", function () {
                _this49._readCapability.resolve();
              });
              readableStream.on("end", function () {
                readableStream.destroy();
                _this49._done = true;

                _this49._readCapability.resolve();
              });
              readableStream.on("error", function (reason) {
                _this49._error(reason);
              });

              if (!this._isStreamingSupported && this._isRangeSupported) {
                this._error(new _util.AbortException("streaming is disabled"));
              }

              if (this._storedError) {
                this._readableStream.destroy(this._storedError);
              }
            }
          }, {
            key: "headersReady",
            get: function get() {
              return this._headersCapability.promise;
            }
          }, {
            key: "filename",
            get: function get() {
              return this._filename;
            }
          }, {
            key: "contentLength",
            get: function get() {
              return this._contentLength;
            }
          }, {
            key: "isRangeSupported",
            get: function get() {
              return this._isRangeSupported;
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return this._isStreamingSupported;
            }
          }]);

          return BaseFullReader;
        }();

        var BaseRangeReader =
        /*#__PURE__*/
        function () {
          function BaseRangeReader(stream) {
            _classCallCheck(this, BaseRangeReader);

            this._url = stream.url;
            this._done = false;
            this._storedError = null;
            this.onProgress = null;
            this._loaded = 0;
            this._readableStream = null;
            this._readCapability = (0, _util.createPromiseCapability)();
            var source = stream.source;
            this._isStreamingSupported = !source.disableStream;
          }

          _createClass(BaseRangeReader, [{
            key: "read",
            value: function () {
              var _read4 = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee13() {
                var chunk, buffer;
                return regeneratorRuntime.wrap(function _callee13$(_context13) {
                  while (1) {
                    switch (_context13.prev = _context13.next) {
                      case 0:
                        _context13.next = 2;
                        return this._readCapability.promise;

                      case 2:
                        if (!this._done) {
                          _context13.next = 4;
                          break;
                        }

                        return _context13.abrupt("return", {
                          value: undefined,
                          done: true
                        });

                      case 4:
                        if (!this._storedError) {
                          _context13.next = 6;
                          break;
                        }

                        throw this._storedError;

                      case 6:
                        chunk = this._readableStream.read();

                        if (!(chunk === null)) {
                          _context13.next = 10;
                          break;
                        }

                        this._readCapability = (0, _util.createPromiseCapability)();
                        return _context13.abrupt("return", this.read());

                      case 10:
                        this._loaded += chunk.length;

                        if (this.onProgress) {
                          this.onProgress({
                            loaded: this._loaded
                          });
                        }

                        buffer = new Uint8Array(chunk).buffer;
                        return _context13.abrupt("return", {
                          value: buffer,
                          done: false
                        });

                      case 14:
                      case "end":
                        return _context13.stop();
                    }
                  }
                }, _callee13, this);
              }));

              function read() {
                return _read4.apply(this, arguments);
              }

              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              if (!this._readableStream) {
                this._error(reason);

                return;
              }

              this._readableStream.destroy(reason);
            }
          }, {
            key: "_error",
            value: function _error(reason) {
              this._storedError = reason;

              this._readCapability.resolve();
            }
          }, {
            key: "_setReadableStream",
            value: function _setReadableStream(readableStream) {
              var _this50 = this;

              this._readableStream = readableStream;
              readableStream.on("readable", function () {
                _this50._readCapability.resolve();
              });
              readableStream.on("end", function () {
                readableStream.destroy();
                _this50._done = true;

                _this50._readCapability.resolve();
              });
              readableStream.on("error", function (reason) {
                _this50._error(reason);
              });

              if (this._storedError) {
                this._readableStream.destroy(this._storedError);
              }
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return this._isStreamingSupported;
            }
          }]);

          return BaseRangeReader;
        }();

        function createRequestOptions(parsedUrl, headers) {
          return {
            protocol: parsedUrl.protocol,
            auth: parsedUrl.auth,
            host: parsedUrl.hostname,
            port: parsedUrl.port,
            path: parsedUrl.path,
            method: "GET",
            headers: headers
          };
        }

        var PDFNodeStreamFullReader =
        /*#__PURE__*/
        function (_BaseFullReader) {
          _inherits(PDFNodeStreamFullReader, _BaseFullReader);

          function PDFNodeStreamFullReader(stream) {
            var _this51;

            _classCallCheck(this, PDFNodeStreamFullReader);

            _this51 = _possibleConstructorReturn(this, _getPrototypeOf(PDFNodeStreamFullReader).call(this, stream));

            var handleResponse = function handleResponse(response) {
              if (response.statusCode === 404) {
                var error = new _util.MissingPDFException("Missing PDF \"".concat(_this51._url, "\"."));
                _this51._storedError = error;

                _this51._headersCapability.reject(error);

                return;
              }

              _this51._headersCapability.resolve();

              _this51._setReadableStream(response);

              var getResponseHeader = function getResponseHeader(name) {
                return _this51._readableStream.headers[name.toLowerCase()];
              };

              var _ref60 = (0, _network_utils.validateRangeRequestCapabilities)({
                getResponseHeader: getResponseHeader,
                isHttp: stream.isHttp,
                rangeChunkSize: _this51._rangeChunkSize,
                disableRange: _this51._disableRange
              }),
                  allowRangeRequests = _ref60.allowRangeRequests,
                  suggestedLength = _ref60.suggestedLength;

              _this51._isRangeSupported = allowRangeRequests;
              _this51._contentLength = suggestedLength || _this51._contentLength;
              _this51._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);
            };

            _this51._request = null;

            if (_this51._url.protocol === "http:") {
              _this51._request = http.request(createRequestOptions(_this51._url, stream.httpHeaders), handleResponse);
            } else {
              _this51._request = https.request(createRequestOptions(_this51._url, stream.httpHeaders), handleResponse);
            }

            _this51._request.on("error", function (reason) {
              _this51._storedError = reason;

              _this51._headersCapability.reject(reason);
            });

            _this51._request.end();

            return _this51;
          }

          return PDFNodeStreamFullReader;
        }(BaseFullReader);

        var PDFNodeStreamRangeReader =
        /*#__PURE__*/
        function (_BaseRangeReader) {
          _inherits(PDFNodeStreamRangeReader, _BaseRangeReader);

          function PDFNodeStreamRangeReader(stream, start, end) {
            var _this52;

            _classCallCheck(this, PDFNodeStreamRangeReader);

            _this52 = _possibleConstructorReturn(this, _getPrototypeOf(PDFNodeStreamRangeReader).call(this, stream));
            _this52._httpHeaders = {};

            for (var property in stream.httpHeaders) {
              var value = stream.httpHeaders[property];

              if (typeof value === "undefined") {
                continue;
              }

              _this52._httpHeaders[property] = value;
            }

            _this52._httpHeaders.Range = "bytes=".concat(start, "-").concat(end - 1);

            var handleResponse = function handleResponse(response) {
              if (response.statusCode === 404) {
                var error = new _util.MissingPDFException("Missing PDF \"".concat(_this52._url, "\"."));
                _this52._storedError = error;
                return;
              }

              _this52._setReadableStream(response);
            };

            _this52._request = null;

            if (_this52._url.protocol === "http:") {
              _this52._request = http.request(createRequestOptions(_this52._url, _this52._httpHeaders), handleResponse);
            } else {
              _this52._request = https.request(createRequestOptions(_this52._url, _this52._httpHeaders), handleResponse);
            }

            _this52._request.on("error", function (reason) {
              _this52._storedError = reason;
            });

            _this52._request.end();

            return _this52;
          }

          return PDFNodeStreamRangeReader;
        }(BaseRangeReader);

        var PDFNodeStreamFsFullReader =
        /*#__PURE__*/
        function (_BaseFullReader2) {
          _inherits(PDFNodeStreamFsFullReader, _BaseFullReader2);

          function PDFNodeStreamFsFullReader(stream) {
            var _this53;

            _classCallCheck(this, PDFNodeStreamFsFullReader);

            _this53 = _possibleConstructorReturn(this, _getPrototypeOf(PDFNodeStreamFsFullReader).call(this, stream));
            var path = decodeURIComponent(_this53._url.path);

            if (fileUriRegex.test(_this53._url.href)) {
              path = path.replace(/^\//, "");
            }

            fs.lstat(path, function (error, stat) {
              if (error) {
                if (error.code === "ENOENT") {
                  error = new _util.MissingPDFException("Missing PDF \"".concat(path, "\"."));
                }

                _this53._storedError = error;

                _this53._headersCapability.reject(error);

                return;
              }

              _this53._contentLength = stat.size;

              _this53._setReadableStream(fs.createReadStream(path));

              _this53._headersCapability.resolve();
            });
            return _this53;
          }

          return PDFNodeStreamFsFullReader;
        }(BaseFullReader);

        var PDFNodeStreamFsRangeReader =
        /*#__PURE__*/
        function (_BaseRangeReader2) {
          _inherits(PDFNodeStreamFsRangeReader, _BaseRangeReader2);

          function PDFNodeStreamFsRangeReader(stream, start, end) {
            var _this54;

            _classCallCheck(this, PDFNodeStreamFsRangeReader);

            _this54 = _possibleConstructorReturn(this, _getPrototypeOf(PDFNodeStreamFsRangeReader).call(this, stream));
            var path = decodeURIComponent(_this54._url.path);

            if (fileUriRegex.test(_this54._url.href)) {
              path = path.replace(/^\//, "");
            }

            _this54._setReadableStream(fs.createReadStream(path, {
              start: start,
              end: end - 1
            }));

            return _this54;
          }

          return PDFNodeStreamFsRangeReader;
        }(BaseRangeReader);
        /***/

      },
      /* 23 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.createResponseStatusError = createResponseStatusError;
        exports.extractFilenameFromHeader = extractFilenameFromHeader;
        exports.validateRangeRequestCapabilities = validateRangeRequestCapabilities;
        exports.validateResponseStatus = validateResponseStatus;

        var _util = __w_pdfjs_require__(2);

        var _content_disposition = __w_pdfjs_require__(24);

        var _display_utils = __w_pdfjs_require__(1);

        function validateRangeRequestCapabilities(_ref61) {
          var getResponseHeader = _ref61.getResponseHeader,
              isHttp = _ref61.isHttp,
              rangeChunkSize = _ref61.rangeChunkSize,
              disableRange = _ref61.disableRange;
          (0, _util.assert)(rangeChunkSize > 0, "Range chunk size must be larger than zero");
          var returnValues = {
            allowRangeRequests: false,
            suggestedLength: undefined
          };
          var length = parseInt(getResponseHeader("Content-Length"), 10);

          if (!Number.isInteger(length)) {
            return returnValues;
          }

          returnValues.suggestedLength = length;

          if (length <= 2 * rangeChunkSize) {
            return returnValues;
          }

          if (disableRange || !isHttp) {
            return returnValues;
          }

          if (getResponseHeader("Accept-Ranges") !== "bytes") {
            return returnValues;
          }

          var contentEncoding = getResponseHeader("Content-Encoding") || "identity";

          if (contentEncoding !== "identity") {
            return returnValues;
          }

          returnValues.allowRangeRequests = true;
          return returnValues;
        }

        function extractFilenameFromHeader(getResponseHeader) {
          var contentDisposition = getResponseHeader("Content-Disposition");

          if (contentDisposition) {
            var filename = (0, _content_disposition.getFilenameFromContentDispositionHeader)(contentDisposition);

            if (filename.includes("%")) {
              try {
                filename = decodeURIComponent(filename);
              } catch (ex) {}
            }

            if ((0, _display_utils.isPdfFile)(filename)) {
              return filename;
            }
          }

          return null;
        }

        function createResponseStatusError(status, url) {
          if (status === 404 || status === 0 && url.startsWith("file:")) {
            return new _util.MissingPDFException('Missing PDF "' + url + '".');
          }

          return new _util.UnexpectedResponseException("Unexpected server response (".concat(status, ") while retrieving PDF \"").concat(url, "\"."), status);
        }

        function validateResponseStatus(status) {
          return status === 200 || status === 206;
        }
        /***/

      },
      /* 24 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.getFilenameFromContentDispositionHeader = getFilenameFromContentDispositionHeader;

        var _util = __w_pdfjs_require__(2);

        function getFilenameFromContentDispositionHeader(contentDisposition) {
          var needsEncodingFixup = true;
          var tmp = toParamRegExp("filename\\*", "i").exec(contentDisposition);

          if (tmp) {
            tmp = tmp[1];
            var filename = rfc2616unquote(tmp);
            filename = unescape(filename);
            filename = rfc5987decode(filename);
            filename = rfc2047decode(filename);
            return fixupEncoding(filename);
          }

          tmp = rfc2231getparam(contentDisposition);

          if (tmp) {
            var _filename = rfc2047decode(tmp);

            return fixupEncoding(_filename);
          }

          tmp = toParamRegExp("filename", "i").exec(contentDisposition);

          if (tmp) {
            tmp = tmp[1];

            var _filename2 = rfc2616unquote(tmp);

            _filename2 = rfc2047decode(_filename2);
            return fixupEncoding(_filename2);
          }

          function toParamRegExp(attributePattern, flags) {
            return new RegExp("(?:^|;)\\s*" + attributePattern + "\\s*=\\s*" + "(" + '[^";\\s][^;\\s]*' + "|" + '"(?:[^"\\\\]|\\\\"?)+"?' + ")", flags);
          }

          function textdecode(encoding, value) {
            if (encoding) {
              if (!/^[\x00-\xFF]+$/.test(value)) {
                return value;
              }

              try {
                var decoder = new TextDecoder(encoding, {
                  fatal: true
                });
                var buffer = (0, _util.stringToBytes)(value);
                value = decoder.decode(buffer);
                needsEncodingFixup = false;
              } catch (e) {
                if (/^utf-?8$/i.test(encoding)) {
                  try {
                    value = decodeURIComponent(escape(value));
                    needsEncodingFixup = false;
                  } catch (err) {}
                }
              }
            }

            return value;
          }

          function fixupEncoding(value) {
            if (needsEncodingFixup && /[\x80-\xff]/.test(value)) {
              value = textdecode("utf-8", value);

              if (needsEncodingFixup) {
                value = textdecode("iso-8859-1", value);
              }
            }

            return value;
          }

          function rfc2231getparam(contentDispositionStr) {
            var matches = [];
            var match;
            var iter = toParamRegExp("filename\\*((?!0\\d)\\d+)(\\*?)", "ig");

            while ((match = iter.exec(contentDispositionStr)) !== null) {
              var _match = match,
                  _match2 = _slicedToArray(_match, 4),
                  n = _match2[1],
                  quot = _match2[2],
                  part = _match2[3];

              n = parseInt(n, 10);

              if (n in matches) {
                if (n === 0) {
                  break;
                }

                continue;
              }

              matches[n] = [quot, part];
            }

            var parts = [];

            for (var _n2 = 0; _n2 < matches.length; ++_n2) {
              if (!(_n2 in matches)) {
                break;
              }

              var _matches$_n = _slicedToArray(matches[_n2], 2),
                  _quot = _matches$_n[0],
                  _part = _matches$_n[1];

              _part = rfc2616unquote(_part);

              if (_quot) {
                _part = unescape(_part);

                if (_n2 === 0) {
                  _part = rfc5987decode(_part);
                }
              }

              parts.push(_part);
            }

            return parts.join("");
          }

          function rfc2616unquote(value) {
            if (value.startsWith('"')) {
              var parts = value.slice(1).split('\\"');

              for (var i = 0; i < parts.length; ++i) {
                var quotindex = parts[i].indexOf('"');

                if (quotindex !== -1) {
                  parts[i] = parts[i].slice(0, quotindex);
                  parts.length = i + 1;
                }

                parts[i] = parts[i].replace(/\\(.)/g, "$1");
              }

              value = parts.join('"');
            }

            return value;
          }

          function rfc5987decode(extvalue) {
            var encodingend = extvalue.indexOf("'");

            if (encodingend === -1) {
              return extvalue;
            }

            var encoding = extvalue.slice(0, encodingend);
            var langvalue = extvalue.slice(encodingend + 1);
            var value = langvalue.replace(/^[^']*'/, "");
            return textdecode(encoding, value);
          }

          function rfc2047decode(value) {
            if (!value.startsWith("=?") || /[\x00-\x19\x80-\xff]/.test(value)) {
              return value;
            }

            return value.replace(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g, function (matches, charset, encoding, text) {
              if (encoding === "q" || encoding === "Q") {
                text = text.replace(/_/g, " ");
                text = text.replace(/=([0-9a-fA-F]{2})/g, function (match, hex) {
                  return String.fromCharCode(parseInt(hex, 16));
                });
                return textdecode(charset, text);
              }

              try {
                text = atob(text);
              } catch (e) {}

              return textdecode(charset, text);
            });
          }

          return "";
        }
        /***/

      },
      /* 25 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFNetworkStream = void 0;

        var _util = __w_pdfjs_require__(2);

        var _network_utils = __w_pdfjs_require__(23);

        ;
        var OK_RESPONSE = 200;
        var PARTIAL_CONTENT_RESPONSE = 206;

        function getArrayBuffer(xhr) {
          var data = xhr.response;

          if (typeof data !== "string") {
            return data;
          }

          var array = (0, _util.stringToBytes)(data);
          return array.buffer;
        }

        var NetworkManager =
        /*#__PURE__*/
        function () {
          function NetworkManager(url, args) {
            _classCallCheck(this, NetworkManager);

            this.url = url;
            args = args || {};
            this.isHttp = /^https?:/i.test(url);
            this.httpHeaders = this.isHttp && args.httpHeaders || {};
            this.withCredentials = args.withCredentials || false;

            this.getXhr = args.getXhr || function NetworkManager_getXhr() {
              return new XMLHttpRequest();
            };

            this.currXhrId = 0;
            this.pendingRequests = Object.create(null);
          }

          _createClass(NetworkManager, [{
            key: "requestRange",
            value: function requestRange(begin, end, listeners) {
              var args = {
                begin: begin,
                end: end
              };

              for (var prop in listeners) {
                args[prop] = listeners[prop];
              }

              return this.request(args);
            }
          }, {
            key: "requestFull",
            value: function requestFull(listeners) {
              return this.request(listeners);
            }
          }, {
            key: "request",
            value: function request(args) {
              var xhr = this.getXhr();
              var xhrId = this.currXhrId++;
              var pendingRequest = this.pendingRequests[xhrId] = {
                xhr: xhr
              };
              xhr.open("GET", this.url);
              xhr.withCredentials = this.withCredentials;

              for (var property in this.httpHeaders) {
                var value = this.httpHeaders[property];

                if (typeof value === "undefined") {
                  continue;
                }

                xhr.setRequestHeader(property, value);
              }

              if (this.isHttp && "begin" in args && "end" in args) {
                xhr.setRequestHeader("Range", "bytes=".concat(args.begin, "-").concat(args.end - 1));
                pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;
              } else {
                pendingRequest.expectedStatus = OK_RESPONSE;
              }

              xhr.responseType = "arraybuffer";

              if (args.onError) {
                xhr.onerror = function (evt) {
                  args.onError(xhr.status);
                };
              }

              xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);
              xhr.onprogress = this.onProgress.bind(this, xhrId);
              pendingRequest.onHeadersReceived = args.onHeadersReceived;
              pendingRequest.onDone = args.onDone;
              pendingRequest.onError = args.onError;
              pendingRequest.onProgress = args.onProgress;
              xhr.send(null);
              return xhrId;
            }
          }, {
            key: "onProgress",
            value: function onProgress(xhrId, evt) {
              var pendingRequest = this.pendingRequests[xhrId];

              if (!pendingRequest) {
                return;
              }

              if (pendingRequest.onProgress) {
                pendingRequest.onProgress(evt);
              }
            }
          }, {
            key: "onStateChange",
            value: function onStateChange(xhrId, evt) {
              var pendingRequest = this.pendingRequests[xhrId];

              if (!pendingRequest) {
                return;
              }

              var xhr = pendingRequest.xhr;

              if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {
                pendingRequest.onHeadersReceived();
                delete pendingRequest.onHeadersReceived;
              }

              if (xhr.readyState !== 4) {
                return;
              }

              if (!(xhrId in this.pendingRequests)) {
                return;
              }

              delete this.pendingRequests[xhrId];

              if (xhr.status === 0 && this.isHttp) {
                if (pendingRequest.onError) {
                  pendingRequest.onError(xhr.status);
                }

                return;
              }

              var xhrStatus = xhr.status || OK_RESPONSE;
              var ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;

              if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {
                if (pendingRequest.onError) {
                  pendingRequest.onError(xhr.status);
                }

                return;
              }

              var chunk = getArrayBuffer(xhr);

              if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {
                var rangeHeader = xhr.getResponseHeader("Content-Range");
                var matches = /bytes (\d+)-(\d+)\/(\d+)/.exec(rangeHeader);
                pendingRequest.onDone({
                  begin: parseInt(matches[1], 10),
                  chunk: chunk
                });
              } else if (chunk) {
                pendingRequest.onDone({
                  begin: 0,
                  chunk: chunk
                });
              } else if (pendingRequest.onError) {
                pendingRequest.onError(xhr.status);
              }
            }
          }, {
            key: "getRequestXhr",
            value: function getRequestXhr(xhrId) {
              return this.pendingRequests[xhrId].xhr;
            }
          }, {
            key: "isPendingRequest",
            value: function isPendingRequest(xhrId) {
              return xhrId in this.pendingRequests;
            }
          }, {
            key: "abortRequest",
            value: function abortRequest(xhrId) {
              var xhr = this.pendingRequests[xhrId].xhr;
              delete this.pendingRequests[xhrId];
              xhr.abort();
            }
          }]);

          return NetworkManager;
        }();

        var PDFNetworkStream =
        /*#__PURE__*/
        function () {
          function PDFNetworkStream(source) {
            _classCallCheck(this, PDFNetworkStream);

            this._source = source;
            this._manager = new NetworkManager(source.url, {
              httpHeaders: source.httpHeaders,
              withCredentials: source.withCredentials
            });
            this._rangeChunkSize = source.rangeChunkSize;
            this._fullRequestReader = null;
            this._rangeRequestReaders = [];
          }

          _createClass(PDFNetworkStream, [{
            key: "_onRangeRequestReaderClosed",
            value: function _onRangeRequestReaderClosed(reader) {
              var i = this._rangeRequestReaders.indexOf(reader);

              if (i >= 0) {
                this._rangeRequestReaders.splice(i, 1);
              }
            }
          }, {
            key: "getFullReader",
            value: function getFullReader() {
              (0, _util.assert)(!this._fullRequestReader, "PDFNetworkStream.getFullReader can only be called once.");
              this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);
              return this._fullRequestReader;
            }
          }, {
            key: "getRangeReader",
            value: function getRangeReader(begin, end) {
              var reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);
              reader.onClosed = this._onRangeRequestReaderClosed.bind(this);

              this._rangeRequestReaders.push(reader);

              return reader;
            }
          }, {
            key: "cancelAllRequests",
            value: function cancelAllRequests(reason) {
              if (this._fullRequestReader) {
                this._fullRequestReader.cancel(reason);
              }

              var _iteratorNormalCompletion69 = true;
              var _didIteratorError69 = false;
              var _iteratorError69 = undefined;

              try {
                for (var _iterator69 = this._rangeRequestReaders.slice(0)[Symbol.iterator](), _step69; !(_iteratorNormalCompletion69 = (_step69 = _iterator69.next()).done); _iteratorNormalCompletion69 = true) {
                  var reader = _step69.value;
                  reader.cancel(reason);
                }
              } catch (err) {
                _didIteratorError69 = true;
                _iteratorError69 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion69 && _iterator69["return"] != null) {
                    _iterator69["return"]();
                  }
                } finally {
                  if (_didIteratorError69) {
                    throw _iteratorError69;
                  }
                }
              }
            }
          }]);

          return PDFNetworkStream;
        }();

        exports.PDFNetworkStream = PDFNetworkStream;

        var PDFNetworkStreamFullRequestReader =
        /*#__PURE__*/
        function () {
          function PDFNetworkStreamFullRequestReader(manager, source) {
            _classCallCheck(this, PDFNetworkStreamFullRequestReader);

            this._manager = manager;
            var args = {
              onHeadersReceived: this._onHeadersReceived.bind(this),
              onDone: this._onDone.bind(this),
              onError: this._onError.bind(this),
              onProgress: this._onProgress.bind(this)
            };
            this._url = source.url;
            this._fullRequestId = manager.requestFull(args);
            this._headersReceivedCapability = (0, _util.createPromiseCapability)();
            this._disableRange = source.disableRange || false;
            this._contentLength = source.length;
            this._rangeChunkSize = source.rangeChunkSize;

            if (!this._rangeChunkSize && !this._disableRange) {
              this._disableRange = true;
            }

            this._isStreamingSupported = false;
            this._isRangeSupported = false;
            this._cachedChunks = [];
            this._requests = [];
            this._done = false;
            this._storedError = undefined;
            this._filename = null;
            this.onProgress = null;
          }

          _createClass(PDFNetworkStreamFullRequestReader, [{
            key: "_onHeadersReceived",
            value: function _onHeadersReceived() {
              var fullRequestXhrId = this._fullRequestId;

              var fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);

              var getResponseHeader = function getResponseHeader(name) {
                return fullRequestXhr.getResponseHeader(name);
              };

              var _ref62 = (0, _network_utils.validateRangeRequestCapabilities)({
                getResponseHeader: getResponseHeader,
                isHttp: this._manager.isHttp,
                rangeChunkSize: this._rangeChunkSize,
                disableRange: this._disableRange
              }),
                  allowRangeRequests = _ref62.allowRangeRequests,
                  suggestedLength = _ref62.suggestedLength;

              if (allowRangeRequests) {
                this._isRangeSupported = true;
              }

              this._contentLength = suggestedLength || this._contentLength;
              this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);

              if (this._isRangeSupported) {
                this._manager.abortRequest(fullRequestXhrId);
              }

              this._headersReceivedCapability.resolve();
            }
          }, {
            key: "_onDone",
            value: function _onDone(args) {
              if (args) {
                if (this._requests.length > 0) {
                  var requestCapability = this._requests.shift();

                  requestCapability.resolve({
                    value: args.chunk,
                    done: false
                  });
                } else {
                  this._cachedChunks.push(args.chunk);
                }
              }

              this._done = true;

              if (this._cachedChunks.length > 0) {
                return;
              }

              var _iteratorNormalCompletion70 = true;
              var _didIteratorError70 = false;
              var _iteratorError70 = undefined;

              try {
                for (var _iterator70 = this._requests[Symbol.iterator](), _step70; !(_iteratorNormalCompletion70 = (_step70 = _iterator70.next()).done); _iteratorNormalCompletion70 = true) {
                  var _requestCapability = _step70.value;

                  _requestCapability.resolve({
                    value: undefined,
                    done: true
                  });
                }
              } catch (err) {
                _didIteratorError70 = true;
                _iteratorError70 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion70 && _iterator70["return"] != null) {
                    _iterator70["return"]();
                  }
                } finally {
                  if (_didIteratorError70) {
                    throw _iteratorError70;
                  }
                }
              }

              this._requests.length = 0;
            }
          }, {
            key: "_onError",
            value: function _onError(status) {
              var url = this._url;
              var exception = (0, _network_utils.createResponseStatusError)(status, url);
              this._storedError = exception;

              this._headersReceivedCapability.reject(exception);

              var _iteratorNormalCompletion71 = true;
              var _didIteratorError71 = false;
              var _iteratorError71 = undefined;

              try {
                for (var _iterator71 = this._requests[Symbol.iterator](), _step71; !(_iteratorNormalCompletion71 = (_step71 = _iterator71.next()).done); _iteratorNormalCompletion71 = true) {
                  var requestCapability = _step71.value;
                  requestCapability.reject(exception);
                }
              } catch (err) {
                _didIteratorError71 = true;
                _iteratorError71 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion71 && _iterator71["return"] != null) {
                    _iterator71["return"]();
                  }
                } finally {
                  if (_didIteratorError71) {
                    throw _iteratorError71;
                  }
                }
              }

              this._requests.length = 0;
              this._cachedChunks.length = 0;
            }
          }, {
            key: "_onProgress",
            value: function _onProgress(data) {
              if (this.onProgress) {
                this.onProgress({
                  loaded: data.loaded,
                  total: data.lengthComputable ? data.total : this._contentLength
                });
              }
            }
          }, {
            key: "read",
            value: function () {
              var _read5 = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee14() {
                var chunk, requestCapability;
                return regeneratorRuntime.wrap(function _callee14$(_context14) {
                  while (1) {
                    switch (_context14.prev = _context14.next) {
                      case 0:
                        if (!this._storedError) {
                          _context14.next = 2;
                          break;
                        }

                        throw this._storedError;

                      case 2:
                        if (!(this._cachedChunks.length > 0)) {
                          _context14.next = 5;
                          break;
                        }

                        chunk = this._cachedChunks.shift();
                        return _context14.abrupt("return", {
                          value: chunk,
                          done: false
                        });

                      case 5:
                        if (!this._done) {
                          _context14.next = 7;
                          break;
                        }

                        return _context14.abrupt("return", {
                          value: undefined,
                          done: true
                        });

                      case 7:
                        requestCapability = (0, _util.createPromiseCapability)();

                        this._requests.push(requestCapability);

                        return _context14.abrupt("return", requestCapability.promise);

                      case 10:
                      case "end":
                        return _context14.stop();
                    }
                  }
                }, _callee14, this);
              }));

              function read() {
                return _read5.apply(this, arguments);
              }

              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              this._done = true;

              this._headersReceivedCapability.reject(reason);

              var _iteratorNormalCompletion72 = true;
              var _didIteratorError72 = false;
              var _iteratorError72 = undefined;

              try {
                for (var _iterator72 = this._requests[Symbol.iterator](), _step72; !(_iteratorNormalCompletion72 = (_step72 = _iterator72.next()).done); _iteratorNormalCompletion72 = true) {
                  var requestCapability = _step72.value;
                  requestCapability.resolve({
                    value: undefined,
                    done: true
                  });
                }
              } catch (err) {
                _didIteratorError72 = true;
                _iteratorError72 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion72 && _iterator72["return"] != null) {
                    _iterator72["return"]();
                  }
                } finally {
                  if (_didIteratorError72) {
                    throw _iteratorError72;
                  }
                }
              }

              this._requests.length = 0;

              if (this._manager.isPendingRequest(this._fullRequestId)) {
                this._manager.abortRequest(this._fullRequestId);
              }

              this._fullRequestReader = null;
            }
          }, {
            key: "filename",
            get: function get() {
              return this._filename;
            }
          }, {
            key: "isRangeSupported",
            get: function get() {
              return this._isRangeSupported;
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return this._isStreamingSupported;
            }
          }, {
            key: "contentLength",
            get: function get() {
              return this._contentLength;
            }
          }, {
            key: "headersReady",
            get: function get() {
              return this._headersReceivedCapability.promise;
            }
          }]);

          return PDFNetworkStreamFullRequestReader;
        }();

        var PDFNetworkStreamRangeRequestReader =
        /*#__PURE__*/
        function () {
          function PDFNetworkStreamRangeRequestReader(manager, begin, end) {
            _classCallCheck(this, PDFNetworkStreamRangeRequestReader);

            this._manager = manager;
            var args = {
              onDone: this._onDone.bind(this),
              onProgress: this._onProgress.bind(this)
            };
            this._requestId = manager.requestRange(begin, end, args);
            this._requests = [];
            this._queuedChunk = null;
            this._done = false;
            this.onProgress = null;
            this.onClosed = null;
          }

          _createClass(PDFNetworkStreamRangeRequestReader, [{
            key: "_close",
            value: function _close() {
              if (this.onClosed) {
                this.onClosed(this);
              }
            }
          }, {
            key: "_onDone",
            value: function _onDone(data) {
              var chunk = data.chunk;

              if (this._requests.length > 0) {
                var requestCapability = this._requests.shift();

                requestCapability.resolve({
                  value: chunk,
                  done: false
                });
              } else {
                this._queuedChunk = chunk;
              }

              this._done = true;
              var _iteratorNormalCompletion73 = true;
              var _didIteratorError73 = false;
              var _iteratorError73 = undefined;

              try {
                for (var _iterator73 = this._requests[Symbol.iterator](), _step73; !(_iteratorNormalCompletion73 = (_step73 = _iterator73.next()).done); _iteratorNormalCompletion73 = true) {
                  var _requestCapability2 = _step73.value;

                  _requestCapability2.resolve({
                    value: undefined,
                    done: true
                  });
                }
              } catch (err) {
                _didIteratorError73 = true;
                _iteratorError73 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion73 && _iterator73["return"] != null) {
                    _iterator73["return"]();
                  }
                } finally {
                  if (_didIteratorError73) {
                    throw _iteratorError73;
                  }
                }
              }

              this._requests.length = 0;

              this._close();
            }
          }, {
            key: "_onProgress",
            value: function _onProgress(evt) {
              if (!this.isStreamingSupported && this.onProgress) {
                this.onProgress({
                  loaded: evt.loaded
                });
              }
            }
          }, {
            key: "read",
            value: function () {
              var _read6 = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee15() {
                var chunk, requestCapability;
                return regeneratorRuntime.wrap(function _callee15$(_context15) {
                  while (1) {
                    switch (_context15.prev = _context15.next) {
                      case 0:
                        if (!(this._queuedChunk !== null)) {
                          _context15.next = 4;
                          break;
                        }

                        chunk = this._queuedChunk;
                        this._queuedChunk = null;
                        return _context15.abrupt("return", {
                          value: chunk,
                          done: false
                        });

                      case 4:
                        if (!this._done) {
                          _context15.next = 6;
                          break;
                        }

                        return _context15.abrupt("return", {
                          value: undefined,
                          done: true
                        });

                      case 6:
                        requestCapability = (0, _util.createPromiseCapability)();

                        this._requests.push(requestCapability);

                        return _context15.abrupt("return", requestCapability.promise);

                      case 9:
                      case "end":
                        return _context15.stop();
                    }
                  }
                }, _callee15, this);
              }));

              function read() {
                return _read6.apply(this, arguments);
              }

              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              this._done = true;
              var _iteratorNormalCompletion74 = true;
              var _didIteratorError74 = false;
              var _iteratorError74 = undefined;

              try {
                for (var _iterator74 = this._requests[Symbol.iterator](), _step74; !(_iteratorNormalCompletion74 = (_step74 = _iterator74.next()).done); _iteratorNormalCompletion74 = true) {
                  var requestCapability = _step74.value;
                  requestCapability.resolve({
                    value: undefined,
                    done: true
                  });
                }
              } catch (err) {
                _didIteratorError74 = true;
                _iteratorError74 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion74 && _iterator74["return"] != null) {
                    _iterator74["return"]();
                  }
                } finally {
                  if (_didIteratorError74) {
                    throw _iteratorError74;
                  }
                }
              }

              this._requests.length = 0;

              if (this._manager.isPendingRequest(this._requestId)) {
                this._manager.abortRequest(this._requestId);
              }

              this._close();
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return false;
            }
          }]);

          return PDFNetworkStreamRangeRequestReader;
        }();
        /***/

      },
      /* 26 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFFetchStream = void 0;

        var _util = __w_pdfjs_require__(2);

        var _network_utils = __w_pdfjs_require__(23);

        ;

        function createFetchOptions(headers, withCredentials, abortController) {
          return {
            method: "GET",
            headers: headers,
            signal: abortController === null || abortController === void 0 ? void 0 : abortController.signal,
            mode: "cors",
            credentials: withCredentials ? "include" : "same-origin",
            redirect: "follow"
          };
        }

        function createHeaders(httpHeaders) {
          var headers = new Headers();

          for (var property in httpHeaders) {
            var value = httpHeaders[property];

            if (typeof value === "undefined") {
              continue;
            }

            headers.append(property, value);
          }

          return headers;
        }

        var PDFFetchStream =
        /*#__PURE__*/
        function () {
          function PDFFetchStream(source) {
            _classCallCheck(this, PDFFetchStream);

            this.source = source;
            this.isHttp = /^https?:/i.test(source.url);
            this.httpHeaders = this.isHttp && source.httpHeaders || {};
            this._fullRequestReader = null;
            this._rangeRequestReaders = [];
          }

          _createClass(PDFFetchStream, [{
            key: "getFullReader",
            value: function getFullReader() {
              (0, _util.assert)(!this._fullRequestReader, "PDFFetchStream.getFullReader can only be called once.");
              this._fullRequestReader = new PDFFetchStreamReader(this);
              return this._fullRequestReader;
            }
          }, {
            key: "getRangeReader",
            value: function getRangeReader(begin, end) {
              if (end <= this._progressiveDataLength) {
                return null;
              }

              var reader = new PDFFetchStreamRangeReader(this, begin, end);

              this._rangeRequestReaders.push(reader);

              return reader;
            }
          }, {
            key: "cancelAllRequests",
            value: function cancelAllRequests(reason) {
              if (this._fullRequestReader) {
                this._fullRequestReader.cancel(reason);
              }

              var _iteratorNormalCompletion75 = true;
              var _didIteratorError75 = false;
              var _iteratorError75 = undefined;

              try {
                for (var _iterator75 = this._rangeRequestReaders.slice(0)[Symbol.iterator](), _step75; !(_iteratorNormalCompletion75 = (_step75 = _iterator75.next()).done); _iteratorNormalCompletion75 = true) {
                  var reader = _step75.value;
                  reader.cancel(reason);
                }
              } catch (err) {
                _didIteratorError75 = true;
                _iteratorError75 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion75 && _iterator75["return"] != null) {
                    _iterator75["return"]();
                  }
                } finally {
                  if (_didIteratorError75) {
                    throw _iteratorError75;
                  }
                }
              }
            }
          }, {
            key: "_progressiveDataLength",
            get: function get() {
              var _ref63, _this$_fullRequestRea3;

              return (_ref63 = (_this$_fullRequestRea3 = this._fullRequestReader) === null || _this$_fullRequestRea3 === void 0 ? void 0 : _this$_fullRequestRea3._loaded) !== null && _ref63 !== void 0 ? _ref63 : 0;
            }
          }]);

          return PDFFetchStream;
        }();

        exports.PDFFetchStream = PDFFetchStream;

        var PDFFetchStreamReader =
        /*#__PURE__*/
        function () {
          function PDFFetchStreamReader(stream) {
            var _this55 = this;

            _classCallCheck(this, PDFFetchStreamReader);

            this._stream = stream;
            this._reader = null;
            this._loaded = 0;
            this._filename = null;
            var source = stream.source;
            this._withCredentials = source.withCredentials || false;
            this._contentLength = source.length;
            this._headersCapability = (0, _util.createPromiseCapability)();
            this._disableRange = source.disableRange || false;
            this._rangeChunkSize = source.rangeChunkSize;

            if (!this._rangeChunkSize && !this._disableRange) {
              this._disableRange = true;
            }

            if (typeof AbortController !== "undefined") {
              this._abortController = new AbortController();
            }

            this._isStreamingSupported = !source.disableStream;
            this._isRangeSupported = !source.disableRange;
            this._headers = createHeaders(this._stream.httpHeaders);
            var url = source.url;
            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(function (response) {
              if (!(0, _network_utils.validateResponseStatus)(response.status)) {
                throw (0, _network_utils.createResponseStatusError)(response.status, url);
              }

              _this55._reader = response.body.getReader();

              _this55._headersCapability.resolve();

              var getResponseHeader = function getResponseHeader(name) {
                return response.headers.get(name);
              };

              var _ref64 = (0, _network_utils.validateRangeRequestCapabilities)({
                getResponseHeader: getResponseHeader,
                isHttp: _this55._stream.isHttp,
                rangeChunkSize: _this55._rangeChunkSize,
                disableRange: _this55._disableRange
              }),
                  allowRangeRequests = _ref64.allowRangeRequests,
                  suggestedLength = _ref64.suggestedLength;

              _this55._isRangeSupported = allowRangeRequests;
              _this55._contentLength = suggestedLength || _this55._contentLength;
              _this55._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);

              if (!_this55._isStreamingSupported && _this55._isRangeSupported) {
                _this55.cancel(new _util.AbortException("Streaming is disabled."));
              }
            })["catch"](this._headersCapability.reject);
            this.onProgress = null;
          }

          _createClass(PDFFetchStreamReader, [{
            key: "read",
            value: function () {
              var _read7 = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee16() {
                var _ref65, value, done, buffer;

                return regeneratorRuntime.wrap(function _callee16$(_context16) {
                  while (1) {
                    switch (_context16.prev = _context16.next) {
                      case 0:
                        _context16.next = 2;
                        return this._headersCapability.promise;

                      case 2:
                        _context16.next = 4;
                        return this._reader.read();

                      case 4:
                        _ref65 = _context16.sent;
                        value = _ref65.value;
                        done = _ref65.done;

                        if (!done) {
                          _context16.next = 9;
                          break;
                        }

                        return _context16.abrupt("return", {
                          value: value,
                          done: done
                        });

                      case 9:
                        this._loaded += value.byteLength;

                        if (this.onProgress) {
                          this.onProgress({
                            loaded: this._loaded,
                            total: this._contentLength
                          });
                        }

                        buffer = new Uint8Array(value).buffer;
                        return _context16.abrupt("return", {
                          value: buffer,
                          done: false
                        });

                      case 13:
                      case "end":
                        return _context16.stop();
                    }
                  }
                }, _callee16, this);
              }));

              function read() {
                return _read7.apply(this, arguments);
              }

              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              if (this._reader) {
                this._reader.cancel(reason);
              }

              if (this._abortController) {
                this._abortController.abort();
              }
            }
          }, {
            key: "headersReady",
            get: function get() {
              return this._headersCapability.promise;
            }
          }, {
            key: "filename",
            get: function get() {
              return this._filename;
            }
          }, {
            key: "contentLength",
            get: function get() {
              return this._contentLength;
            }
          }, {
            key: "isRangeSupported",
            get: function get() {
              return this._isRangeSupported;
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return this._isStreamingSupported;
            }
          }]);

          return PDFFetchStreamReader;
        }();

        var PDFFetchStreamRangeReader =
        /*#__PURE__*/
        function () {
          function PDFFetchStreamRangeReader(stream, begin, end) {
            var _this56 = this;

            _classCallCheck(this, PDFFetchStreamRangeReader);

            this._stream = stream;
            this._reader = null;
            this._loaded = 0;
            var source = stream.source;
            this._withCredentials = source.withCredentials || false;
            this._readCapability = (0, _util.createPromiseCapability)();
            this._isStreamingSupported = !source.disableStream;

            if (typeof AbortController !== "undefined") {
              this._abortController = new AbortController();
            }

            this._headers = createHeaders(this._stream.httpHeaders);

            this._headers.append("Range", "bytes=".concat(begin, "-").concat(end - 1));

            var url = source.url;
            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(function (response) {
              if (!(0, _network_utils.validateResponseStatus)(response.status)) {
                throw (0, _network_utils.createResponseStatusError)(response.status, url);
              }

              _this56._readCapability.resolve();

              _this56._reader = response.body.getReader();
            })["catch"](function (reason) {
              if ((reason === null || reason === void 0 ? void 0 : reason.name) === "AbortError") {
                return;
              }

              throw reason;
            });
            this.onProgress = null;
          }

          _createClass(PDFFetchStreamRangeReader, [{
            key: "read",
            value: function () {
              var _read8 = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee17() {
                var _ref66, value, done, buffer;

                return regeneratorRuntime.wrap(function _callee17$(_context17) {
                  while (1) {
                    switch (_context17.prev = _context17.next) {
                      case 0:
                        _context17.next = 2;
                        return this._readCapability.promise;

                      case 2:
                        _context17.next = 4;
                        return this._reader.read();

                      case 4:
                        _ref66 = _context17.sent;
                        value = _ref66.value;
                        done = _ref66.done;

                        if (!done) {
                          _context17.next = 9;
                          break;
                        }

                        return _context17.abrupt("return", {
                          value: value,
                          done: done
                        });

                      case 9:
                        this._loaded += value.byteLength;

                        if (this.onProgress) {
                          this.onProgress({
                            loaded: this._loaded
                          });
                        }

                        buffer = new Uint8Array(value).buffer;
                        return _context17.abrupt("return", {
                          value: buffer,
                          done: false
                        });

                      case 13:
                      case "end":
                        return _context17.stop();
                    }
                  }
                }, _callee17, this);
              }));

              function read() {
                return _read8.apply(this, arguments);
              }

              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              if (this._reader) {
                this._reader.cancel(reason);
              }

              if (this._abortController) {
                this._abortController.abort();
              }
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return this._isStreamingSupported;
            }
          }]);

          return PDFFetchStreamRangeReader;
        }();
        /***/

      }
      /******/
      ];
      /************************************************************************/

      /******/
      // The module cache

      /******/

      var __webpack_module_cache__ = {};
      /******/

      /******/
      // The require function

      /******/

      function __w_pdfjs_require__(moduleId) {
        /******/
        // Check if module is in cache

        /******/
        var cachedModule = __webpack_module_cache__[moduleId];
        /******/

        if (cachedModule !== undefined) {
          /******/
          return cachedModule.exports;
          /******/
        }
        /******/
        // Create a new module (and put it into the cache)

        /******/


        var module = __webpack_module_cache__[moduleId] = {
          /******/
          // no module.id needed

          /******/
          // no module.loaded needed

          /******/
          exports: {}
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        __webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);
        /******/

        /******/
        // Return the exports of the module

        /******/


        return module.exports;
        /******/
      }
      /******/

      /************************************************************************/


      var __webpack_exports__ = {}; // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.

      (function () {
        var exports = __webpack_exports__;
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        Object.defineProperty(exports, "addLinkAttributes", {
          enumerable: true,
          get: function get() {
            return _display_utils.addLinkAttributes;
          }
        });
        Object.defineProperty(exports, "getFilenameFromUrl", {
          enumerable: true,
          get: function get() {
            return _display_utils.getFilenameFromUrl;
          }
        });
        Object.defineProperty(exports, "getPdfFilenameFromUrl", {
          enumerable: true,
          get: function get() {
            return _display_utils.getPdfFilenameFromUrl;
          }
        });
        Object.defineProperty(exports, "getXfaPageViewport", {
          enumerable: true,
          get: function get() {
            return _display_utils.getXfaPageViewport;
          }
        });
        Object.defineProperty(exports, "isPdfFile", {
          enumerable: true,
          get: function get() {
            return _display_utils.isPdfFile;
          }
        });
        Object.defineProperty(exports, "LinkTarget", {
          enumerable: true,
          get: function get() {
            return _display_utils.LinkTarget;
          }
        });
        Object.defineProperty(exports, "loadScript", {
          enumerable: true,
          get: function get() {
            return _display_utils.loadScript;
          }
        });
        Object.defineProperty(exports, "PDFDateString", {
          enumerable: true,
          get: function get() {
            return _display_utils.PDFDateString;
          }
        });
        Object.defineProperty(exports, "RenderingCancelledException", {
          enumerable: true,
          get: function get() {
            return _display_utils.RenderingCancelledException;
          }
        });
        Object.defineProperty(exports, "build", {
          enumerable: true,
          get: function get() {
            return _api.build;
          }
        });
        Object.defineProperty(exports, "getDocument", {
          enumerable: true,
          get: function get() {
            return _api.getDocument;
          }
        });
        Object.defineProperty(exports, "LoopbackPort", {
          enumerable: true,
          get: function get() {
            return _api.LoopbackPort;
          }
        });
        Object.defineProperty(exports, "PDFDataRangeTransport", {
          enumerable: true,
          get: function get() {
            return _api.PDFDataRangeTransport;
          }
        });
        Object.defineProperty(exports, "PDFWorker", {
          enumerable: true,
          get: function get() {
            return _api.PDFWorker;
          }
        });
        Object.defineProperty(exports, "version", {
          enumerable: true,
          get: function get() {
            return _api.version;
          }
        });
        Object.defineProperty(exports, "CMapCompressionType", {
          enumerable: true,
          get: function get() {
            return _util.CMapCompressionType;
          }
        });
        Object.defineProperty(exports, "createObjectURL", {
          enumerable: true,
          get: function get() {
            return _util.createObjectURL;
          }
        });
        Object.defineProperty(exports, "createPromiseCapability", {
          enumerable: true,
          get: function get() {
            return _util.createPromiseCapability;
          }
        });
        Object.defineProperty(exports, "createValidAbsoluteUrl", {
          enumerable: true,
          get: function get() {
            return _util.createValidAbsoluteUrl;
          }
        });
        Object.defineProperty(exports, "InvalidPDFException", {
          enumerable: true,
          get: function get() {
            return _util.InvalidPDFException;
          }
        });
        Object.defineProperty(exports, "MissingPDFException", {
          enumerable: true,
          get: function get() {
            return _util.MissingPDFException;
          }
        });
        Object.defineProperty(exports, "OPS", {
          enumerable: true,
          get: function get() {
            return _util.OPS;
          }
        });
        Object.defineProperty(exports, "PasswordResponses", {
          enumerable: true,
          get: function get() {
            return _util.PasswordResponses;
          }
        });
        Object.defineProperty(exports, "PermissionFlag", {
          enumerable: true,
          get: function get() {
            return _util.PermissionFlag;
          }
        });
        Object.defineProperty(exports, "removeNullCharacters", {
          enumerable: true,
          get: function get() {
            return _util.removeNullCharacters;
          }
        });
        Object.defineProperty(exports, "shadow", {
          enumerable: true,
          get: function get() {
            return _util.shadow;
          }
        });
        Object.defineProperty(exports, "UnexpectedResponseException", {
          enumerable: true,
          get: function get() {
            return _util.UnexpectedResponseException;
          }
        });
        Object.defineProperty(exports, "UNSUPPORTED_FEATURES", {
          enumerable: true,
          get: function get() {
            return _util.UNSUPPORTED_FEATURES;
          }
        });
        Object.defineProperty(exports, "Util", {
          enumerable: true,
          get: function get() {
            return _util.Util;
          }
        });
        Object.defineProperty(exports, "VerbosityLevel", {
          enumerable: true,
          get: function get() {
            return _util.VerbosityLevel;
          }
        });
        Object.defineProperty(exports, "AnnotationLayer", {
          enumerable: true,
          get: function get() {
            return _annotation_layer.AnnotationLayer;
          }
        });
        Object.defineProperty(exports, "GlobalWorkerOptions", {
          enumerable: true,
          get: function get() {
            return _worker_options.GlobalWorkerOptions;
          }
        });
        Object.defineProperty(exports, "renderTextLayer", {
          enumerable: true,
          get: function get() {
            return _text_layer.renderTextLayer;
          }
        });
        Object.defineProperty(exports, "SVGGraphics", {
          enumerable: true,
          get: function get() {
            return _svg.SVGGraphics;
          }
        });
        Object.defineProperty(exports, "XfaLayer", {
          enumerable: true,
          get: function get() {
            return _xfa_layer.XfaLayer;
          }
        });

        var _display_utils = __w_pdfjs_require__(1);

        var _api = __w_pdfjs_require__(6);

        var _util = __w_pdfjs_require__(2);

        var _annotation_layer = __w_pdfjs_require__(17);

        var _worker_options = __w_pdfjs_require__(12);

        var _is_node = __w_pdfjs_require__(4);

        var _text_layer = __w_pdfjs_require__(19);

        var _svg = __w_pdfjs_require__(20);

        var _xfa_layer = __w_pdfjs_require__(21);

        var pdfjsVersion = '2.10.377';
        var pdfjsBuild = '156762c48';
        {
          if (_is_node.isNodeJS) {
            var _w_pdfjs_require__ = __w_pdfjs_require__(22),
                PDFNodeStream = _w_pdfjs_require__.PDFNodeStream;

            (0, _api.setPDFNetworkStreamFactory)(function (params) {
              return new PDFNodeStream(params);
            });
          } else {
            var _w_pdfjs_require__2 = __w_pdfjs_require__(25),
                PDFNetworkStream = _w_pdfjs_require__2.PDFNetworkStream;

            var _w_pdfjs_require__3 = __w_pdfjs_require__(26),
                PDFFetchStream = _w_pdfjs_require__3.PDFFetchStream;

            (0, _api.setPDFNetworkStreamFactory)(function (params) {
              if ((0, _display_utils.isValidFetchUrl)(params.url)) {
                return new PDFFetchStream(params);
              }

              return new PDFNetworkStream(params);
            });
          }
        }
      })();
      /******/


      return __webpack_exports__;
      /******/
    }()
  );
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(168), __webpack_require__(169).Buffer, __webpack_require__(173)(module)))

/***/ }),
/* 168 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(170)
var ieee754 = __webpack_require__(171)
var isArray = __webpack_require__(172)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(132)))

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),
/* 171 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 172 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 173 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 174 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 175 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 176 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 177 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 178 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 179 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(setImmediate, process) {(function (global, factory) {
     true ? factory(exports) :
    undefined;
}(this, (function (exports) { 'use strict';

    /**
     * Creates a continuation function with some arguments already applied.
     *
     * Useful as a shorthand when combined with other control flow functions. Any
     * arguments passed to the returned function are added to the arguments
     * originally passed to apply.
     *
     * @name apply
     * @static
     * @memberOf module:Utils
     * @method
     * @category Util
     * @param {Function} fn - The function you want to eventually apply all
     * arguments to. Invokes with (arguments...).
     * @param {...*} arguments... - Any number of arguments to automatically apply
     * when the continuation is called.
     * @returns {Function} the partially-applied function
     * @example
     *
     * // using apply
     * async.parallel([
     *     async.apply(fs.writeFile, 'testfile1', 'test1'),
     *     async.apply(fs.writeFile, 'testfile2', 'test2')
     * ]);
     *
     *
     * // the same process without using apply
     * async.parallel([
     *     function(callback) {
     *         fs.writeFile('testfile1', 'test1', callback);
     *     },
     *     function(callback) {
     *         fs.writeFile('testfile2', 'test2', callback);
     *     }
     * ]);
     *
     * // It's possible to pass any number of additional arguments when calling the
     * // continuation:
     *
     * node> var fn = async.apply(sys.puts, 'one');
     * node> fn('two', 'three');
     * one
     * two
     * three
     */
    function apply(fn, ...args) {
        return (...callArgs) => fn(...args,...callArgs);
    }

    function initialParams (fn) {
        return function (...args/*, callback*/) {
            var callback = args.pop();
            return fn.call(this, args, callback);
        };
    }

    /* istanbul ignore file */

    var hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;
    var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
    var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';

    function fallback(fn) {
        setTimeout(fn, 0);
    }

    function wrap(defer) {
        return (fn, ...args) => defer(() => fn(...args));
    }

    var _defer;

    if (hasQueueMicrotask) {
        _defer = queueMicrotask;
    } else if (hasSetImmediate) {
        _defer = setImmediate;
    } else if (hasNextTick) {
        _defer = process.nextTick;
    } else {
        _defer = fallback;
    }

    var setImmediate$1 = wrap(_defer);

    /**
     * Take a sync function and make it async, passing its return value to a
     * callback. This is useful for plugging sync functions into a waterfall,
     * series, or other async functions. Any arguments passed to the generated
     * function will be passed to the wrapped function (except for the final
     * callback argument). Errors thrown will be passed to the callback.
     *
     * If the function passed to `asyncify` returns a Promise, that promises's
     * resolved/rejected state will be used to call the callback, rather than simply
     * the synchronous return value.
     *
     * This also means you can asyncify ES2017 `async` functions.
     *
     * @name asyncify
     * @static
     * @memberOf module:Utils
     * @method
     * @alias wrapSync
     * @category Util
     * @param {Function} func - The synchronous function, or Promise-returning
     * function to convert to an {@link AsyncFunction}.
     * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
     * invoked with `(args..., callback)`.
     * @example
     *
     * // passing a regular synchronous function
     * async.waterfall([
     *     async.apply(fs.readFile, filename, "utf8"),
     *     async.asyncify(JSON.parse),
     *     function (data, next) {
     *         // data is the result of parsing the text.
     *         // If there was a parsing error, it would have been caught.
     *     }
     * ], callback);
     *
     * // passing a function returning a promise
     * async.waterfall([
     *     async.apply(fs.readFile, filename, "utf8"),
     *     async.asyncify(function (contents) {
     *         return db.model.create(contents);
     *     }),
     *     function (model, next) {
     *         // `model` is the instantiated model object.
     *         // If there was an error, this function would be skipped.
     *     }
     * ], callback);
     *
     * // es2017 example, though `asyncify` is not needed if your JS environment
     * // supports async functions out of the box
     * var q = async.queue(async.asyncify(async function(file) {
     *     var intermediateStep = await processFile(file);
     *     return await somePromise(intermediateStep)
     * }));
     *
     * q.push(files);
     */
    function asyncify(func) {
        if (isAsync(func)) {
            return function (...args/*, callback*/) {
                const callback = args.pop();
                const promise = func.apply(this, args);
                return handlePromise(promise, callback)
            }
        }

        return initialParams(function (args, callback) {
            var result;
            try {
                result = func.apply(this, args);
            } catch (e) {
                return callback(e);
            }
            // if result is Promise object
            if (result && typeof result.then === 'function') {
                return handlePromise(result, callback)
            } else {
                callback(null, result);
            }
        });
    }

    function handlePromise(promise, callback) {
        return promise.then(value => {
            invokeCallback(callback, null, value);
        }, err => {
            invokeCallback(callback, err && err.message ? err : new Error(err));
        });
    }

    function invokeCallback(callback, error, value) {
        try {
            callback(error, value);
        } catch (err) {
            setImmediate$1(e => { throw e }, err);
        }
    }

    function isAsync(fn) {
        return fn[Symbol.toStringTag] === 'AsyncFunction';
    }

    function isAsyncGenerator(fn) {
        return fn[Symbol.toStringTag] === 'AsyncGenerator';
    }

    function isAsyncIterable(obj) {
        return typeof obj[Symbol.asyncIterator] === 'function';
    }

    function wrapAsync(asyncFn) {
        if (typeof asyncFn !== 'function') throw new Error('expected a function')
        return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;
    }

    // conditionally promisify a function.
    // only return a promise if a callback is omitted
    function awaitify (asyncFn, arity = asyncFn.length) {
        if (!arity) throw new Error('arity is undefined')
        function awaitable (...args) {
            if (typeof args[arity - 1] === 'function') {
                return asyncFn.apply(this, args)
            }

            return new Promise((resolve, reject) => {
                args[arity - 1] = (err, ...cbArgs) => {
                    if (err) return reject(err)
                    resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);
                };
                asyncFn.apply(this, args);
            })
        }

        return awaitable
    }

    function applyEach (eachfn) {
        return function applyEach(fns, ...callArgs) {
            const go = awaitify(function (callback) {
                var that = this;
                return eachfn(fns, (fn, cb) => {
                    wrapAsync(fn).apply(that, callArgs.concat(cb));
                }, callback);
            });
            return go;
        };
    }

    function _asyncMap(eachfn, arr, iteratee, callback) {
        arr = arr || [];
        var results = [];
        var counter = 0;
        var _iteratee = wrapAsync(iteratee);

        return eachfn(arr, (value, _, iterCb) => {
            var index = counter++;
            _iteratee(value, (err, v) => {
                results[index] = v;
                iterCb(err);
            });
        }, err => {
            callback(err, results);
        });
    }

    function isArrayLike(value) {
        return value &&
            typeof value.length === 'number' &&
            value.length >= 0 &&
            value.length % 1 === 0;
    }

    // A temporary value used to identify if the loop should be broken.
    // See #1064, #1293
    const breakLoop = {};

    function once(fn) {
        function wrapper (...args) {
            if (fn === null) return;
            var callFn = fn;
            fn = null;
            callFn.apply(this, args);
        }
        Object.assign(wrapper, fn);
        return wrapper
    }

    function getIterator (coll) {
        return coll[Symbol.iterator] && coll[Symbol.iterator]();
    }

    function createArrayIterator(coll) {
        var i = -1;
        var len = coll.length;
        return function next() {
            return ++i < len ? {value: coll[i], key: i} : null;
        }
    }

    function createES2015Iterator(iterator) {
        var i = -1;
        return function next() {
            var item = iterator.next();
            if (item.done)
                return null;
            i++;
            return {value: item.value, key: i};
        }
    }

    function createObjectIterator(obj) {
        var okeys = obj ? Object.keys(obj) : [];
        var i = -1;
        var len = okeys.length;
        return function next() {
            var key = okeys[++i];
            if (key === '__proto__') {
                return next();
            }
            return i < len ? {value: obj[key], key} : null;
        };
    }

    function createIterator(coll) {
        if (isArrayLike(coll)) {
            return createArrayIterator(coll);
        }

        var iterator = getIterator(coll);
        return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
    }

    function onlyOnce(fn) {
        return function (...args) {
            if (fn === null) throw new Error("Callback was already called.");
            var callFn = fn;
            fn = null;
            callFn.apply(this, args);
        };
    }

    // for async generators
    function asyncEachOfLimit(generator, limit, iteratee, callback) {
        let done = false;
        let canceled = false;
        let awaiting = false;
        let running = 0;
        let idx = 0;

        function replenish() {
            //console.log('replenish')
            if (running >= limit || awaiting || done) return
            //console.log('replenish awaiting')
            awaiting = true;
            generator.next().then(({value, done: iterDone}) => {
                //console.log('got value', value)
                if (canceled || done) return
                awaiting = false;
                if (iterDone) {
                    done = true;
                    if (running <= 0) {
                        //console.log('done nextCb')
                        callback(null);
                    }
                    return;
                }
                running++;
                iteratee(value, idx, iterateeCallback);
                idx++;
                replenish();
            }).catch(handleError);
        }

        function iterateeCallback(err, result) {
            //console.log('iterateeCallback')
            running -= 1;
            if (canceled) return
            if (err) return handleError(err)

            if (err === false) {
                done = true;
                canceled = true;
                return
            }

            if (result === breakLoop || (done && running <= 0)) {
                done = true;
                //console.log('done iterCb')
                return callback(null);
            }
            replenish();
        }

        function handleError(err) {
            if (canceled) return
            awaiting = false;
            done = true;
            callback(err);
        }

        replenish();
    }

    var eachOfLimit = (limit) => {
        return (obj, iteratee, callback) => {
            callback = once(callback);
            if (limit <= 0) {
                throw new RangeError('concurrency limit cannot be less than 1')
            }
            if (!obj) {
                return callback(null);
            }
            if (isAsyncGenerator(obj)) {
                return asyncEachOfLimit(obj, limit, iteratee, callback)
            }
            if (isAsyncIterable(obj)) {
                return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)
            }
            var nextElem = createIterator(obj);
            var done = false;
            var canceled = false;
            var running = 0;
            var looping = false;

            function iterateeCallback(err, value) {
                if (canceled) return
                running -= 1;
                if (err) {
                    done = true;
                    callback(err);
                }
                else if (err === false) {
                    done = true;
                    canceled = true;
                }
                else if (value === breakLoop || (done && running <= 0)) {
                    done = true;
                    return callback(null);
                }
                else if (!looping) {
                    replenish();
                }
            }

            function replenish () {
                looping = true;
                while (running < limit && !done) {
                    var elem = nextElem();
                    if (elem === null) {
                        done = true;
                        if (running <= 0) {
                            callback(null);
                        }
                        return;
                    }
                    running += 1;
                    iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
                }
                looping = false;
            }

            replenish();
        };
    };

    /**
     * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
     * time.
     *
     * @name eachOfLimit
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.eachOf]{@link module:Collections.eachOf}
     * @alias forEachOfLimit
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {number} limit - The maximum number of async operations at a time.
     * @param {AsyncFunction} iteratee - An async function to apply to each
     * item in `coll`. The `key` is the item's key, or index in the case of an
     * array.
     * Invoked with (item, key, callback).
     * @param {Function} [callback] - A callback which is called when all
     * `iteratee` functions have finished, or an error occurs. Invoked with (err).
     * @returns {Promise} a promise, if a callback is omitted
     */
    function eachOfLimit$1(coll, limit, iteratee, callback) {
        return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);
    }

    var eachOfLimit$2 = awaitify(eachOfLimit$1, 4);

    // eachOf implementation optimized for array-likes
    function eachOfArrayLike(coll, iteratee, callback) {
        callback = once(callback);
        var index = 0,
            completed = 0,
            {length} = coll,
            canceled = false;
        if (length === 0) {
            callback(null);
        }

        function iteratorCallback(err, value) {
            if (err === false) {
                canceled = true;
            }
            if (canceled === true) return
            if (err) {
                callback(err);
            } else if ((++completed === length) || value === breakLoop) {
                callback(null);
            }
        }

        for (; index < length; index++) {
            iteratee(coll[index], index, onlyOnce(iteratorCallback));
        }
    }

    // a generic version of eachOf which can handle array, object, and iterator cases.
    function eachOfGeneric (coll, iteratee, callback) {
        return eachOfLimit$2(coll, Infinity, iteratee, callback);
    }

    /**
     * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
     * to the iteratee.
     *
     * @name eachOf
     * @static
     * @memberOf module:Collections
     * @method
     * @alias forEachOf
     * @category Collection
     * @see [async.each]{@link module:Collections.each}
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {AsyncFunction} iteratee - A function to apply to each
     * item in `coll`.
     * The `key` is the item's key, or index in the case of an array.
     * Invoked with (item, key, callback).
     * @param {Function} [callback] - A callback which is called when all
     * `iteratee` functions have finished, or an error occurs. Invoked with (err).
     * @returns {Promise} a promise, if a callback is omitted
     * @example
     *
     * // dev.json is a file containing a valid json object config for dev environment
     * // dev.json is a file containing a valid json object config for test environment
     * // prod.json is a file containing a valid json object config for prod environment
     * // invalid.json is a file with a malformed json object
     *
     * let configs = {}; //global variable
     * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};
     * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};
     *
     * // asynchronous function that reads a json file and parses the contents as json object
     * function parseFile(file, key, callback) {
     *     fs.readFile(file, "utf8", function(err, data) {
     *         if (err) return calback(err);
     *         try {
     *             configs[key] = JSON.parse(data);
     *         } catch (e) {
     *             return callback(e);
     *         }
     *         callback();
     *     });
     * }
     *
     * // Using callbacks
     * async.forEachOf(validConfigFileMap, parseFile, function (err) {
     *     if (err) {
     *         console.error(err);
     *     } else {
     *         console.log(configs);
     *         // configs is now a map of JSON data, e.g.
     *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
     *     }
     * });
     *
     * //Error handing
     * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {
     *     if (err) {
     *         console.error(err);
     *         // JSON parse error exception
     *     } else {
     *         console.log(configs);
     *     }
     * });
     *
     * // Using Promises
     * async.forEachOf(validConfigFileMap, parseFile)
     * .then( () => {
     *     console.log(configs);
     *     // configs is now a map of JSON data, e.g.
     *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
     * }).catch( err => {
     *     console.error(err);
     * });
     *
     * //Error handing
     * async.forEachOf(invalidConfigFileMap, parseFile)
     * .then( () => {
     *     console.log(configs);
     * }).catch( err => {
     *     console.error(err);
     *     // JSON parse error exception
     * });
     *
     * // Using async/await
     * async () => {
     *     try {
     *         let result = await async.forEachOf(validConfigFileMap, parseFile);
     *         console.log(configs);
     *         // configs is now a map of JSON data, e.g.
     *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     * //Error handing
     * async () => {
     *     try {
     *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);
     *         console.log(configs);
     *     }
     *     catch (err) {
     *         console.log(err);
     *         // JSON parse error exception
     *     }
     * }
     *
     */
    function eachOf(coll, iteratee, callback) {
        var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
        return eachOfImplementation(coll, wrapAsync(iteratee), callback);
    }

    var eachOf$1 = awaitify(eachOf, 3);

    /**
     * Produces a new collection of values by mapping each value in `coll` through
     * the `iteratee` function. The `iteratee` is called with an item from `coll`
     * and a callback for when it has finished processing. Each of these callbacks
     * takes 2 arguments: an `error`, and the transformed item from `coll`. If
     * `iteratee` passes an error to its callback, the main `callback` (for the
     * `map` function) is immediately called with the error.
     *
     * Note, that since this function applies the `iteratee` to each item in
     * parallel, there is no guarantee that the `iteratee` functions will complete
     * in order. However, the results array will be in the same order as the
     * original `coll`.
     *
     * If `map` is passed an Object, the results will be an Array.  The results
     * will roughly be in the order of the original Objects' keys (but this can
     * vary across JavaScript engines).
     *
     * @name map
     * @static
     * @memberOf module:Collections
     * @method
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {AsyncFunction} iteratee - An async function to apply to each item in
     * `coll`.
     * The iteratee should complete with the transformed item.
     * Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called when all `iteratee`
     * functions have finished, or an error occurs. Results is an Array of the
     * transformed items from the `coll`. Invoked with (err, results).
     * @returns {Promise} a promise, if no callback is passed
     * @example
     *
     * // file1.txt is a file that is 1000 bytes in size
     * // file2.txt is a file that is 2000 bytes in size
     * // file3.txt is a file that is 3000 bytes in size
     * // file4.txt does not exist
     *
     * const fileList = ['file1.txt','file2.txt','file3.txt'];
     * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];
     *
     * // asynchronous function that returns the file size in bytes
     * function getFileSizeInBytes(file, callback) {
     *     fs.stat(file, function(err, stat) {
     *         if (err) {
     *             return callback(err);
     *         }
     *         callback(null, stat.size);
     *     });
     * }
     *
     * // Using callbacks
     * async.map(fileList, getFileSizeInBytes, function(err, results) {
     *     if (err) {
     *         console.log(err);
     *     } else {
     *         console.log(results);
     *         // results is now an array of the file size in bytes for each file, e.g.
     *         // [ 1000, 2000, 3000]
     *     }
     * });
     *
     * // Error Handling
     * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {
     *     if (err) {
     *         console.log(err);
     *         // [ Error: ENOENT: no such file or directory ]
     *     } else {
     *         console.log(results);
     *     }
     * });
     *
     * // Using Promises
     * async.map(fileList, getFileSizeInBytes)
     * .then( results => {
     *     console.log(results);
     *     // results is now an array of the file size in bytes for each file, e.g.
     *     // [ 1000, 2000, 3000]
     * }).catch( err => {
     *     console.log(err);
     * });
     *
     * // Error Handling
     * async.map(withMissingFileList, getFileSizeInBytes)
     * .then( results => {
     *     console.log(results);
     * }).catch( err => {
     *     console.log(err);
     *     // [ Error: ENOENT: no such file or directory ]
     * });
     *
     * // Using async/await
     * async () => {
     *     try {
     *         let results = await async.map(fileList, getFileSizeInBytes);
     *         console.log(results);
     *         // results is now an array of the file size in bytes for each file, e.g.
     *         // [ 1000, 2000, 3000]
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     * // Error Handling
     * async () => {
     *     try {
     *         let results = await async.map(withMissingFileList, getFileSizeInBytes);
     *         console.log(results);
     *     }
     *     catch (err) {
     *         console.log(err);
     *         // [ Error: ENOENT: no such file or directory ]
     *     }
     * }
     *
     */
    function map (coll, iteratee, callback) {
        return _asyncMap(eachOf$1, coll, iteratee, callback)
    }
    var map$1 = awaitify(map, 3);

    /**
     * Applies the provided arguments to each function in the array, calling
     * `callback` after all functions have completed. If you only provide the first
     * argument, `fns`, then it will return a function which lets you pass in the
     * arguments as if it were a single function call. If more arguments are
     * provided, `callback` is required while `args` is still optional. The results
     * for each of the applied async functions are passed to the final callback
     * as an array.
     *
     * @name applyEach
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @category Control Flow
     * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s
     * to all call with the same arguments
     * @param {...*} [args] - any number of separate arguments to pass to the
     * function.
     * @param {Function} [callback] - the final argument should be the callback,
     * called when all functions have completed processing.
     * @returns {AsyncFunction} - Returns a function that takes no args other than
     * an optional callback, that is the result of applying the `args` to each
     * of the functions.
     * @example
     *
     * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')
     *
     * appliedFn((err, results) => {
     *     // results[0] is the results for `enableSearch`
     *     // results[1] is the results for `updateSchema`
     * });
     *
     * // partial application example:
     * async.each(
     *     buckets,
     *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),
     *     callback
     * );
     */
    var applyEach$1 = applyEach(map$1);

    /**
     * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
     *
     * @name eachOfSeries
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.eachOf]{@link module:Collections.eachOf}
     * @alias forEachOfSeries
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {AsyncFunction} iteratee - An async function to apply to each item in
     * `coll`.
     * Invoked with (item, key, callback).
     * @param {Function} [callback] - A callback which is called when all `iteratee`
     * functions have finished, or an error occurs. Invoked with (err).
     * @returns {Promise} a promise, if a callback is omitted
     */
    function eachOfSeries(coll, iteratee, callback) {
        return eachOfLimit$2(coll, 1, iteratee, callback)
    }
    var eachOfSeries$1 = awaitify(eachOfSeries, 3);

    /**
     * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.
     *
     * @name mapSeries
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.map]{@link module:Collections.map}
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {AsyncFunction} iteratee - An async function to apply to each item in
     * `coll`.
     * The iteratee should complete with the transformed item.
     * Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called when all `iteratee`
     * functions have finished, or an error occurs. Results is an array of the
     * transformed items from the `coll`. Invoked with (err, results).
     * @returns {Promise} a promise, if no callback is passed
     */
    function mapSeries (coll, iteratee, callback) {
        return _asyncMap(eachOfSeries$1, coll, iteratee, callback)
    }
    var mapSeries$1 = awaitify(mapSeries, 3);

    /**
     * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.
     *
     * @name applyEachSeries
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @see [async.applyEach]{@link module:ControlFlow.applyEach}
     * @category Control Flow
     * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all
     * call with the same arguments
     * @param {...*} [args] - any number of separate arguments to pass to the
     * function.
     * @param {Function} [callback] - the final argument should be the callback,
     * called when all functions have completed processing.
     * @returns {AsyncFunction} - A function, that when called, is the result of
     * appling the `args` to the list of functions.  It takes no args, other than
     * a callback.
     */
    var applyEachSeries = applyEach(mapSeries$1);

    const PROMISE_SYMBOL = Symbol('promiseCallback');

    function promiseCallback () {
        let resolve, reject;
        function callback (err, ...args) {
            if (err) return reject(err)
            resolve(args.length > 1 ? args : args[0]);
        }

        callback[PROMISE_SYMBOL] = new Promise((res, rej) => {
            resolve = res,
            reject = rej;
        });

        return callback
    }

    /**
     * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on
     * their requirements. Each function can optionally depend on other functions
     * being completed first, and each function is run as soon as its requirements
     * are satisfied.
     *
     * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence
     * will stop. Further tasks will not execute (so any other functions depending
     * on it will not run), and the main `callback` is immediately called with the
     * error.
     *
     * {@link AsyncFunction}s also receive an object containing the results of functions which
     * have completed so far as the first argument, if they have dependencies. If a
     * task function has no dependencies, it will only be passed a callback.
     *
     * @name auto
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @category Control Flow
     * @param {Object} tasks - An object. Each of its properties is either a
     * function or an array of requirements, with the {@link AsyncFunction} itself the last item
     * in the array. The object's key of a property serves as the name of the task
     * defined by that property, i.e. can be used when specifying requirements for
     * other tasks. The function receives one or two arguments:
     * * a `results` object, containing the results of the previously executed
     *   functions, only passed if the task has any dependencies,
     * * a `callback(err, result)` function, which must be called when finished,
     *   passing an `error` (which can be `null`) and the result of the function's
     *   execution.
     * @param {number} [concurrency=Infinity] - An optional `integer` for
     * determining the maximum number of tasks that can be run in parallel. By
     * default, as many as possible.
     * @param {Function} [callback] - An optional callback which is called when all
     * the tasks have been completed. It receives the `err` argument if any `tasks`
     * pass an error to their callback. Results are always returned; however, if an
     * error occurs, no further `tasks` will be performed, and the results object
     * will only contain partial results. Invoked with (err, results).
     * @returns {Promise} a promise, if a callback is not passed
     * @example
     *
     * //Using Callbacks
     * async.auto({
     *     get_data: function(callback) {
     *         // async code to get some data
     *         callback(null, 'data', 'converted to array');
     *     },
     *     make_folder: function(callback) {
     *         // async code to create a directory to store a file in
     *         // this is run at the same time as getting the data
     *         callback(null, 'folder');
     *     },
     *     write_file: ['get_data', 'make_folder', function(results, callback) {
     *         // once there is some data and the directory exists,
     *         // write the data to a file in the directory
     *         callback(null, 'filename');
     *     }],
     *     email_link: ['write_file', function(results, callback) {
     *         // once the file is written let's email a link to it...
     *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
     *     }]
     * }, function(err, results) {
     *     if (err) {
     *         console.log('err = ', err);
     *     }
     *     console.log('results = ', results);
     *     // results = {
     *     //     get_data: ['data', 'converted to array']
     *     //     make_folder; 'folder',
     *     //     write_file: 'filename'
     *     //     email_link: { file: 'filename', email: 'user@example.com' }
     *     // }
     * });
     *
     * //Using Promises
     * async.auto({
     *     get_data: function(callback) {
     *         console.log('in get_data');
     *         // async code to get some data
     *         callback(null, 'data', 'converted to array');
     *     },
     *     make_folder: function(callback) {
     *         console.log('in make_folder');
     *         // async code to create a directory to store a file in
     *         // this is run at the same time as getting the data
     *         callback(null, 'folder');
     *     },
     *     write_file: ['get_data', 'make_folder', function(results, callback) {
     *         // once there is some data and the directory exists,
     *         // write the data to a file in the directory
     *         callback(null, 'filename');
     *     }],
     *     email_link: ['write_file', function(results, callback) {
     *         // once the file is written let's email a link to it...
     *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
     *     }]
     * }).then(results => {
     *     console.log('results = ', results);
     *     // results = {
     *     //     get_data: ['data', 'converted to array']
     *     //     make_folder; 'folder',
     *     //     write_file: 'filename'
     *     //     email_link: { file: 'filename', email: 'user@example.com' }
     *     // }
     * }).catch(err => {
     *     console.log('err = ', err);
     * });
     *
     * //Using async/await
     * async () => {
     *     try {
     *         let results = await async.auto({
     *             get_data: function(callback) {
     *                 // async code to get some data
     *                 callback(null, 'data', 'converted to array');
     *             },
     *             make_folder: function(callback) {
     *                 // async code to create a directory to store a file in
     *                 // this is run at the same time as getting the data
     *                 callback(null, 'folder');
     *             },
     *             write_file: ['get_data', 'make_folder', function(results, callback) {
     *                 // once there is some data and the directory exists,
     *                 // write the data to a file in the directory
     *                 callback(null, 'filename');
     *             }],
     *             email_link: ['write_file', function(results, callback) {
     *                 // once the file is written let's email a link to it...
     *                 callback(null, {'file':results.write_file, 'email':'user@example.com'});
     *             }]
     *         });
     *         console.log('results = ', results);
     *         // results = {
     *         //     get_data: ['data', 'converted to array']
     *         //     make_folder; 'folder',
     *         //     write_file: 'filename'
     *         //     email_link: { file: 'filename', email: 'user@example.com' }
     *         // }
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     */
    function auto(tasks, concurrency, callback) {
        if (typeof concurrency !== 'number') {
            // concurrency is optional, shift the args.
            callback = concurrency;
            concurrency = null;
        }
        callback = once(callback || promiseCallback());
        var numTasks = Object.keys(tasks).length;
        if (!numTasks) {
            return callback(null);
        }
        if (!concurrency) {
            concurrency = numTasks;
        }

        var results = {};
        var runningTasks = 0;
        var canceled = false;
        var hasError = false;

        var listeners = Object.create(null);

        var readyTasks = [];

        // for cycle detection:
        var readyToCheck = []; // tasks that have been identified as reachable
        // without the possibility of returning to an ancestor task
        var uncheckedDependencies = {};

        Object.keys(tasks).forEach(key => {
            var task = tasks[key];
            if (!Array.isArray(task)) {
                // no dependencies
                enqueueTask(key, [task]);
                readyToCheck.push(key);
                return;
            }

            var dependencies = task.slice(0, task.length - 1);
            var remainingDependencies = dependencies.length;
            if (remainingDependencies === 0) {
                enqueueTask(key, task);
                readyToCheck.push(key);
                return;
            }
            uncheckedDependencies[key] = remainingDependencies;

            dependencies.forEach(dependencyName => {
                if (!tasks[dependencyName]) {
                    throw new Error('async.auto task `' + key +
                        '` has a non-existent dependency `' +
                        dependencyName + '` in ' +
                        dependencies.join(', '));
                }
                addListener(dependencyName, () => {
                    remainingDependencies--;
                    if (remainingDependencies === 0) {
                        enqueueTask(key, task);
                    }
                });
            });
        });

        checkForDeadlocks();
        processQueue();

        function enqueueTask(key, task) {
            readyTasks.push(() => runTask(key, task));
        }

        function processQueue() {
            if (canceled) return
            if (readyTasks.length === 0 && runningTasks === 0) {
                return callback(null, results);
            }
            while(readyTasks.length && runningTasks < concurrency) {
                var run = readyTasks.shift();
                run();
            }

        }

        function addListener(taskName, fn) {
            var taskListeners = listeners[taskName];
            if (!taskListeners) {
                taskListeners = listeners[taskName] = [];
            }

            taskListeners.push(fn);
        }

        function taskComplete(taskName) {
            var taskListeners = listeners[taskName] || [];
            taskListeners.forEach(fn => fn());
            processQueue();
        }


        function runTask(key, task) {
            if (hasError) return;

            var taskCallback = onlyOnce((err, ...result) => {
                runningTasks--;
                if (err === false) {
                    canceled = true;
                    return
                }
                if (result.length < 2) {
                    [result] = result;
                }
                if (err) {
                    var safeResults = {};
                    Object.keys(results).forEach(rkey => {
                        safeResults[rkey] = results[rkey];
                    });
                    safeResults[key] = result;
                    hasError = true;
                    listeners = Object.create(null);
                    if (canceled) return
                    callback(err, safeResults);
                } else {
                    results[key] = result;
                    taskComplete(key);
                }
            });

            runningTasks++;
            var taskFn = wrapAsync(task[task.length - 1]);
            if (task.length > 1) {
                taskFn(results, taskCallback);
            } else {
                taskFn(taskCallback);
            }
        }

        function checkForDeadlocks() {
            // Kahn's algorithm
            // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm
            // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html
            var currentTask;
            var counter = 0;
            while (readyToCheck.length) {
                currentTask = readyToCheck.pop();
                counter++;
                getDependents(currentTask).forEach(dependent => {
                    if (--uncheckedDependencies[dependent] === 0) {
                        readyToCheck.push(dependent);
                    }
                });
            }

            if (counter !== numTasks) {
                throw new Error(
                    'async.auto cannot execute tasks due to a recursive dependency'
                );
            }
        }

        function getDependents(taskName) {
            var result = [];
            Object.keys(tasks).forEach(key => {
                const task = tasks[key];
                if (Array.isArray(task) && task.indexOf(taskName) >= 0) {
                    result.push(key);
                }
            });
            return result;
        }

        return callback[PROMISE_SYMBOL]
    }

    var FN_ARGS = /^(?:async\s+)?(?:function)?\s*\w*\s*\(\s*([^)]+)\s*\)(?:\s*{)/;
    var ARROW_FN_ARGS = /^(?:async\s+)?\(?\s*([^)=]+)\s*\)?(?:\s*=>)/;
    var FN_ARG_SPLIT = /,/;
    var FN_ARG = /(=.+)?(\s*)$/;
    var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;

    function parseParams(func) {
        const src = func.toString().replace(STRIP_COMMENTS, '');
        let match = src.match(FN_ARGS);
        if (!match) {
            match = src.match(ARROW_FN_ARGS);
        }
        if (!match) throw new Error('could not parse args in autoInject\nSource:\n' + src)
        let [, args] = match;
        return args
            .replace(/\s/g, '')
            .split(FN_ARG_SPLIT)
            .map((arg) => arg.replace(FN_ARG, '').trim());
    }

    /**
     * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent
     * tasks are specified as parameters to the function, after the usual callback
     * parameter, with the parameter names matching the names of the tasks it
     * depends on. This can provide even more readable task graphs which can be
     * easier to maintain.
     *
     * If a final callback is specified, the task results are similarly injected,
     * specified as named parameters after the initial error parameter.
     *
     * The autoInject function is purely syntactic sugar and its semantics are
     * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.
     *
     * @name autoInject
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @see [async.auto]{@link module:ControlFlow.auto}
     * @category Control Flow
     * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of
     * the form 'func([dependencies...], callback). The object's key of a property
     * serves as the name of the task defined by that property, i.e. can be used
     * when specifying requirements for other tasks.
     * * The `callback` parameter is a `callback(err, result)` which must be called
     *   when finished, passing an `error` (which can be `null`) and the result of
     *   the function's execution. The remaining parameters name other tasks on
     *   which the task is dependent, and the results from those tasks are the
     *   arguments of those parameters.
     * @param {Function} [callback] - An optional callback which is called when all
     * the tasks have been completed. It receives the `err` argument if any `tasks`
     * pass an error to their callback, and a `results` object with any completed
     * task results, similar to `auto`.
     * @returns {Promise} a promise, if no callback is passed
     * @example
     *
     * //  The example from `auto` can be rewritten as follows:
     * async.autoInject({
     *     get_data: function(callback) {
     *         // async code to get some data
     *         callback(null, 'data', 'converted to array');
     *     },
     *     make_folder: function(callback) {
     *         // async code to create a directory to store a file in
     *         // this is run at the same time as getting the data
     *         callback(null, 'folder');
     *     },
     *     write_file: function(get_data, make_folder, callback) {
     *         // once there is some data and the directory exists,
     *         // write the data to a file in the directory
     *         callback(null, 'filename');
     *     },
     *     email_link: function(write_file, callback) {
     *         // once the file is written let's email a link to it...
     *         // write_file contains the filename returned by write_file.
     *         callback(null, {'file':write_file, 'email':'user@example.com'});
     *     }
     * }, function(err, results) {
     *     console.log('err = ', err);
     *     console.log('email_link = ', results.email_link);
     * });
     *
     * // If you are using a JS minifier that mangles parameter names, `autoInject`
     * // will not work with plain functions, since the parameter names will be
     * // collapsed to a single letter identifier.  To work around this, you can
     * // explicitly specify the names of the parameters your task function needs
     * // in an array, similar to Angular.js dependency injection.
     *
     * // This still has an advantage over plain `auto`, since the results a task
     * // depends on are still spread into arguments.
     * async.autoInject({
     *     //...
     *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {
     *         callback(null, 'filename');
     *     }],
     *     email_link: ['write_file', function(write_file, callback) {
     *         callback(null, {'file':write_file, 'email':'user@example.com'});
     *     }]
     *     //...
     * }, function(err, results) {
     *     console.log('err = ', err);
     *     console.log('email_link = ', results.email_link);
     * });
     */
    function autoInject(tasks, callback) {
        var newTasks = {};

        Object.keys(tasks).forEach(key => {
            var taskFn = tasks[key];
            var params;
            var fnIsAsync = isAsync(taskFn);
            var hasNoDeps =
                (!fnIsAsync && taskFn.length === 1) ||
                (fnIsAsync && taskFn.length === 0);

            if (Array.isArray(taskFn)) {
                params = [...taskFn];
                taskFn = params.pop();

                newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);
            } else if (hasNoDeps) {
                // no dependencies, use the function as-is
                newTasks[key] = taskFn;
            } else {
                params = parseParams(taskFn);
                if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {
                    throw new Error("autoInject task functions require explicit parameters.");
                }

                // remove callback param
                if (!fnIsAsync) params.pop();

                newTasks[key] = params.concat(newTask);
            }

            function newTask(results, taskCb) {
                var newArgs = params.map(name => results[name]);
                newArgs.push(taskCb);
                wrapAsync(taskFn)(...newArgs);
            }
        });

        return auto(newTasks, callback);
    }

    // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
    // used for queues. This implementation assumes that the node provided by the user can be modified
    // to adjust the next and last properties. We implement only the minimal functionality
    // for queue support.
    class DLL {
        constructor() {
            this.head = this.tail = null;
            this.length = 0;
        }

        removeLink(node) {
            if (node.prev) node.prev.next = node.next;
            else this.head = node.next;
            if (node.next) node.next.prev = node.prev;
            else this.tail = node.prev;

            node.prev = node.next = null;
            this.length -= 1;
            return node;
        }

        empty () {
            while(this.head) this.shift();
            return this;
        }

        insertAfter(node, newNode) {
            newNode.prev = node;
            newNode.next = node.next;
            if (node.next) node.next.prev = newNode;
            else this.tail = newNode;
            node.next = newNode;
            this.length += 1;
        }

        insertBefore(node, newNode) {
            newNode.prev = node.prev;
            newNode.next = node;
            if (node.prev) node.prev.next = newNode;
            else this.head = newNode;
            node.prev = newNode;
            this.length += 1;
        }

        unshift(node) {
            if (this.head) this.insertBefore(this.head, node);
            else setInitial(this, node);
        }

        push(node) {
            if (this.tail) this.insertAfter(this.tail, node);
            else setInitial(this, node);
        }

        shift() {
            return this.head && this.removeLink(this.head);
        }

        pop() {
            return this.tail && this.removeLink(this.tail);
        }

        toArray() {
            return [...this]
        }

        *[Symbol.iterator] () {
            var cur = this.head;
            while (cur) {
                yield cur.data;
                cur = cur.next;
            }
        }

        remove (testFn) {
            var curr = this.head;
            while(curr) {
                var {next} = curr;
                if (testFn(curr)) {
                    this.removeLink(curr);
                }
                curr = next;
            }
            return this;
        }
    }

    function setInitial(dll, node) {
        dll.length = 1;
        dll.head = dll.tail = node;
    }

    function queue(worker, concurrency, payload) {
        if (concurrency == null) {
            concurrency = 1;
        }
        else if(concurrency === 0) {
            throw new RangeError('Concurrency must not be zero');
        }

        var _worker = wrapAsync(worker);
        var numRunning = 0;
        var workersList = [];
        const events = {
            error: [],
            drain: [],
            saturated: [],
            unsaturated: [],
            empty: []
        };

        function on (event, handler) {
            events[event].push(handler);
        }

        function once (event, handler) {
            const handleAndRemove = (...args) => {
                off(event, handleAndRemove);
                handler(...args);
            };
            events[event].push(handleAndRemove);
        }

        function off (event, handler) {
            if (!event) return Object.keys(events).forEach(ev => events[ev] = [])
            if (!handler) return events[event] = []
            events[event] = events[event].filter(ev => ev !== handler);
        }

        function trigger (event, ...args) {
            events[event].forEach(handler => handler(...args));
        }

        var processingScheduled = false;
        function _insert(data, insertAtFront, rejectOnError, callback) {
            if (callback != null && typeof callback !== 'function') {
                throw new Error('task callback must be a function');
            }
            q.started = true;

            var res, rej;
            function promiseCallback (err, ...args) {
                // we don't care about the error, let the global error handler
                // deal with it
                if (err) return rejectOnError ? rej(err) : res()
                if (args.length <= 1) return res(args[0])
                res(args);
            }

            var item = {
                data,
                callback: rejectOnError ?
                    promiseCallback :
                    (callback || promiseCallback)
            };

            if (insertAtFront) {
                q._tasks.unshift(item);
            } else {
                q._tasks.push(item);
            }

            if (!processingScheduled) {
                processingScheduled = true;
                setImmediate$1(() => {
                    processingScheduled = false;
                    q.process();
                });
            }

            if (rejectOnError || !callback) {
                return new Promise((resolve, reject) => {
                    res = resolve;
                    rej = reject;
                })
            }
        }

        function _createCB(tasks) {
            return function (err, ...args) {
                numRunning -= 1;

                for (var i = 0, l = tasks.length; i < l; i++) {
                    var task = tasks[i];

                    var index = workersList.indexOf(task);
                    if (index === 0) {
                        workersList.shift();
                    } else if (index > 0) {
                        workersList.splice(index, 1);
                    }

                    task.callback(err, ...args);

                    if (err != null) {
                        trigger('error', err, task.data);
                    }
                }

                if (numRunning <= (q.concurrency - q.buffer) ) {
                    trigger('unsaturated');
                }

                if (q.idle()) {
                    trigger('drain');
                }
                q.process();
            };
        }

        function _maybeDrain(data) {
            if (data.length === 0 && q.idle()) {
                // call drain immediately if there are no tasks
                setImmediate$1(() => trigger('drain'));
                return true
            }
            return false
        }

        const eventMethod = (name) => (handler) => {
            if (!handler) {
                return new Promise((resolve, reject) => {
                    once(name, (err, data) => {
                        if (err) return reject(err)
                        resolve(data);
                    });
                })
            }
            off(name);
            on(name, handler);

        };

        var isProcessing = false;
        var q = {
            _tasks: new DLL(),
            *[Symbol.iterator] () {
                yield* q._tasks[Symbol.iterator]();
            },
            concurrency,
            payload,
            buffer: concurrency / 4,
            started: false,
            paused: false,
            push (data, callback) {
                if (Array.isArray(data)) {
                    if (_maybeDrain(data)) return
                    return data.map(datum => _insert(datum, false, false, callback))
                }
                return _insert(data, false, false, callback);
            },
            pushAsync (data, callback) {
                if (Array.isArray(data)) {
                    if (_maybeDrain(data)) return
                    return data.map(datum => _insert(datum, false, true, callback))
                }
                return _insert(data, false, true, callback);
            },
            kill () {
                off();
                q._tasks.empty();
            },
            unshift (data, callback) {
                if (Array.isArray(data)) {
                    if (_maybeDrain(data)) return
                    return data.map(datum => _insert(datum, true, false, callback))
                }
                return _insert(data, true, false, callback);
            },
            unshiftAsync (data, callback) {
                if (Array.isArray(data)) {
                    if (_maybeDrain(data)) return
                    return data.map(datum => _insert(datum, true, true, callback))
                }
                return _insert(data, true, true, callback);
            },
            remove (testFn) {
                q._tasks.remove(testFn);
            },
            process () {
                // Avoid trying to start too many processing operations. This can occur
                // when callbacks resolve synchronously (#1267).
                if (isProcessing) {
                    return;
                }
                isProcessing = true;
                while(!q.paused && numRunning < q.concurrency && q._tasks.length){
                    var tasks = [], data = [];
                    var l = q._tasks.length;
                    if (q.payload) l = Math.min(l, q.payload);
                    for (var i = 0; i < l; i++) {
                        var node = q._tasks.shift();
                        tasks.push(node);
                        workersList.push(node);
                        data.push(node.data);
                    }

                    numRunning += 1;

                    if (q._tasks.length === 0) {
                        trigger('empty');
                    }

                    if (numRunning === q.concurrency) {
                        trigger('saturated');
                    }

                    var cb = onlyOnce(_createCB(tasks));
                    _worker(data, cb);
                }
                isProcessing = false;
            },
            length () {
                return q._tasks.length;
            },
            running () {
                return numRunning;
            },
            workersList () {
                return workersList;
            },
            idle() {
                return q._tasks.length + numRunning === 0;
            },
            pause () {
                q.paused = true;
            },
            resume () {
                if (q.paused === false) { return; }
                q.paused = false;
                setImmediate$1(q.process);
            }
        };
        // define these as fixed properties, so people get useful errors when updating
        Object.defineProperties(q, {
            saturated: {
                writable: false,
                value: eventMethod('saturated')
            },
            unsaturated: {
                writable: false,
                value: eventMethod('unsaturated')
            },
            empty: {
                writable: false,
                value: eventMethod('empty')
            },
            drain: {
                writable: false,
                value: eventMethod('drain')
            },
            error: {
                writable: false,
                value: eventMethod('error')
            },
        });
        return q;
    }

    /**
     * Creates a `cargo` object with the specified payload. Tasks added to the
     * cargo will be processed altogether (up to the `payload` limit). If the
     * `worker` is in progress, the task is queued until it becomes available. Once
     * the `worker` has completed some tasks, each callback of those tasks is
     * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)
     * for how `cargo` and `queue` work.
     *
     * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers
     * at a time, cargo passes an array of tasks to a single worker, repeating
     * when the worker is finished.
     *
     * @name cargo
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @see [async.queue]{@link module:ControlFlow.queue}
     * @category Control Flow
     * @param {AsyncFunction} worker - An asynchronous function for processing an array
     * of queued tasks. Invoked with `(tasks, callback)`.
     * @param {number} [payload=Infinity] - An optional `integer` for determining
     * how many tasks should be processed per round; if omitted, the default is
     * unlimited.
     * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can
     * attached as certain properties to listen for specific events during the
     * lifecycle of the cargo and inner queue.
     * @example
     *
     * // create a cargo object with payload 2
     * var cargo = async.cargo(function(tasks, callback) {
     *     for (var i=0; i<tasks.length; i++) {
     *         console.log('hello ' + tasks[i].name);
     *     }
     *     callback();
     * }, 2);
     *
     * // add some items
     * cargo.push({name: 'foo'}, function(err) {
     *     console.log('finished processing foo');
     * });
     * cargo.push({name: 'bar'}, function(err) {
     *     console.log('finished processing bar');
     * });
     * await cargo.push({name: 'baz'});
     * console.log('finished processing baz');
     */
    function cargo(worker, payload) {
        return queue(worker, 1, payload);
    }

    /**
     * Creates a `cargoQueue` object with the specified payload. Tasks added to the
     * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.
     * If the all `workers` are in progress, the task is queued until one becomes available. Once
     * a `worker` has completed some tasks, each callback of those tasks is
     * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)
     * for how `cargo` and `queue` work.
     *
     * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers
     * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,
     * the cargoQueue passes an array of tasks to multiple parallel workers.
     *
     * @name cargoQueue
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @see [async.queue]{@link module:ControlFlow.queue}
     * @see [async.cargo]{@link module:ControlFLow.cargo}
     * @category Control Flow
     * @param {AsyncFunction} worker - An asynchronous function for processing an array
     * of queued tasks. Invoked with `(tasks, callback)`.
     * @param {number} [concurrency=1] - An `integer` for determining how many
     * `worker` functions should be run in parallel.  If omitted, the concurrency
     * defaults to `1`.  If the concurrency is `0`, an error is thrown.
     * @param {number} [payload=Infinity] - An optional `integer` for determining
     * how many tasks should be processed per round; if omitted, the default is
     * unlimited.
     * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can
     * attached as certain properties to listen for specific events during the
     * lifecycle of the cargoQueue and inner queue.
     * @example
     *
     * // create a cargoQueue object with payload 2 and concurrency 2
     * var cargoQueue = async.cargoQueue(function(tasks, callback) {
     *     for (var i=0; i<tasks.length; i++) {
     *         console.log('hello ' + tasks[i].name);
     *     }
     *     callback();
     * }, 2, 2);
     *
     * // add some items
     * cargoQueue.push({name: 'foo'}, function(err) {
     *     console.log('finished processing foo');
     * });
     * cargoQueue.push({name: 'bar'}, function(err) {
     *     console.log('finished processing bar');
     * });
     * cargoQueue.push({name: 'baz'}, function(err) {
     *     console.log('finished processing baz');
     * });
     * cargoQueue.push({name: 'boo'}, function(err) {
     *     console.log('finished processing boo');
     * });
     */
    function cargo$1(worker, concurrency, payload) {
        return queue(worker, concurrency, payload);
    }

    /**
     * Reduces `coll` into a single value using an async `iteratee` to return each
     * successive step. `memo` is the initial state of the reduction. This function
     * only operates in series.
     *
     * For performance reasons, it may make sense to split a call to this function
     * into a parallel map, and then use the normal `Array.prototype.reduce` on the
     * results. This function is for situations where each step in the reduction
     * needs to be async; if you can get the data before reducing it, then it's
     * probably a good idea to do so.
     *
     * @name reduce
     * @static
     * @memberOf module:Collections
     * @method
     * @alias inject
     * @alias foldl
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {*} memo - The initial state of the reduction.
     * @param {AsyncFunction} iteratee - A function applied to each item in the
     * array to produce the next step in the reduction.
     * The `iteratee` should complete with the next state of the reduction.
     * If the iteratee completes with an error, the reduction is stopped and the
     * main `callback` is immediately called with the error.
     * Invoked with (memo, item, callback).
     * @param {Function} [callback] - A callback which is called after all the
     * `iteratee` functions have finished. Result is the reduced value. Invoked with
     * (err, result).
     * @returns {Promise} a promise, if no callback is passed
     * @example
     *
     * // file1.txt is a file that is 1000 bytes in size
     * // file2.txt is a file that is 2000 bytes in size
     * // file3.txt is a file that is 3000 bytes in size
     * // file4.txt does not exist
     *
     * const fileList = ['file1.txt','file2.txt','file3.txt'];
     * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];
     *
     * // asynchronous function that computes the file size in bytes
     * // file size is added to the memoized value, then returned
     * function getFileSizeInBytes(memo, file, callback) {
     *     fs.stat(file, function(err, stat) {
     *         if (err) {
     *             return callback(err);
     *         }
     *         callback(null, memo + stat.size);
     *     });
     * }
     *
     * // Using callbacks
     * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {
     *     if (err) {
     *         console.log(err);
     *     } else {
     *         console.log(result);
     *         // 6000
     *         // which is the sum of the file sizes of the three files
     *     }
     * });
     *
     * // Error Handling
     * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {
     *     if (err) {
     *         console.log(err);
     *         // [ Error: ENOENT: no such file or directory ]
     *     } else {
     *         console.log(result);
     *     }
     * });
     *
     * // Using Promises
     * async.reduce(fileList, 0, getFileSizeInBytes)
     * .then( result => {
     *     console.log(result);
     *     // 6000
     *     // which is the sum of the file sizes of the three files
     * }).catch( err => {
     *     console.log(err);
     * });
     *
     * // Error Handling
     * async.reduce(withMissingFileList, 0, getFileSizeInBytes)
     * .then( result => {
     *     console.log(result);
     * }).catch( err => {
     *     console.log(err);
     *     // [ Error: ENOENT: no such file or directory ]
     * });
     *
     * // Using async/await
     * async () => {
     *     try {
     *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);
     *         console.log(result);
     *         // 6000
     *         // which is the sum of the file sizes of the three files
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     * // Error Handling
     * async () => {
     *     try {
     *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);
     *         console.log(result);
     *     }
     *     catch (err) {
     *         console.log(err);
     *         // [ Error: ENOENT: no such file or directory ]
     *     }
     * }
     *
     */
    function reduce(coll, memo, iteratee, callback) {
        callback = once(callback);
        var _iteratee = wrapAsync(iteratee);
        return eachOfSeries$1(coll, (x, i, iterCb) => {
            _iteratee(memo, x, (err, v) => {
                memo = v;
                iterCb(err);
            });
        }, err => callback(err, memo));
    }
    var reduce$1 = awaitify(reduce, 4);

    /**
     * Version of the compose function that is more natural to read. Each function
     * consumes the return value of the previous function. It is the equivalent of
     * [compose]{@link module:ControlFlow.compose} with the arguments reversed.
     *
     * Each function is executed with the `this` binding of the composed function.
     *
     * @name seq
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @see [async.compose]{@link module:ControlFlow.compose}
     * @category Control Flow
     * @param {...AsyncFunction} functions - the asynchronous functions to compose
     * @returns {Function} a function that composes the `functions` in order
     * @example
     *
     * // Requires lodash (or underscore), express3 and dresende's orm2.
     * // Part of an app, that fetches cats of the logged user.
     * // This example uses `seq` function to avoid overnesting and error
     * // handling clutter.
     * app.get('/cats', function(request, response) {
     *     var User = request.models.User;
     *     async.seq(
     *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))
     *         function(user, fn) {
     *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))
     *         }
     *     )(req.session.user_id, function (err, cats) {
     *         if (err) {
     *             console.error(err);
     *             response.json({ status: 'error', message: err.message });
     *         } else {
     *             response.json({ status: 'ok', message: 'Cats found', data: cats });
     *         }
     *     });
     * });
     */
    function seq(...functions) {
        var _functions = functions.map(wrapAsync);
        return function (...args) {
            var that = this;

            var cb = args[args.length - 1];
            if (typeof cb == 'function') {
                args.pop();
            } else {
                cb = promiseCallback();
            }

            reduce$1(_functions, args, (newargs, fn, iterCb) => {
                fn.apply(that, newargs.concat((err, ...nextargs) => {
                    iterCb(err, nextargs);
                }));
            },
            (err, results) => cb(err, ...results));

            return cb[PROMISE_SYMBOL]
        };
    }

    /**
     * Creates a function which is a composition of the passed asynchronous
     * functions. Each function consumes the return value of the function that
     * follows. Composing functions `f()`, `g()`, and `h()` would produce the result
     * of `f(g(h()))`, only this version uses callbacks to obtain the return values.
     *
     * If the last argument to the composed function is not a function, a promise
     * is returned when you call it.
     *
     * Each function is executed with the `this` binding of the composed function.
     *
     * @name compose
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @category Control Flow
     * @param {...AsyncFunction} functions - the asynchronous functions to compose
     * @returns {Function} an asynchronous function that is the composed
     * asynchronous `functions`
     * @example
     *
     * function add1(n, callback) {
     *     setTimeout(function () {
     *         callback(null, n + 1);
     *     }, 10);
     * }
     *
     * function mul3(n, callback) {
     *     setTimeout(function () {
     *         callback(null, n * 3);
     *     }, 10);
     * }
     *
     * var add1mul3 = async.compose(mul3, add1);
     * add1mul3(4, function (err, result) {
     *     // result now equals 15
     * });
     */
    function compose(...args) {
        return seq(...args.reverse());
    }

    /**
     * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.
     *
     * @name mapLimit
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.map]{@link module:Collections.map}
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {number} limit - The maximum number of async operations at a time.
     * @param {AsyncFunction} iteratee - An async function to apply to each item in
     * `coll`.
     * The iteratee should complete with the transformed item.
     * Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called when all `iteratee`
     * functions have finished, or an error occurs. Results is an array of the
     * transformed items from the `coll`. Invoked with (err, results).
     * @returns {Promise} a promise, if no callback is passed
     */
    function mapLimit (coll, limit, iteratee, callback) {
        return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)
    }
    var mapLimit$1 = awaitify(mapLimit, 4);

    /**
     * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.
     *
     * @name concatLimit
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.concat]{@link module:Collections.concat}
     * @category Collection
     * @alias flatMapLimit
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {number} limit - The maximum number of async operations at a time.
     * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
     * which should use an array as its result. Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called after all the
     * `iteratee` functions have finished, or an error occurs. Results is an array
     * containing the concatenated results of the `iteratee` function. Invoked with
     * (err, results).
     * @returns A Promise, if no callback is passed
     */
    function concatLimit(coll, limit, iteratee, callback) {
        var _iteratee = wrapAsync(iteratee);
        return mapLimit$1(coll, limit, (val, iterCb) => {
            _iteratee(val, (err, ...args) => {
                if (err) return iterCb(err);
                return iterCb(err, args);
            });
        }, (err, mapResults) => {
            var result = [];
            for (var i = 0; i < mapResults.length; i++) {
                if (mapResults[i]) {
                    result = result.concat(...mapResults[i]);
                }
            }

            return callback(err, result);
        });
    }
    var concatLimit$1 = awaitify(concatLimit, 4);

    /**
     * Applies `iteratee` to each item in `coll`, concatenating the results. Returns
     * the concatenated list. The `iteratee`s are called in parallel, and the
     * results are concatenated as they return. The results array will be returned in
     * the original order of `coll` passed to the `iteratee` function.
     *
     * @name concat
     * @static
     * @memberOf module:Collections
     * @method
     * @category Collection
     * @alias flatMap
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
     * which should use an array as its result. Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called after all the
     * `iteratee` functions have finished, or an error occurs. Results is an array
     * containing the concatenated results of the `iteratee` function. Invoked with
     * (err, results).
     * @returns A Promise, if no callback is passed
     * @example
     *
     * // dir1 is a directory that contains file1.txt, file2.txt
     * // dir2 is a directory that contains file3.txt, file4.txt
     * // dir3 is a directory that contains file5.txt
     * // dir4 does not exist
     *
     * let directoryList = ['dir1','dir2','dir3'];
     * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];
     *
     * // Using callbacks
     * async.concat(directoryList, fs.readdir, function(err, results) {
     *    if (err) {
     *        console.log(err);
     *    } else {
     *        console.log(results);
     *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]
     *    }
     * });
     *
     * // Error Handling
     * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {
     *    if (err) {
     *        console.log(err);
     *        // [ Error: ENOENT: no such file or directory ]
     *        // since dir4 does not exist
     *    } else {
     *        console.log(results);
     *    }
     * });
     *
     * // Using Promises
     * async.concat(directoryList, fs.readdir)
     * .then(results => {
     *     console.log(results);
     *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]
     * }).catch(err => {
     *      console.log(err);
     * });
     *
     * // Error Handling
     * async.concat(withMissingDirectoryList, fs.readdir)
     * .then(results => {
     *     console.log(results);
     * }).catch(err => {
     *     console.log(err);
     *     // [ Error: ENOENT: no such file or directory ]
     *     // since dir4 does not exist
     * });
     *
     * // Using async/await
     * async () => {
     *     try {
     *         let results = await async.concat(directoryList, fs.readdir);
     *         console.log(results);
     *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]
     *     } catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     * // Error Handling
     * async () => {
     *     try {
     *         let results = await async.concat(withMissingDirectoryList, fs.readdir);
     *         console.log(results);
     *     } catch (err) {
     *         console.log(err);
     *         // [ Error: ENOENT: no such file or directory ]
     *         // since dir4 does not exist
     *     }
     * }
     *
     */
    function concat(coll, iteratee, callback) {
        return concatLimit$1(coll, Infinity, iteratee, callback)
    }
    var concat$1 = awaitify(concat, 3);

    /**
     * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.
     *
     * @name concatSeries
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.concat]{@link module:Collections.concat}
     * @category Collection
     * @alias flatMapSeries
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.
     * The iteratee should complete with an array an array of results.
     * Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called after all the
     * `iteratee` functions have finished, or an error occurs. Results is an array
     * containing the concatenated results of the `iteratee` function. Invoked with
     * (err, results).
     * @returns A Promise, if no callback is passed
     */
    function concatSeries(coll, iteratee, callback) {
        return concatLimit$1(coll, 1, iteratee, callback)
    }
    var concatSeries$1 = awaitify(concatSeries, 3);

    /**
     * Returns a function that when called, calls-back with the values provided.
     * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to
     * [`auto`]{@link module:ControlFlow.auto}.
     *
     * @name constant
     * @static
     * @memberOf module:Utils
     * @method
     * @category Util
     * @param {...*} arguments... - Any number of arguments to automatically invoke
     * callback with.
     * @returns {AsyncFunction} Returns a function that when invoked, automatically
     * invokes the callback with the previous given arguments.
     * @example
     *
     * async.waterfall([
     *     async.constant(42),
     *     function (value, next) {
     *         // value === 42
     *     },
     *     //...
     * ], callback);
     *
     * async.waterfall([
     *     async.constant(filename, "utf8"),
     *     fs.readFile,
     *     function (fileData, next) {
     *         //...
     *     }
     *     //...
     * ], callback);
     *
     * async.auto({
     *     hostname: async.constant("https://server.net/"),
     *     port: findFreePort,
     *     launchServer: ["hostname", "port", function (options, cb) {
     *         startServer(options, cb);
     *     }],
     *     //...
     * }, callback);
     */
    function constant(...args) {
        return function (...ignoredArgs/*, callback*/) {
            var callback = ignoredArgs.pop();
            return callback(null, ...args);
        };
    }

    function _createTester(check, getResult) {
        return (eachfn, arr, _iteratee, cb) => {
            var testPassed = false;
            var testResult;
            const iteratee = wrapAsync(_iteratee);
            eachfn(arr, (value, _, callback) => {
                iteratee(value, (err, result) => {
                    if (err || err === false) return callback(err);

                    if (check(result) && !testResult) {
                        testPassed = true;
                        testResult = getResult(true, value);
                        return callback(null, breakLoop);
                    }
                    callback();
                });
            }, err => {
                if (err) return cb(err);
                cb(null, testPassed ? testResult : getResult(false));
            });
        };
    }

    /**
     * Returns the first value in `coll` that passes an async truth test. The
     * `iteratee` is applied in parallel, meaning the first iteratee to return
     * `true` will fire the detect `callback` with that result. That means the
     * result might not be the first item in the original `coll` (in terms of order)
     * that passes the test.

     * If order within the original `coll` is important, then look at
     * [`detectSeries`]{@link module:Collections.detectSeries}.
     *
     * @name detect
     * @static
     * @memberOf module:Collections
     * @method
     * @alias find
     * @category Collections
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
     * The iteratee must complete with a boolean value as its result.
     * Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called as soon as any
     * iteratee returns `true`, or after all the `iteratee` functions have finished.
     * Result will be the first item in the array that passes the truth test
     * (iteratee) or the value `undefined` if none passed. Invoked with
     * (err, result).
     * @returns A Promise, if no callback is passed
     * @example
     *
     * // dir1 is a directory that contains file1.txt, file2.txt
     * // dir2 is a directory that contains file3.txt, file4.txt
     * // dir3 is a directory that contains file5.txt
     *
     * // asynchronous function that checks if a file exists
     * function fileExists(file, callback) {
     *    fs.access(file, fs.constants.F_OK, (err) => {
     *        callback(null, !err);
     *    });
     * }
     *
     * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,
     *    function(err, result) {
     *        console.log(result);
     *        // dir1/file1.txt
     *        // result now equals the first file in the list that exists
     *    }
     *);
     *
     * // Using Promises
     * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)
     * .then(result => {
     *     console.log(result);
     *     // dir1/file1.txt
     *     // result now equals the first file in the list that exists
     * }).catch(err => {
     *     console.log(err);
     * });
     *
     * // Using async/await
     * async () => {
     *     try {
     *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);
     *         console.log(result);
     *         // dir1/file1.txt
     *         // result now equals the file in the list that exists
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     */
    function detect(coll, iteratee, callback) {
        return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)
    }
    var detect$1 = awaitify(detect, 3);

    /**
     * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a
     * time.
     *
     * @name detectLimit
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.detect]{@link module:Collections.detect}
     * @alias findLimit
     * @category Collections
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {number} limit - The maximum number of async operations at a time.
     * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
     * The iteratee must complete with a boolean value as its result.
     * Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called as soon as any
     * iteratee returns `true`, or after all the `iteratee` functions have finished.
     * Result will be the first item in the array that passes the truth test
     * (iteratee) or the value `undefined` if none passed. Invoked with
     * (err, result).
     * @returns a Promise if no callback is passed
     */
    function detectLimit(coll, limit, iteratee, callback) {
        return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)
    }
    var detectLimit$1 = awaitify(detectLimit, 4);

    /**
     * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.
     *
     * @name detectSeries
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.detect]{@link module:Collections.detect}
     * @alias findSeries
     * @category Collections
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
     * The iteratee must complete with a boolean value as its result.
     * Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called as soon as any
     * iteratee returns `true`, or after all the `iteratee` functions have finished.
     * Result will be the first item in the array that passes the truth test
     * (iteratee) or the value `undefined` if none passed. Invoked with
     * (err, result).
     * @returns a Promise if no callback is passed
     */
    function detectSeries(coll, iteratee, callback) {
        return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)
    }

    var detectSeries$1 = awaitify(detectSeries, 3);

    function consoleFunc(name) {
        return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {
            /* istanbul ignore else */
            if (typeof console === 'object') {
                /* istanbul ignore else */
                if (err) {
                    /* istanbul ignore else */
                    if (console.error) {
                        console.error(err);
                    }
                } else if (console[name]) { /* istanbul ignore else */
                    resultArgs.forEach(x => console[name](x));
                }
            }
        })
    }

    /**
     * Logs the result of an [`async` function]{@link AsyncFunction} to the
     * `console` using `console.dir` to display the properties of the resulting object.
     * Only works in Node.js or in browsers that support `console.dir` and
     * `console.error` (such as FF and Chrome).
     * If multiple arguments are returned from the async function,
     * `console.dir` is called on each argument in order.
     *
     * @name dir
     * @static
     * @memberOf module:Utils
     * @method
     * @category Util
     * @param {AsyncFunction} function - The function you want to eventually apply
     * all arguments to.
     * @param {...*} arguments... - Any number of arguments to apply to the function.
     * @example
     *
     * // in a module
     * var hello = function(name, callback) {
     *     setTimeout(function() {
     *         callback(null, {hello: name});
     *     }, 1000);
     * };
     *
     * // in the node repl
     * node> async.dir(hello, 'world');
     * {hello: 'world'}
     */
    var dir = consoleFunc('dir');

    /**
     * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in
     * the order of operations, the arguments `test` and `iteratee` are switched.
     *
     * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.
     *
     * @name doWhilst
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @see [async.whilst]{@link module:ControlFlow.whilst}
     * @category Control Flow
     * @param {AsyncFunction} iteratee - A function which is called each time `test`
     * passes. Invoked with (callback).
     * @param {AsyncFunction} test - asynchronous truth test to perform after each
     * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the
     * non-error args from the previous callback of `iteratee`.
     * @param {Function} [callback] - A callback which is called after the test
     * function has failed and repeated execution of `iteratee` has stopped.
     * `callback` will be passed an error and any arguments passed to the final
     * `iteratee`'s callback. Invoked with (err, [results]);
     * @returns {Promise} a promise, if no callback is passed
     */
    function doWhilst(iteratee, test, callback) {
        callback = onlyOnce(callback);
        var _fn = wrapAsync(iteratee);
        var _test = wrapAsync(test);
        var results;

        function next(err, ...args) {
            if (err) return callback(err);
            if (err === false) return;
            results = args;
            _test(...args, check);
        }

        function check(err, truth) {
            if (err) return callback(err);
            if (err === false) return;
            if (!truth) return callback(null, ...results);
            _fn(next);
        }

        return check(null, true);
    }

    var doWhilst$1 = awaitify(doWhilst, 3);

    /**
     * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the
     * argument ordering differs from `until`.
     *
     * @name doUntil
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}
     * @category Control Flow
     * @param {AsyncFunction} iteratee - An async function which is called each time
     * `test` fails. Invoked with (callback).
     * @param {AsyncFunction} test - asynchronous truth test to perform after each
     * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the
     * non-error args from the previous callback of `iteratee`
     * @param {Function} [callback] - A callback which is called after the test
     * function has passed and repeated execution of `iteratee` has stopped. `callback`
     * will be passed an error and any arguments passed to the final `iteratee`'s
     * callback. Invoked with (err, [results]);
     * @returns {Promise} a promise, if no callback is passed
     */
    function doUntil(iteratee, test, callback) {
        const _test = wrapAsync(test);
        return doWhilst$1(iteratee, (...args) => {
            const cb = args.pop();
            _test(...args, (err, truth) => cb (err, !truth));
        }, callback);
    }

    function _withoutIndex(iteratee) {
        return (value, index, callback) => iteratee(value, callback);
    }

    /**
     * Applies the function `iteratee` to each item in `coll`, in parallel.
     * The `iteratee` is called with an item from the list, and a callback for when
     * it has finished. If the `iteratee` passes an error to its `callback`, the
     * main `callback` (for the `each` function) is immediately called with the
     * error.
     *
     * Note, that since this function applies `iteratee` to each item in parallel,
     * there is no guarantee that the iteratee functions will complete in order.
     *
     * @name each
     * @static
     * @memberOf module:Collections
     * @method
     * @alias forEach
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {AsyncFunction} iteratee - An async function to apply to
     * each item in `coll`. Invoked with (item, callback).
     * The array index is not passed to the iteratee.
     * If you need the index, use `eachOf`.
     * @param {Function} [callback] - A callback which is called when all
     * `iteratee` functions have finished, or an error occurs. Invoked with (err).
     * @returns {Promise} a promise, if a callback is omitted
     * @example
     *
     * // dir1 is a directory that contains file1.txt, file2.txt
     * // dir2 is a directory that contains file3.txt, file4.txt
     * // dir3 is a directory that contains file5.txt
     * // dir4 does not exist
     *
     * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];
     * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];
     *
     * // asynchronous function that deletes a file
     * const deleteFile = function(file, callback) {
     *     fs.unlink(file, callback);
     * };
     *
     * // Using callbacks
     * async.each(fileList, deleteFile, function(err) {
     *     if( err ) {
     *         console.log(err);
     *     } else {
     *         console.log('All files have been deleted successfully');
     *     }
     * });
     *
     * // Error Handling
     * async.each(withMissingFileList, deleteFile, function(err){
     *     console.log(err);
     *     // [ Error: ENOENT: no such file or directory ]
     *     // since dir4/file2.txt does not exist
     *     // dir1/file1.txt could have been deleted
     * });
     *
     * // Using Promises
     * async.each(fileList, deleteFile)
     * .then( () => {
     *     console.log('All files have been deleted successfully');
     * }).catch( err => {
     *     console.log(err);
     * });
     *
     * // Error Handling
     * async.each(fileList, deleteFile)
     * .then( () => {
     *     console.log('All files have been deleted successfully');
     * }).catch( err => {
     *     console.log(err);
     *     // [ Error: ENOENT: no such file or directory ]
     *     // since dir4/file2.txt does not exist
     *     // dir1/file1.txt could have been deleted
     * });
     *
     * // Using async/await
     * async () => {
     *     try {
     *         await async.each(files, deleteFile);
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     * // Error Handling
     * async () => {
     *     try {
     *         await async.each(withMissingFileList, deleteFile);
     *     }
     *     catch (err) {
     *         console.log(err);
     *         // [ Error: ENOENT: no such file or directory ]
     *         // since dir4/file2.txt does not exist
     *         // dir1/file1.txt could have been deleted
     *     }
     * }
     *
     */
    function eachLimit(coll, iteratee, callback) {
        return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);
    }

    var each = awaitify(eachLimit, 3);

    /**
     * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
     *
     * @name eachLimit
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.each]{@link module:Collections.each}
     * @alias forEachLimit
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {number} limit - The maximum number of async operations at a time.
     * @param {AsyncFunction} iteratee - An async function to apply to each item in
     * `coll`.
     * The array index is not passed to the iteratee.
     * If you need the index, use `eachOfLimit`.
     * Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called when all
     * `iteratee` functions have finished, or an error occurs. Invoked with (err).
     * @returns {Promise} a promise, if a callback is omitted
     */
    function eachLimit$1(coll, limit, iteratee, callback) {
        return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);
    }
    var eachLimit$2 = awaitify(eachLimit$1, 4);

    /**
     * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
     *
     * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item
     * in series and therefore the iteratee functions will complete in order.

     * @name eachSeries
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.each]{@link module:Collections.each}
     * @alias forEachSeries
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {AsyncFunction} iteratee - An async function to apply to each
     * item in `coll`.
     * The array index is not passed to the iteratee.
     * If you need the index, use `eachOfSeries`.
     * Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called when all
     * `iteratee` functions have finished, or an error occurs. Invoked with (err).
     * @returns {Promise} a promise, if a callback is omitted
     */
    function eachSeries(coll, iteratee, callback) {
        return eachLimit$2(coll, 1, iteratee, callback)
    }
    var eachSeries$1 = awaitify(eachSeries, 3);

    /**
     * Wrap an async function and ensure it calls its callback on a later tick of
     * the event loop.  If the function already calls its callback on a next tick,
     * no extra deferral is added. This is useful for preventing stack overflows
     * (`RangeError: Maximum call stack size exceeded`) and generally keeping
     * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)
     * contained. ES2017 `async` functions are returned as-is -- they are immune
     * to Zalgo's corrupting influences, as they always resolve on a later tick.
     *
     * @name ensureAsync
     * @static
     * @memberOf module:Utils
     * @method
     * @category Util
     * @param {AsyncFunction} fn - an async function, one that expects a node-style
     * callback as its last argument.
     * @returns {AsyncFunction} Returns a wrapped function with the exact same call
     * signature as the function passed in.
     * @example
     *
     * function sometimesAsync(arg, callback) {
     *     if (cache[arg]) {
     *         return callback(null, cache[arg]); // this would be synchronous!!
     *     } else {
     *         doSomeIO(arg, callback); // this IO would be asynchronous
     *     }
     * }
     *
     * // this has a risk of stack overflows if many results are cached in a row
     * async.mapSeries(args, sometimesAsync, done);
     *
     * // this will defer sometimesAsync's callback if necessary,
     * // preventing stack overflows
     * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);
     */
    function ensureAsync(fn) {
        if (isAsync(fn)) return fn;
        return function (...args/*, callback*/) {
            var callback = args.pop();
            var sync = true;
            args.push((...innerArgs) => {
                if (sync) {
                    setImmediate$1(() => callback(...innerArgs));
                } else {
                    callback(...innerArgs);
                }
            });
            fn.apply(this, args);
            sync = false;
        };
    }

    /**
     * Returns `true` if every element in `coll` satisfies an async test. If any
     * iteratee call returns `false`, the main `callback` is immediately called.
     *
     * @name every
     * @static
     * @memberOf module:Collections
     * @method
     * @alias all
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {AsyncFunction} iteratee - An async truth test to apply to each item
     * in the collection in parallel.
     * The iteratee must complete with a boolean result value.
     * Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called after all the
     * `iteratee` functions have finished. Result will be either `true` or `false`
     * depending on the values of the async tests. Invoked with (err, result).
     * @returns {Promise} a promise, if no callback provided
     * @example
     *
     * // dir1 is a directory that contains file1.txt, file2.txt
     * // dir2 is a directory that contains file3.txt, file4.txt
     * // dir3 is a directory that contains file5.txt
     * // dir4 does not exist
     *
     * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];
     * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];
     *
     * // asynchronous function that checks if a file exists
     * function fileExists(file, callback) {
     *    fs.access(file, fs.constants.F_OK, (err) => {
     *        callback(null, !err);
     *    });
     * }
     *
     * // Using callbacks
     * async.every(fileList, fileExists, function(err, result) {
     *     console.log(result);
     *     // true
     *     // result is true since every file exists
     * });
     *
     * async.every(withMissingFileList, fileExists, function(err, result) {
     *     console.log(result);
     *     // false
     *     // result is false since NOT every file exists
     * });
     *
     * // Using Promises
     * async.every(fileList, fileExists)
     * .then( result => {
     *     console.log(result);
     *     // true
     *     // result is true since every file exists
     * }).catch( err => {
     *     console.log(err);
     * });
     *
     * async.every(withMissingFileList, fileExists)
     * .then( result => {
     *     console.log(result);
     *     // false
     *     // result is false since NOT every file exists
     * }).catch( err => {
     *     console.log(err);
     * });
     *
     * // Using async/await
     * async () => {
     *     try {
     *         let result = await async.every(fileList, fileExists);
     *         console.log(result);
     *         // true
     *         // result is true since every file exists
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     * async () => {
     *     try {
     *         let result = await async.every(withMissingFileList, fileExists);
     *         console.log(result);
     *         // false
     *         // result is false since NOT every file exists
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     */
    function every(coll, iteratee, callback) {
        return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)
    }
    var every$1 = awaitify(every, 3);

    /**
     * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.
     *
     * @name everyLimit
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.every]{@link module:Collections.every}
     * @alias allLimit
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {number} limit - The maximum number of async operations at a time.
     * @param {AsyncFunction} iteratee - An async truth test to apply to each item
     * in the collection in parallel.
     * The iteratee must complete with a boolean result value.
     * Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called after all the
     * `iteratee` functions have finished. Result will be either `true` or `false`
     * depending on the values of the async tests. Invoked with (err, result).
     * @returns {Promise} a promise, if no callback provided
     */
    function everyLimit(coll, limit, iteratee, callback) {
        return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)
    }
    var everyLimit$1 = awaitify(everyLimit, 4);

    /**
     * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.
     *
     * @name everySeries
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.every]{@link module:Collections.every}
     * @alias allSeries
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {AsyncFunction} iteratee - An async truth test to apply to each item
     * in the collection in series.
     * The iteratee must complete with a boolean result value.
     * Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called after all the
     * `iteratee` functions have finished. Result will be either `true` or `false`
     * depending on the values of the async tests. Invoked with (err, result).
     * @returns {Promise} a promise, if no callback provided
     */
    function everySeries(coll, iteratee, callback) {
        return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)
    }
    var everySeries$1 = awaitify(everySeries, 3);

    function filterArray(eachfn, arr, iteratee, callback) {
        var truthValues = new Array(arr.length);
        eachfn(arr, (x, index, iterCb) => {
            iteratee(x, (err, v) => {
                truthValues[index] = !!v;
                iterCb(err);
            });
        }, err => {
            if (err) return callback(err);
            var results = [];
            for (var i = 0; i < arr.length; i++) {
                if (truthValues[i]) results.push(arr[i]);
            }
            callback(null, results);
        });
    }

    function filterGeneric(eachfn, coll, iteratee, callback) {
        var results = [];
        eachfn(coll, (x, index, iterCb) => {
            iteratee(x, (err, v) => {
                if (err) return iterCb(err);
                if (v) {
                    results.push({index, value: x});
                }
                iterCb(err);
            });
        }, err => {
            if (err) return callback(err);
            callback(null, results
                .sort((a, b) => a.index - b.index)
                .map(v => v.value));
        });
    }

    function _filter(eachfn, coll, iteratee, callback) {
        var filter = isArrayLike(coll) ? filterArray : filterGeneric;
        return filter(eachfn, coll, wrapAsync(iteratee), callback);
    }

    /**
     * Returns a new array of all the values in `coll` which pass an async truth
     * test. This operation is performed in parallel, but the results array will be
     * in the same order as the original.
     *
     * @name filter
     * @static
     * @memberOf module:Collections
     * @method
     * @alias select
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {Function} iteratee - A truth test to apply to each item in `coll`.
     * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
     * with a boolean argument once it has completed. Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called after all the
     * `iteratee` functions have finished. Invoked with (err, results).
     * @returns {Promise} a promise, if no callback provided
     * @example
     *
     * // dir1 is a directory that contains file1.txt, file2.txt
     * // dir2 is a directory that contains file3.txt, file4.txt
     * // dir3 is a directory that contains file5.txt
     *
     * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];
     *
     * // asynchronous function that checks if a file exists
     * function fileExists(file, callback) {
     *    fs.access(file, fs.constants.F_OK, (err) => {
     *        callback(null, !err);
     *    });
     * }
     *
     * // Using callbacks
     * async.filter(files, fileExists, function(err, results) {
     *    if(err) {
     *        console.log(err);
     *    } else {
     *        console.log(results);
     *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]
     *        // results is now an array of the existing files
     *    }
     * });
     *
     * // Using Promises
     * async.filter(files, fileExists)
     * .then(results => {
     *     console.log(results);
     *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]
     *     // results is now an array of the existing files
     * }).catch(err => {
     *     console.log(err);
     * });
     *
     * // Using async/await
     * async () => {
     *     try {
     *         let results = await async.filter(files, fileExists);
     *         console.log(results);
     *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]
     *         // results is now an array of the existing files
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     */
    function filter (coll, iteratee, callback) {
        return _filter(eachOf$1, coll, iteratee, callback)
    }
    var filter$1 = awaitify(filter, 3);

    /**
     * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a
     * time.
     *
     * @name filterLimit
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.filter]{@link module:Collections.filter}
     * @alias selectLimit
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {number} limit - The maximum number of async operations at a time.
     * @param {Function} iteratee - A truth test to apply to each item in `coll`.
     * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
     * with a boolean argument once it has completed. Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called after all the
     * `iteratee` functions have finished. Invoked with (err, results).
     * @returns {Promise} a promise, if no callback provided
     */
    function filterLimit (coll, limit, iteratee, callback) {
        return _filter(eachOfLimit(limit), coll, iteratee, callback)
    }
    var filterLimit$1 = awaitify(filterLimit, 4);

    /**
     * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.
     *
     * @name filterSeries
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.filter]{@link module:Collections.filter}
     * @alias selectSeries
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {Function} iteratee - A truth test to apply to each item in `coll`.
     * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
     * with a boolean argument once it has completed. Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called after all the
     * `iteratee` functions have finished. Invoked with (err, results)
     * @returns {Promise} a promise, if no callback provided
     */
    function filterSeries (coll, iteratee, callback) {
        return _filter(eachOfSeries$1, coll, iteratee, callback)
    }
    var filterSeries$1 = awaitify(filterSeries, 3);

    /**
     * Calls the asynchronous function `fn` with a callback parameter that allows it
     * to call itself again, in series, indefinitely.

     * If an error is passed to the callback then `errback` is called with the
     * error, and execution stops, otherwise it will never be called.
     *
     * @name forever
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @category Control Flow
     * @param {AsyncFunction} fn - an async function to call repeatedly.
     * Invoked with (next).
     * @param {Function} [errback] - when `fn` passes an error to it's callback,
     * this function will be called, and execution stops. Invoked with (err).
     * @returns {Promise} a promise that rejects if an error occurs and an errback
     * is not passed
     * @example
     *
     * async.forever(
     *     function(next) {
     *         // next is suitable for passing to things that need a callback(err [, whatever]);
     *         // it will result in this function being called again.
     *     },
     *     function(err) {
     *         // if next is called with a value in its first parameter, it will appear
     *         // in here as 'err', and execution will stop.
     *     }
     * );
     */
    function forever(fn, errback) {
        var done = onlyOnce(errback);
        var task = wrapAsync(ensureAsync(fn));

        function next(err) {
            if (err) return done(err);
            if (err === false) return;
            task(next);
        }
        return next();
    }
    var forever$1 = awaitify(forever, 2);

    /**
     * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.
     *
     * @name groupByLimit
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.groupBy]{@link module:Collections.groupBy}
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {number} limit - The maximum number of async operations at a time.
     * @param {AsyncFunction} iteratee - An async function to apply to each item in
     * `coll`.
     * The iteratee should complete with a `key` to group the value under.
     * Invoked with (value, callback).
     * @param {Function} [callback] - A callback which is called when all `iteratee`
     * functions have finished, or an error occurs. Result is an `Object` whoses
     * properties are arrays of values which returned the corresponding key.
     * @returns {Promise} a promise, if no callback is passed
     */
    function groupByLimit(coll, limit, iteratee, callback) {
        var _iteratee = wrapAsync(iteratee);
        return mapLimit$1(coll, limit, (val, iterCb) => {
            _iteratee(val, (err, key) => {
                if (err) return iterCb(err);
                return iterCb(err, {key, val});
            });
        }, (err, mapResults) => {
            var result = {};
            // from MDN, handle object having an `hasOwnProperty` prop
            var {hasOwnProperty} = Object.prototype;

            for (var i = 0; i < mapResults.length; i++) {
                if (mapResults[i]) {
                    var {key} = mapResults[i];
                    var {val} = mapResults[i];

                    if (hasOwnProperty.call(result, key)) {
                        result[key].push(val);
                    } else {
                        result[key] = [val];
                    }
                }
            }

            return callback(err, result);
        });
    }

    var groupByLimit$1 = awaitify(groupByLimit, 4);

    /**
     * Returns a new object, where each value corresponds to an array of items, from
     * `coll`, that returned the corresponding key. That is, the keys of the object
     * correspond to the values passed to the `iteratee` callback.
     *
     * Note: Since this function applies the `iteratee` to each item in parallel,
     * there is no guarantee that the `iteratee` functions will complete in order.
     * However, the values for each key in the `result` will be in the same order as
     * the original `coll`. For Objects, the values will roughly be in the order of
     * the original Objects' keys (but this can vary across JavaScript engines).
     *
     * @name groupBy
     * @static
     * @memberOf module:Collections
     * @method
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {AsyncFunction} iteratee - An async function to apply to each item in
     * `coll`.
     * The iteratee should complete with a `key` to group the value under.
     * Invoked with (value, callback).
     * @param {Function} [callback] - A callback which is called when all `iteratee`
     * functions have finished, or an error occurs. Result is an `Object` whoses
     * properties are arrays of values which returned the corresponding key.
     * @returns {Promise} a promise, if no callback is passed
     * @example
     *
     * // dir1 is a directory that contains file1.txt, file2.txt
     * // dir2 is a directory that contains file3.txt, file4.txt
     * // dir3 is a directory that contains file5.txt
     * // dir4 does not exist
     *
     * const files = ['dir1/file1.txt','dir2','dir4']
     *
     * // asynchronous function that detects file type as none, file, or directory
     * function detectFile(file, callback) {
     *     fs.stat(file, function(err, stat) {
     *         if (err) {
     *             return callback(null, 'none');
     *         }
     *         callback(null, stat.isDirectory() ? 'directory' : 'file');
     *     });
     * }
     *
     * //Using callbacks
     * async.groupBy(files, detectFile, function(err, result) {
     *     if(err) {
     *         console.log(err);
     *     } else {
     *	       console.log(result);
     *         // {
     *         //     file: [ 'dir1/file1.txt' ],
     *         //     none: [ 'dir4' ],
     *         //     directory: [ 'dir2']
     *         // }
     *         // result is object containing the files grouped by type
     *     }
     * });
     *
     * // Using Promises
     * async.groupBy(files, detectFile)
     * .then( result => {
     *     console.log(result);
     *     // {
     *     //     file: [ 'dir1/file1.txt' ],
     *     //     none: [ 'dir4' ],
     *     //     directory: [ 'dir2']
     *     // }
     *     // result is object containing the files grouped by type
     * }).catch( err => {
     *     console.log(err);
     * });
     *
     * // Using async/await
     * async () => {
     *     try {
     *         let result = await async.groupBy(files, detectFile);
     *         console.log(result);
     *         // {
     *         //     file: [ 'dir1/file1.txt' ],
     *         //     none: [ 'dir4' ],
     *         //     directory: [ 'dir2']
     *         // }
     *         // result is object containing the files grouped by type
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     */
    function groupBy (coll, iteratee, callback) {
        return groupByLimit$1(coll, Infinity, iteratee, callback)
    }

    /**
     * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.
     *
     * @name groupBySeries
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.groupBy]{@link module:Collections.groupBy}
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {AsyncFunction} iteratee - An async function to apply to each item in
     * `coll`.
     * The iteratee should complete with a `key` to group the value under.
     * Invoked with (value, callback).
     * @param {Function} [callback] - A callback which is called when all `iteratee`
     * functions have finished, or an error occurs. Result is an `Object` whose
     * properties are arrays of values which returned the corresponding key.
     * @returns {Promise} a promise, if no callback is passed
     */
    function groupBySeries (coll, iteratee, callback) {
        return groupByLimit$1(coll, 1, iteratee, callback)
    }

    /**
     * Logs the result of an `async` function to the `console`. Only works in
     * Node.js or in browsers that support `console.log` and `console.error` (such
     * as FF and Chrome). If multiple arguments are returned from the async
     * function, `console.log` is called on each argument in order.
     *
     * @name log
     * @static
     * @memberOf module:Utils
     * @method
     * @category Util
     * @param {AsyncFunction} function - The function you want to eventually apply
     * all arguments to.
     * @param {...*} arguments... - Any number of arguments to apply to the function.
     * @example
     *
     * // in a module
     * var hello = function(name, callback) {
     *     setTimeout(function() {
     *         callback(null, 'hello ' + name);
     *     }, 1000);
     * };
     *
     * // in the node repl
     * node> async.log(hello, 'world');
     * 'hello world'
     */
    var log = consoleFunc('log');

    /**
     * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a
     * time.
     *
     * @name mapValuesLimit
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.mapValues]{@link module:Collections.mapValues}
     * @category Collection
     * @param {Object} obj - A collection to iterate over.
     * @param {number} limit - The maximum number of async operations at a time.
     * @param {AsyncFunction} iteratee - A function to apply to each value and key
     * in `coll`.
     * The iteratee should complete with the transformed value as its result.
     * Invoked with (value, key, callback).
     * @param {Function} [callback] - A callback which is called when all `iteratee`
     * functions have finished, or an error occurs. `result` is a new object consisting
     * of each key from `obj`, with each transformed value on the right-hand side.
     * Invoked with (err, result).
     * @returns {Promise} a promise, if no callback is passed
     */
    function mapValuesLimit(obj, limit, iteratee, callback) {
        callback = once(callback);
        var newObj = {};
        var _iteratee = wrapAsync(iteratee);
        return eachOfLimit(limit)(obj, (val, key, next) => {
            _iteratee(val, key, (err, result) => {
                if (err) return next(err);
                newObj[key] = result;
                next(err);
            });
        }, err => callback(err, newObj));
    }

    var mapValuesLimit$1 = awaitify(mapValuesLimit, 4);

    /**
     * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.
     *
     * Produces a new Object by mapping each value of `obj` through the `iteratee`
     * function. The `iteratee` is called each `value` and `key` from `obj` and a
     * callback for when it has finished processing. Each of these callbacks takes
     * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`
     * passes an error to its callback, the main `callback` (for the `mapValues`
     * function) is immediately called with the error.
     *
     * Note, the order of the keys in the result is not guaranteed.  The keys will
     * be roughly in the order they complete, (but this is very engine-specific)
     *
     * @name mapValues
     * @static
     * @memberOf module:Collections
     * @method
     * @category Collection
     * @param {Object} obj - A collection to iterate over.
     * @param {AsyncFunction} iteratee - A function to apply to each value and key
     * in `coll`.
     * The iteratee should complete with the transformed value as its result.
     * Invoked with (value, key, callback).
     * @param {Function} [callback] - A callback which is called when all `iteratee`
     * functions have finished, or an error occurs. `result` is a new object consisting
     * of each key from `obj`, with each transformed value on the right-hand side.
     * Invoked with (err, result).
     * @returns {Promise} a promise, if no callback is passed
     * @example
     *
     * // file1.txt is a file that is 1000 bytes in size
     * // file2.txt is a file that is 2000 bytes in size
     * // file3.txt is a file that is 3000 bytes in size
     * // file4.txt does not exist
     *
     * const fileMap = {
     *     f1: 'file1.txt',
     *     f2: 'file2.txt',
     *     f3: 'file3.txt'
     * };
     *
     * const withMissingFileMap = {
     *     f1: 'file1.txt',
     *     f2: 'file2.txt',
     *     f3: 'file4.txt'
     * };
     *
     * // asynchronous function that returns the file size in bytes
     * function getFileSizeInBytes(file, key, callback) {
     *     fs.stat(file, function(err, stat) {
     *         if (err) {
     *             return callback(err);
     *         }
     *         callback(null, stat.size);
     *     });
     * }
     *
     * // Using callbacks
     * async.mapValues(fileMap, getFileSizeInBytes, function(err, result) {
     *     if (err) {
     *         console.log(err);
     *     } else {
     *         console.log(result);
     *         // result is now a map of file size in bytes for each file, e.g.
     *         // {
     *         //     f1: 1000,
     *         //     f2: 2000,
     *         //     f3: 3000
     *         // }
     *     }
     * });
     *
     * // Error handling
     * async.mapValues(withMissingFileMap, getFileSizeInBytes, function(err, result) {
     *     if (err) {
     *         console.log(err);
     *         // [ Error: ENOENT: no such file or directory ]
     *     } else {
     *         console.log(result);
     *     }
     * });
     *
     * // Using Promises
     * async.mapValues(fileMap, getFileSizeInBytes)
     * .then( result => {
     *     console.log(result);
     *     // result is now a map of file size in bytes for each file, e.g.
     *     // {
     *     //     f1: 1000,
     *     //     f2: 2000,
     *     //     f3: 3000
     *     // }
     * }).catch (err => {
     *     console.log(err);
     * });
     *
     * // Error Handling
     * async.mapValues(withMissingFileMap, getFileSizeInBytes)
     * .then( result => {
     *     console.log(result);
     * }).catch (err => {
     *     console.log(err);
     *     // [ Error: ENOENT: no such file or directory ]
     * });
     *
     * // Using async/await
     * async () => {
     *     try {
     *         let result = await async.mapValues(fileMap, getFileSizeInBytes);
     *         console.log(result);
     *         // result is now a map of file size in bytes for each file, e.g.
     *         // {
     *         //     f1: 1000,
     *         //     f2: 2000,
     *         //     f3: 3000
     *         // }
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     * // Error Handling
     * async () => {
     *     try {
     *         let result = await async.mapValues(withMissingFileMap, getFileSizeInBytes);
     *         console.log(result);
     *     }
     *     catch (err) {
     *         console.log(err);
     *         // [ Error: ENOENT: no such file or directory ]
     *     }
     * }
     *
     */
    function mapValues(obj, iteratee, callback) {
        return mapValuesLimit$1(obj, Infinity, iteratee, callback)
    }

    /**
     * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.
     *
     * @name mapValuesSeries
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.mapValues]{@link module:Collections.mapValues}
     * @category Collection
     * @param {Object} obj - A collection to iterate over.
     * @param {AsyncFunction} iteratee - A function to apply to each value and key
     * in `coll`.
     * The iteratee should complete with the transformed value as its result.
     * Invoked with (value, key, callback).
     * @param {Function} [callback] - A callback which is called when all `iteratee`
     * functions have finished, or an error occurs. `result` is a new object consisting
     * of each key from `obj`, with each transformed value on the right-hand side.
     * Invoked with (err, result).
     * @returns {Promise} a promise, if no callback is passed
     */
    function mapValuesSeries(obj, iteratee, callback) {
        return mapValuesLimit$1(obj, 1, iteratee, callback)
    }

    /**
     * Caches the results of an async function. When creating a hash to store
     * function results against, the callback is omitted from the hash and an
     * optional hash function can be used.
     *
     * **Note: if the async function errs, the result will not be cached and
     * subsequent calls will call the wrapped function.**
     *
     * If no hash function is specified, the first argument is used as a hash key,
     * which may work reasonably if it is a string or a data type that converts to a
     * distinct string. Note that objects and arrays will not behave reasonably.
     * Neither will cases where the other arguments are significant. In such cases,
     * specify your own hash function.
     *
     * The cache of results is exposed as the `memo` property of the function
     * returned by `memoize`.
     *
     * @name memoize
     * @static
     * @memberOf module:Utils
     * @method
     * @category Util
     * @param {AsyncFunction} fn - The async function to proxy and cache results from.
     * @param {Function} hasher - An optional function for generating a custom hash
     * for storing results. It has all the arguments applied to it apart from the
     * callback, and must be synchronous.
     * @returns {AsyncFunction} a memoized version of `fn`
     * @example
     *
     * var slow_fn = function(name, callback) {
     *     // do something
     *     callback(null, result);
     * };
     * var fn = async.memoize(slow_fn);
     *
     * // fn can now be used as if it were slow_fn
     * fn('some name', function() {
     *     // callback
     * });
     */
    function memoize(fn, hasher = v => v) {
        var memo = Object.create(null);
        var queues = Object.create(null);
        var _fn = wrapAsync(fn);
        var memoized = initialParams((args, callback) => {
            var key = hasher(...args);
            if (key in memo) {
                setImmediate$1(() => callback(null, ...memo[key]));
            } else if (key in queues) {
                queues[key].push(callback);
            } else {
                queues[key] = [callback];
                _fn(...args, (err, ...resultArgs) => {
                    // #1465 don't memoize if an error occurred
                    if (!err) {
                        memo[key] = resultArgs;
                    }
                    var q = queues[key];
                    delete queues[key];
                    for (var i = 0, l = q.length; i < l; i++) {
                        q[i](err, ...resultArgs);
                    }
                });
            }
        });
        memoized.memo = memo;
        memoized.unmemoized = fn;
        return memoized;
    }

    /**
     * Calls `callback` on a later loop around the event loop. In Node.js this just
     * calls `process.nextTick`.  In the browser it will use `setImmediate` if
     * available, otherwise `setTimeout(callback, 0)`, which means other higher
     * priority events may precede the execution of `callback`.
     *
     * This is used internally for browser-compatibility purposes.
     *
     * @name nextTick
     * @static
     * @memberOf module:Utils
     * @method
     * @see [async.setImmediate]{@link module:Utils.setImmediate}
     * @category Util
     * @param {Function} callback - The function to call on a later loop around
     * the event loop. Invoked with (args...).
     * @param {...*} args... - any number of additional arguments to pass to the
     * callback on the next tick.
     * @example
     *
     * var call_order = [];
     * async.nextTick(function() {
     *     call_order.push('two');
     *     // call_order now equals ['one','two']
     * });
     * call_order.push('one');
     *
     * async.setImmediate(function (a, b, c) {
     *     // a, b, and c equal 1, 2, and 3
     * }, 1, 2, 3);
     */
    var _defer$1;

    if (hasNextTick) {
        _defer$1 = process.nextTick;
    } else if (hasSetImmediate) {
        _defer$1 = setImmediate;
    } else {
        _defer$1 = fallback;
    }

    var nextTick = wrap(_defer$1);

    var _parallel = awaitify((eachfn, tasks, callback) => {
        var results = isArrayLike(tasks) ? [] : {};

        eachfn(tasks, (task, key, taskCb) => {
            wrapAsync(task)((err, ...result) => {
                if (result.length < 2) {
                    [result] = result;
                }
                results[key] = result;
                taskCb(err);
            });
        }, err => callback(err, results));
    }, 3);

    /**
     * Run the `tasks` collection of functions in parallel, without waiting until
     * the previous function has completed. If any of the functions pass an error to
     * its callback, the main `callback` is immediately called with the value of the
     * error. Once the `tasks` have completed, the results are passed to the final
     * `callback` as an array.
     *
     * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about
     * parallel execution of code.  If your tasks do not use any timers or perform
     * any I/O, they will actually be executed in series.  Any synchronous setup
     * sections for each task will happen one after the other.  JavaScript remains
     * single-threaded.
     *
     * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the
     * execution of other tasks when a task fails.
     *
     * It is also possible to use an object instead of an array. Each property will
     * be run as a function and the results will be passed to the final `callback`
     * as an object instead of an array. This can be a more readable way of handling
     * results from {@link async.parallel}.
     *
     * @name parallel
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @category Control Flow
     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of
     * [async functions]{@link AsyncFunction} to run.
     * Each async function can complete with any number of optional `result` values.
     * @param {Function} [callback] - An optional callback to run once all the
     * functions have completed successfully. This function gets a results array
     * (or object) containing all the result arguments passed to the task callbacks.
     * Invoked with (err, results).
     * @returns {Promise} a promise, if a callback is not passed
     *
     * @example
     *
     * //Using Callbacks
     * async.parallel([
     *     function(callback) {
     *         setTimeout(function() {
     *             callback(null, 'one');
     *         }, 200);
     *     },
     *     function(callback) {
     *         setTimeout(function() {
     *             callback(null, 'two');
     *         }, 100);
     *     }
     * ], function(err, results) {
     *     console.log(results);
     *     // results is equal to ['one','two'] even though
     *     // the second function had a shorter timeout.
     * });
     *
     * // an example using an object instead of an array
     * async.parallel({
     *     one: function(callback) {
     *         setTimeout(function() {
     *             callback(null, 1);
     *         }, 200);
     *     },
     *     two: function(callback) {
     *         setTimeout(function() {
     *             callback(null, 2);
     *         }, 100);
     *     }
     * }, function(err, results) {
     *     console.log(results);
     *     // results is equal to: { one: 1, two: 2 }
     * });
     *
     * //Using Promises
     * async.parallel([
     *     function(callback) {
     *         setTimeout(function() {
     *             callback(null, 'one');
     *         }, 200);
     *     },
     *     function(callback) {
     *         setTimeout(function() {
     *             callback(null, 'two');
     *         }, 100);
     *     }
     * ]).then(results => {
     *     console.log(results);
     *     // results is equal to ['one','two'] even though
     *     // the second function had a shorter timeout.
     * }).catch(err => {
     *     console.log(err);
     * });
     *
     * // an example using an object instead of an array
     * async.parallel({
     *     one: function(callback) {
     *         setTimeout(function() {
     *             callback(null, 1);
     *         }, 200);
     *     },
     *     two: function(callback) {
     *         setTimeout(function() {
     *             callback(null, 2);
     *         }, 100);
     *     }
     * }).then(results => {
     *     console.log(results);
     *     // results is equal to: { one: 1, two: 2 }
     * }).catch(err => {
     *     console.log(err);
     * });
     *
     * //Using async/await
     * async () => {
     *     try {
     *         let results = await async.parallel([
     *             function(callback) {
     *                 setTimeout(function() {
     *                     callback(null, 'one');
     *                 }, 200);
     *             },
     *             function(callback) {
     *                 setTimeout(function() {
     *                     callback(null, 'two');
     *                 }, 100);
     *             }
     *         ]);
     *         console.log(results);
     *         // results is equal to ['one','two'] even though
     *         // the second function had a shorter timeout.
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     * // an example using an object instead of an array
     * async () => {
     *     try {
     *         let results = await async.parallel({
     *             one: function(callback) {
     *                 setTimeout(function() {
     *                     callback(null, 1);
     *                 }, 200);
     *             },
     *            two: function(callback) {
     *                 setTimeout(function() {
     *                     callback(null, 2);
     *                 }, 100);
     *            }
     *         });
     *         console.log(results);
     *         // results is equal to: { one: 1, two: 2 }
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     */
    function parallel(tasks, callback) {
        return _parallel(eachOf$1, tasks, callback);
    }

    /**
     * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a
     * time.
     *
     * @name parallelLimit
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @see [async.parallel]{@link module:ControlFlow.parallel}
     * @category Control Flow
     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of
     * [async functions]{@link AsyncFunction} to run.
     * Each async function can complete with any number of optional `result` values.
     * @param {number} limit - The maximum number of async operations at a time.
     * @param {Function} [callback] - An optional callback to run once all the
     * functions have completed successfully. This function gets a results array
     * (or object) containing all the result arguments passed to the task callbacks.
     * Invoked with (err, results).
     * @returns {Promise} a promise, if a callback is not passed
     */
    function parallelLimit(tasks, limit, callback) {
        return _parallel(eachOfLimit(limit), tasks, callback);
    }

    /**
     * A queue of tasks for the worker function to complete.
     * @typedef {Iterable} QueueObject
     * @memberOf module:ControlFlow
     * @property {Function} length - a function returning the number of items
     * waiting to be processed. Invoke with `queue.length()`.
     * @property {boolean} started - a boolean indicating whether or not any
     * items have been pushed and processed by the queue.
     * @property {Function} running - a function returning the number of items
     * currently being processed. Invoke with `queue.running()`.
     * @property {Function} workersList - a function returning the array of items
     * currently being processed. Invoke with `queue.workersList()`.
     * @property {Function} idle - a function returning false if there are items
     * waiting or being processed, or true if not. Invoke with `queue.idle()`.
     * @property {number} concurrency - an integer for determining how many `worker`
     * functions should be run in parallel. This property can be changed after a
     * `queue` is created to alter the concurrency on-the-fly.
     * @property {number} payload - an integer that specifies how many items are
     * passed to the worker function at a time. only applies if this is a
     * [cargo]{@link module:ControlFlow.cargo} object
     * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`
     * once the `worker` has finished processing the task. Instead of a single task,
     * a `tasks` array can be submitted. The respective callback is used for every
     * task in the list. Invoke with `queue.push(task, [callback])`,
     * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.
     * Invoke with `queue.unshift(task, [callback])`.
     * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns
     * a promise that rejects if an error occurs.
     * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns
     * a promise that rejects if an error occurs.
     * @property {Function} remove - remove items from the queue that match a test
     * function.  The test function will be passed an object with a `data` property,
     * and a `priority` property, if this is a
     * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.
     * Invoked with `queue.remove(testFn)`, where `testFn` is of the form
     * `function ({data, priority}) {}` and returns a Boolean.
     * @property {Function} saturated - a function that sets a callback that is
     * called when the number of running workers hits the `concurrency` limit, and
     * further tasks will be queued.  If the callback is omitted, `q.saturated()`
     * returns a promise for the next occurrence.
     * @property {Function} unsaturated - a function that sets a callback that is
     * called when the number of running workers is less than the `concurrency` &
     * `buffer` limits, and further tasks will not be queued. If the callback is
     * omitted, `q.unsaturated()` returns a promise for the next occurrence.
     * @property {number} buffer - A minimum threshold buffer in order to say that
     * the `queue` is `unsaturated`.
     * @property {Function} empty - a function that sets a callback that is called
     * when the last item from the `queue` is given to a `worker`. If the callback
     * is omitted, `q.empty()` returns a promise for the next occurrence.
     * @property {Function} drain - a function that sets a callback that is called
     * when the last item from the `queue` has returned from the `worker`. If the
     * callback is omitted, `q.drain()` returns a promise for the next occurrence.
     * @property {Function} error - a function that sets a callback that is called
     * when a task errors. Has the signature `function(error, task)`. If the
     * callback is omitted, `error()` returns a promise that rejects on the next
     * error.
     * @property {boolean} paused - a boolean for determining whether the queue is
     * in a paused state.
     * @property {Function} pause - a function that pauses the processing of tasks
     * until `resume()` is called. Invoke with `queue.pause()`.
     * @property {Function} resume - a function that resumes the processing of
     * queued tasks when the queue is paused. Invoke with `queue.resume()`.
     * @property {Function} kill - a function that removes the `drain` callback and
     * empties remaining tasks from the queue forcing it to go idle. No more tasks
     * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.
     *
     * @example
     * const q = async.queue(worker, 2)
     * q.push(item1)
     * q.push(item2)
     * q.push(item3)
     * // queues are iterable, spread into an array to inspect
     * const items = [...q] // [item1, item2, item3]
     * // or use for of
     * for (let item of q) {
     *     console.log(item)
     * }
     *
     * q.drain(() => {
     *     console.log('all done')
     * })
     * // or
     * await q.drain()
     */

    /**
     * Creates a `queue` object with the specified `concurrency`. Tasks added to the
     * `queue` are processed in parallel (up to the `concurrency` limit). If all
     * `worker`s are in progress, the task is queued until one becomes available.
     * Once a `worker` completes a `task`, that `task`'s callback is called.
     *
     * @name queue
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @category Control Flow
     * @param {AsyncFunction} worker - An async function for processing a queued task.
     * If you want to handle errors from an individual task, pass a callback to
     * `q.push()`. Invoked with (task, callback).
     * @param {number} [concurrency=1] - An `integer` for determining how many
     * `worker` functions should be run in parallel.  If omitted, the concurrency
     * defaults to `1`.  If the concurrency is `0`, an error is thrown.
     * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be
     * attached as certain properties to listen for specific events during the
     * lifecycle of the queue.
     * @example
     *
     * // create a queue object with concurrency 2
     * var q = async.queue(function(task, callback) {
     *     console.log('hello ' + task.name);
     *     callback();
     * }, 2);
     *
     * // assign a callback
     * q.drain(function() {
     *     console.log('all items have been processed');
     * });
     * // or await the end
     * await q.drain()
     *
     * // assign an error callback
     * q.error(function(err, task) {
     *     console.error('task experienced an error');
     * });
     *
     * // add some items to the queue
     * q.push({name: 'foo'}, function(err) {
     *     console.log('finished processing foo');
     * });
     * // callback is optional
     * q.push({name: 'bar'});
     *
     * // add some items to the queue (batch-wise)
     * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
     *     console.log('finished processing item');
     * });
     *
     * // add some items to the front of the queue
     * q.unshift({name: 'bar'}, function (err) {
     *     console.log('finished processing bar');
     * });
     */
    function queue$1 (worker, concurrency) {
        var _worker = wrapAsync(worker);
        return queue((items, cb) => {
            _worker(items[0], cb);
        }, concurrency, 1);
    }

    // Binary min-heap implementation used for priority queue.
    // Implementation is stable, i.e. push time is considered for equal priorities
    class Heap {
        constructor() {
            this.heap = [];
            this.pushCount = Number.MIN_SAFE_INTEGER;
        }

        get length() {
            return this.heap.length;
        }

        empty () {
            this.heap = [];
            return this;
        }

        percUp(index) {
            let p;

            while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {
                let t = this.heap[index];
                this.heap[index] = this.heap[p];
                this.heap[p] = t;

                index = p;
            }
        }

        percDown(index) {
            let l;

            while ((l=leftChi(index)) < this.heap.length) {
                if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {
                    l = l+1;
                }

                if (smaller(this.heap[index], this.heap[l])) {
                    break;
                }

                let t = this.heap[index];
                this.heap[index] = this.heap[l];
                this.heap[l] = t;

                index = l;
            }
        }

        push(node) {
            node.pushCount = ++this.pushCount;
            this.heap.push(node);
            this.percUp(this.heap.length-1);
        }

        unshift(node) {
            return this.heap.push(node);
        }

        shift() {
            let [top] = this.heap;

            this.heap[0] = this.heap[this.heap.length-1];
            this.heap.pop();
            this.percDown(0);

            return top;
        }

        toArray() {
            return [...this];
        }

        *[Symbol.iterator] () {
            for (let i = 0; i < this.heap.length; i++) {
                yield this.heap[i].data;
            }
        }

        remove (testFn) {
            let j = 0;
            for (let i = 0; i < this.heap.length; i++) {
                if (!testFn(this.heap[i])) {
                    this.heap[j] = this.heap[i];
                    j++;
                }
            }

            this.heap.splice(j);

            for (let i = parent(this.heap.length-1); i >= 0; i--) {
                this.percDown(i);
            }

            return this;
        }
    }

    function leftChi(i) {
        return (i<<1)+1;
    }

    function parent(i) {
        return ((i+1)>>1)-1;
    }

    function smaller(x, y) {
        if (x.priority !== y.priority) {
            return x.priority < y.priority;
        }
        else {
            return x.pushCount < y.pushCount;
        }
    }

    /**
     * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and
     * completed in ascending priority order.
     *
     * @name priorityQueue
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @see [async.queue]{@link module:ControlFlow.queue}
     * @category Control Flow
     * @param {AsyncFunction} worker - An async function for processing a queued task.
     * If you want to handle errors from an individual task, pass a callback to
     * `q.push()`.
     * Invoked with (task, callback).
     * @param {number} concurrency - An `integer` for determining how many `worker`
     * functions should be run in parallel.  If omitted, the concurrency defaults to
     * `1`.  If the concurrency is `0`, an error is thrown.
     * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two
     * differences between `queue` and `priorityQueue` objects:
     * * `push(task, priority, [callback])` - `priority` should be a number. If an
     *   array of `tasks` is given, all tasks will be assigned the same priority.
     * * The `unshift` method was removed.
     */
    function priorityQueue(worker, concurrency) {
        // Start with a normal queue
        var q = queue$1(worker, concurrency);
        var processingScheduled = false;

        q._tasks = new Heap();

        // Override push to accept second parameter representing priority
        q.push = function(data, priority = 0, callback = () => {}) {
            if (typeof callback !== 'function') {
                throw new Error('task callback must be a function');
            }
            q.started = true;
            if (!Array.isArray(data)) {
                data = [data];
            }
            if (data.length === 0 && q.idle()) {
                // call drain immediately if there are no tasks
                return setImmediate$1(() => q.drain());
            }

            for (var i = 0, l = data.length; i < l; i++) {
                var item = {
                    data: data[i],
                    priority,
                    callback
                };

                q._tasks.push(item);
            }

            if (!processingScheduled) {
                processingScheduled = true;
                setImmediate$1(() => {
                    processingScheduled = false;
                    q.process();
                });
            }
        };

        // Remove unshift function
        delete q.unshift;

        return q;
    }

    /**
     * Runs the `tasks` array of functions in parallel, without waiting until the
     * previous function has completed. Once any of the `tasks` complete or pass an
     * error to its callback, the main `callback` is immediately called. It's
     * equivalent to `Promise.race()`.
     *
     * @name race
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @category Control Flow
     * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}
     * to run. Each function can complete with an optional `result` value.
     * @param {Function} callback - A callback to run once any of the functions have
     * completed. This function gets an error or result from the first function that
     * completed. Invoked with (err, result).
     * @returns undefined
     * @example
     *
     * async.race([
     *     function(callback) {
     *         setTimeout(function() {
     *             callback(null, 'one');
     *         }, 200);
     *     },
     *     function(callback) {
     *         setTimeout(function() {
     *             callback(null, 'two');
     *         }, 100);
     *     }
     * ],
     * // main callback
     * function(err, result) {
     *     // the result will be equal to 'two' as it finishes earlier
     * });
     */
    function race(tasks, callback) {
        callback = once(callback);
        if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));
        if (!tasks.length) return callback();
        for (var i = 0, l = tasks.length; i < l; i++) {
            wrapAsync(tasks[i])(callback);
        }
    }

    var race$1 = awaitify(race, 2);

    /**
     * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.
     *
     * @name reduceRight
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.reduce]{@link module:Collections.reduce}
     * @alias foldr
     * @category Collection
     * @param {Array} array - A collection to iterate over.
     * @param {*} memo - The initial state of the reduction.
     * @param {AsyncFunction} iteratee - A function applied to each item in the
     * array to produce the next step in the reduction.
     * The `iteratee` should complete with the next state of the reduction.
     * If the iteratee completes with an error, the reduction is stopped and the
     * main `callback` is immediately called with the error.
     * Invoked with (memo, item, callback).
     * @param {Function} [callback] - A callback which is called after all the
     * `iteratee` functions have finished. Result is the reduced value. Invoked with
     * (err, result).
     * @returns {Promise} a promise, if no callback is passed
     */
    function reduceRight (array, memo, iteratee, callback) {
        var reversed = [...array].reverse();
        return reduce$1(reversed, memo, iteratee, callback);
    }

    /**
     * Wraps the async function in another function that always completes with a
     * result object, even when it errors.
     *
     * The result object has either the property `error` or `value`.
     *
     * @name reflect
     * @static
     * @memberOf module:Utils
     * @method
     * @category Util
     * @param {AsyncFunction} fn - The async function you want to wrap
     * @returns {Function} - A function that always passes null to it's callback as
     * the error. The second argument to the callback will be an `object` with
     * either an `error` or a `value` property.
     * @example
     *
     * async.parallel([
     *     async.reflect(function(callback) {
     *         // do some stuff ...
     *         callback(null, 'one');
     *     }),
     *     async.reflect(function(callback) {
     *         // do some more stuff but error ...
     *         callback('bad stuff happened');
     *     }),
     *     async.reflect(function(callback) {
     *         // do some more stuff ...
     *         callback(null, 'two');
     *     })
     * ],
     * // optional callback
     * function(err, results) {
     *     // values
     *     // results[0].value = 'one'
     *     // results[1].error = 'bad stuff happened'
     *     // results[2].value = 'two'
     * });
     */
    function reflect(fn) {
        var _fn = wrapAsync(fn);
        return initialParams(function reflectOn(args, reflectCallback) {
            args.push((error, ...cbArgs) => {
                let retVal = {};
                if (error) {
                    retVal.error = error;
                }
                if (cbArgs.length > 0){
                    var value = cbArgs;
                    if (cbArgs.length <= 1) {
                        [value] = cbArgs;
                    }
                    retVal.value = value;
                }
                reflectCallback(null, retVal);
            });

            return _fn.apply(this, args);
        });
    }

    /**
     * A helper function that wraps an array or an object of functions with `reflect`.
     *
     * @name reflectAll
     * @static
     * @memberOf module:Utils
     * @method
     * @see [async.reflect]{@link module:Utils.reflect}
     * @category Util
     * @param {Array|Object|Iterable} tasks - The collection of
     * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.
     * @returns {Array} Returns an array of async functions, each wrapped in
     * `async.reflect`
     * @example
     *
     * let tasks = [
     *     function(callback) {
     *         setTimeout(function() {
     *             callback(null, 'one');
     *         }, 200);
     *     },
     *     function(callback) {
     *         // do some more stuff but error ...
     *         callback(new Error('bad stuff happened'));
     *     },
     *     function(callback) {
     *         setTimeout(function() {
     *             callback(null, 'two');
     *         }, 100);
     *     }
     * ];
     *
     * async.parallel(async.reflectAll(tasks),
     * // optional callback
     * function(err, results) {
     *     // values
     *     // results[0].value = 'one'
     *     // results[1].error = Error('bad stuff happened')
     *     // results[2].value = 'two'
     * });
     *
     * // an example using an object instead of an array
     * let tasks = {
     *     one: function(callback) {
     *         setTimeout(function() {
     *             callback(null, 'one');
     *         }, 200);
     *     },
     *     two: function(callback) {
     *         callback('two');
     *     },
     *     three: function(callback) {
     *         setTimeout(function() {
     *             callback(null, 'three');
     *         }, 100);
     *     }
     * };
     *
     * async.parallel(async.reflectAll(tasks),
     * // optional callback
     * function(err, results) {
     *     // values
     *     // results.one.value = 'one'
     *     // results.two.error = 'two'
     *     // results.three.value = 'three'
     * });
     */
    function reflectAll(tasks) {
        var results;
        if (Array.isArray(tasks)) {
            results = tasks.map(reflect);
        } else {
            results = {};
            Object.keys(tasks).forEach(key => {
                results[key] = reflect.call(this, tasks[key]);
            });
        }
        return results;
    }

    function reject(eachfn, arr, _iteratee, callback) {
        const iteratee = wrapAsync(_iteratee);
        return _filter(eachfn, arr, (value, cb) => {
            iteratee(value, (err, v) => {
                cb(err, !v);
            });
        }, callback);
    }

    /**
     * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.
     *
     * @name reject
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.filter]{@link module:Collections.filter}
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {Function} iteratee - An async truth test to apply to each item in
     * `coll`.
     * The should complete with a boolean value as its `result`.
     * Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called after all the
     * `iteratee` functions have finished. Invoked with (err, results).
     * @returns {Promise} a promise, if no callback is passed
     * @example
     *
     * // dir1 is a directory that contains file1.txt, file2.txt
     * // dir2 is a directory that contains file3.txt, file4.txt
     * // dir3 is a directory that contains file5.txt
     *
     * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];
     *
     * // asynchronous function that checks if a file exists
     * function fileExists(file, callback) {
     *    fs.access(file, fs.constants.F_OK, (err) => {
     *        callback(null, !err);
     *    });
     * }
     *
     * // Using callbacks
     * async.reject(fileList, fileExists, function(err, results) {
     *    // [ 'dir3/file6.txt' ]
     *    // results now equals an array of the non-existing files
     * });
     *
     * // Using Promises
     * async.reject(fileList, fileExists)
     * .then( results => {
     *     console.log(results);
     *     // [ 'dir3/file6.txt' ]
     *     // results now equals an array of the non-existing files
     * }).catch( err => {
     *     console.log(err);
     * });
     *
     * // Using async/await
     * async () => {
     *     try {
     *         let results = await async.reject(fileList, fileExists);
     *         console.log(results);
     *         // [ 'dir3/file6.txt' ]
     *         // results now equals an array of the non-existing files
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     */
    function reject$1 (coll, iteratee, callback) {
        return reject(eachOf$1, coll, iteratee, callback)
    }
    var reject$2 = awaitify(reject$1, 3);

    /**
     * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a
     * time.
     *
     * @name rejectLimit
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.reject]{@link module:Collections.reject}
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {number} limit - The maximum number of async operations at a time.
     * @param {Function} iteratee - An async truth test to apply to each item in
     * `coll`.
     * The should complete with a boolean value as its `result`.
     * Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called after all the
     * `iteratee` functions have finished. Invoked with (err, results).
     * @returns {Promise} a promise, if no callback is passed
     */
    function rejectLimit (coll, limit, iteratee, callback) {
        return reject(eachOfLimit(limit), coll, iteratee, callback)
    }
    var rejectLimit$1 = awaitify(rejectLimit, 4);

    /**
     * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.
     *
     * @name rejectSeries
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.reject]{@link module:Collections.reject}
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {Function} iteratee - An async truth test to apply to each item in
     * `coll`.
     * The should complete with a boolean value as its `result`.
     * Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called after all the
     * `iteratee` functions have finished. Invoked with (err, results).
     * @returns {Promise} a promise, if no callback is passed
     */
    function rejectSeries (coll, iteratee, callback) {
        return reject(eachOfSeries$1, coll, iteratee, callback)
    }
    var rejectSeries$1 = awaitify(rejectSeries, 3);

    function constant$1(value) {
        return function () {
            return value;
        }
    }

    /**
     * Attempts to get a successful response from `task` no more than `times` times
     * before returning an error. If the task is successful, the `callback` will be
     * passed the result of the successful task. If all attempts fail, the callback
     * will be passed the error and result (if any) of the final attempt.
     *
     * @name retry
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @category Control Flow
     * @see [async.retryable]{@link module:ControlFlow.retryable}
     * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an
     * object with `times` and `interval` or a number.
     * * `times` - The number of attempts to make before giving up.  The default
     *   is `5`.
     * * `interval` - The time to wait between retries, in milliseconds.  The
     *   default is `0`. The interval may also be specified as a function of the
     *   retry count (see example).
     * * `errorFilter` - An optional synchronous function that is invoked on
     *   erroneous result. If it returns `true` the retry attempts will continue;
     *   if the function returns `false` the retry flow is aborted with the current
     *   attempt's error and result being returned to the final callback.
     *   Invoked with (err).
     * * If `opts` is a number, the number specifies the number of times to retry,
     *   with the default interval of `0`.
     * @param {AsyncFunction} task - An async function to retry.
     * Invoked with (callback).
     * @param {Function} [callback] - An optional callback which is called when the
     * task has succeeded, or after the final failed attempt. It receives the `err`
     * and `result` arguments of the last attempt at completing the `task`. Invoked
     * with (err, results).
     * @returns {Promise} a promise if no callback provided
     *
     * @example
     *
     * // The `retry` function can be used as a stand-alone control flow by passing
     * // a callback, as shown below:
     *
     * // try calling apiMethod 3 times
     * async.retry(3, apiMethod, function(err, result) {
     *     // do something with the result
     * });
     *
     * // try calling apiMethod 3 times, waiting 200 ms between each retry
     * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {
     *     // do something with the result
     * });
     *
     * // try calling apiMethod 10 times with exponential backoff
     * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)
     * async.retry({
     *   times: 10,
     *   interval: function(retryCount) {
     *     return 50 * Math.pow(2, retryCount);
     *   }
     * }, apiMethod, function(err, result) {
     *     // do something with the result
     * });
     *
     * // try calling apiMethod the default 5 times no delay between each retry
     * async.retry(apiMethod, function(err, result) {
     *     // do something with the result
     * });
     *
     * // try calling apiMethod only when error condition satisfies, all other
     * // errors will abort the retry control flow and return to final callback
     * async.retry({
     *   errorFilter: function(err) {
     *     return err.message === 'Temporary error'; // only retry on a specific error
     *   }
     * }, apiMethod, function(err, result) {
     *     // do something with the result
     * });
     *
     * // to retry individual methods that are not as reliable within other
     * // control flow functions, use the `retryable` wrapper:
     * async.auto({
     *     users: api.getUsers.bind(api),
     *     payments: async.retryable(3, api.getPayments.bind(api))
     * }, function(err, results) {
     *     // do something with the results
     * });
     *
     */
    const DEFAULT_TIMES = 5;
    const DEFAULT_INTERVAL = 0;

    function retry(opts, task, callback) {
        var options = {
            times: DEFAULT_TIMES,
            intervalFunc: constant$1(DEFAULT_INTERVAL)
        };

        if (arguments.length < 3 && typeof opts === 'function') {
            callback = task || promiseCallback();
            task = opts;
        } else {
            parseTimes(options, opts);
            callback = callback || promiseCallback();
        }

        if (typeof task !== 'function') {
            throw new Error("Invalid arguments for async.retry");
        }

        var _task = wrapAsync(task);

        var attempt = 1;
        function retryAttempt() {
            _task((err, ...args) => {
                if (err === false) return
                if (err && attempt++ < options.times &&
                    (typeof options.errorFilter != 'function' ||
                        options.errorFilter(err))) {
                    setTimeout(retryAttempt, options.intervalFunc(attempt - 1));
                } else {
                    callback(err, ...args);
                }
            });
        }

        retryAttempt();
        return callback[PROMISE_SYMBOL]
    }

    function parseTimes(acc, t) {
        if (typeof t === 'object') {
            acc.times = +t.times || DEFAULT_TIMES;

            acc.intervalFunc = typeof t.interval === 'function' ?
                t.interval :
                constant$1(+t.interval || DEFAULT_INTERVAL);

            acc.errorFilter = t.errorFilter;
        } else if (typeof t === 'number' || typeof t === 'string') {
            acc.times = +t || DEFAULT_TIMES;
        } else {
            throw new Error("Invalid arguments for async.retry");
        }
    }

    /**
     * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method
     * wraps a task and makes it retryable, rather than immediately calling it
     * with retries.
     *
     * @name retryable
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @see [async.retry]{@link module:ControlFlow.retry}
     * @category Control Flow
     * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional
     * options, exactly the same as from `retry`, except for a `opts.arity` that
     * is the arity of the `task` function, defaulting to `task.length`
     * @param {AsyncFunction} task - the asynchronous function to wrap.
     * This function will be passed any arguments passed to the returned wrapper.
     * Invoked with (...args, callback).
     * @returns {AsyncFunction} The wrapped function, which when invoked, will
     * retry on an error, based on the parameters specified in `opts`.
     * This function will accept the same parameters as `task`.
     * @example
     *
     * async.auto({
     *     dep1: async.retryable(3, getFromFlakyService),
     *     process: ["dep1", async.retryable(3, function (results, cb) {
     *         maybeProcessData(results.dep1, cb);
     *     })]
     * }, callback);
     */
    function retryable (opts, task) {
        if (!task) {
            task = opts;
            opts = null;
        }
        let arity = (opts && opts.arity) || task.length;
        if (isAsync(task)) {
            arity += 1;
        }
        var _task = wrapAsync(task);
        return initialParams((args, callback) => {
            if (args.length < arity - 1 || callback == null) {
                args.push(callback);
                callback = promiseCallback();
            }
            function taskFn(cb) {
                _task(...args, cb);
            }

            if (opts) retry(opts, taskFn, callback);
            else retry(taskFn, callback);

            return callback[PROMISE_SYMBOL]
        });
    }

    /**
     * Run the functions in the `tasks` collection in series, each one running once
     * the previous function has completed. If any functions in the series pass an
     * error to its callback, no more functions are run, and `callback` is
     * immediately called with the value of the error. Otherwise, `callback`
     * receives an array of results when `tasks` have completed.
     *
     * It is also possible to use an object instead of an array. Each property will
     * be run as a function, and the results will be passed to the final `callback`
     * as an object instead of an array. This can be a more readable way of handling
     *  results from {@link async.series}.
     *
     * **Note** that while many implementations preserve the order of object
     * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)
     * explicitly states that
     *
     * > The mechanics and order of enumerating the properties is not specified.
     *
     * So if you rely on the order in which your series of functions are executed,
     * and want this to work on all platforms, consider using an array.
     *
     * @name series
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @category Control Flow
     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing
     * [async functions]{@link AsyncFunction} to run in series.
     * Each function can complete with any number of optional `result` values.
     * @param {Function} [callback] - An optional callback to run once all the
     * functions have completed. This function gets a results array (or object)
     * containing all the result arguments passed to the `task` callbacks. Invoked
     * with (err, result).
     * @return {Promise} a promise, if no callback is passed
     * @example
     *
     * //Using Callbacks
     * async.series([
     *     function(callback) {
     *         setTimeout(function() {
     *             // do some async task
     *             callback(null, 'one');
     *         }, 200);
     *     },
     *     function(callback) {
     *         setTimeout(function() {
     *             // then do another async task
     *             callback(null, 'two');
     *         }, 100);
     *     }
     * ], function(err, results) {
     *     console.log(results);
     *     // results is equal to ['one','two']
     * });
     *
     * // an example using objects instead of arrays
     * async.series({
     *     one: function(callback) {
     *         setTimeout(function() {
     *             // do some async task
     *             callback(null, 1);
     *         }, 200);
     *     },
     *     two: function(callback) {
     *         setTimeout(function() {
     *             // then do another async task
     *             callback(null, 2);
     *         }, 100);
     *     }
     * }, function(err, results) {
     *     console.log(results);
     *     // results is equal to: { one: 1, two: 2 }
     * });
     *
     * //Using Promises
     * async.series([
     *     function(callback) {
     *         setTimeout(function() {
     *             callback(null, 'one');
     *         }, 200);
     *     },
     *     function(callback) {
     *         setTimeout(function() {
     *             callback(null, 'two');
     *         }, 100);
     *     }
     * ]).then(results => {
     *     console.log(results);
     *     // results is equal to ['one','two']
     * }).catch(err => {
     *     console.log(err);
     * });
     *
     * // an example using an object instead of an array
     * async.series({
     *     one: function(callback) {
     *         setTimeout(function() {
     *             // do some async task
     *             callback(null, 1);
     *         }, 200);
     *     },
     *     two: function(callback) {
     *         setTimeout(function() {
     *             // then do another async task
     *             callback(null, 2);
     *         }, 100);
     *     }
     * }).then(results => {
     *     console.log(results);
     *     // results is equal to: { one: 1, two: 2 }
     * }).catch(err => {
     *     console.log(err);
     * });
     *
     * //Using async/await
     * async () => {
     *     try {
     *         let results = await async.series([
     *             function(callback) {
     *                 setTimeout(function() {
     *                     // do some async task
     *                     callback(null, 'one');
     *                 }, 200);
     *             },
     *             function(callback) {
     *                 setTimeout(function() {
     *                     // then do another async task
     *                     callback(null, 'two');
     *                 }, 100);
     *             }
     *         ]);
     *         console.log(results);
     *         // results is equal to ['one','two']
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     * // an example using an object instead of an array
     * async () => {
     *     try {
     *         let results = await async.parallel({
     *             one: function(callback) {
     *                 setTimeout(function() {
     *                     // do some async task
     *                     callback(null, 1);
     *                 }, 200);
     *             },
     *            two: function(callback) {
     *                 setTimeout(function() {
     *                     // then do another async task
     *                     callback(null, 2);
     *                 }, 100);
     *            }
     *         });
     *         console.log(results);
     *         // results is equal to: { one: 1, two: 2 }
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     */
    function series(tasks, callback) {
        return _parallel(eachOfSeries$1, tasks, callback);
    }

    /**
     * Returns `true` if at least one element in the `coll` satisfies an async test.
     * If any iteratee call returns `true`, the main `callback` is immediately
     * called.
     *
     * @name some
     * @static
     * @memberOf module:Collections
     * @method
     * @alias any
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {AsyncFunction} iteratee - An async truth test to apply to each item
     * in the collections in parallel.
     * The iteratee should complete with a boolean `result` value.
     * Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called as soon as any
     * iteratee returns `true`, or after all the iteratee functions have finished.
     * Result will be either `true` or `false` depending on the values of the async
     * tests. Invoked with (err, result).
     * @returns {Promise} a promise, if no callback provided
     * @example
     *
     * // dir1 is a directory that contains file1.txt, file2.txt
     * // dir2 is a directory that contains file3.txt, file4.txt
     * // dir3 is a directory that contains file5.txt
     * // dir4 does not exist
     *
     * // asynchronous function that checks if a file exists
     * function fileExists(file, callback) {
     *    fs.access(file, fs.constants.F_OK, (err) => {
     *        callback(null, !err);
     *    });
     * }
     *
     * // Using callbacks
     * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,
     *    function(err, result) {
     *        console.log(result);
     *        // true
     *        // result is true since some file in the list exists
     *    }
     *);
     *
     * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,
     *    function(err, result) {
     *        console.log(result);
     *        // false
     *        // result is false since none of the files exists
     *    }
     *);
     *
     * // Using Promises
     * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)
     * .then( result => {
     *     console.log(result);
     *     // true
     *     // result is true since some file in the list exists
     * }).catch( err => {
     *     console.log(err);
     * });
     *
     * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)
     * .then( result => {
     *     console.log(result);
     *     // false
     *     // result is false since none of the files exists
     * }).catch( err => {
     *     console.log(err);
     * });
     *
     * // Using async/await
     * async () => {
     *     try {
     *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);
     *         console.log(result);
     *         // true
     *         // result is true since some file in the list exists
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     * async () => {
     *     try {
     *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);
     *         console.log(result);
     *         // false
     *         // result is false since none of the files exists
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     */
    function some(coll, iteratee, callback) {
        return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)
    }
    var some$1 = awaitify(some, 3);

    /**
     * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.
     *
     * @name someLimit
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.some]{@link module:Collections.some}
     * @alias anyLimit
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {number} limit - The maximum number of async operations at a time.
     * @param {AsyncFunction} iteratee - An async truth test to apply to each item
     * in the collections in parallel.
     * The iteratee should complete with a boolean `result` value.
     * Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called as soon as any
     * iteratee returns `true`, or after all the iteratee functions have finished.
     * Result will be either `true` or `false` depending on the values of the async
     * tests. Invoked with (err, result).
     * @returns {Promise} a promise, if no callback provided
     */
    function someLimit(coll, limit, iteratee, callback) {
        return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)
    }
    var someLimit$1 = awaitify(someLimit, 4);

    /**
     * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.
     *
     * @name someSeries
     * @static
     * @memberOf module:Collections
     * @method
     * @see [async.some]{@link module:Collections.some}
     * @alias anySeries
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {AsyncFunction} iteratee - An async truth test to apply to each item
     * in the collections in series.
     * The iteratee should complete with a boolean `result` value.
     * Invoked with (item, callback).
     * @param {Function} [callback] - A callback which is called as soon as any
     * iteratee returns `true`, or after all the iteratee functions have finished.
     * Result will be either `true` or `false` depending on the values of the async
     * tests. Invoked with (err, result).
     * @returns {Promise} a promise, if no callback provided
     */
    function someSeries(coll, iteratee, callback) {
        return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)
    }
    var someSeries$1 = awaitify(someSeries, 3);

    /**
     * Sorts a list by the results of running each `coll` value through an async
     * `iteratee`.
     *
     * @name sortBy
     * @static
     * @memberOf module:Collections
     * @method
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {AsyncFunction} iteratee - An async function to apply to each item in
     * `coll`.
     * The iteratee should complete with a value to use as the sort criteria as
     * its `result`.
     * Invoked with (item, callback).
     * @param {Function} callback - A callback which is called after all the
     * `iteratee` functions have finished, or an error occurs. Results is the items
     * from the original `coll` sorted by the values returned by the `iteratee`
     * calls. Invoked with (err, results).
     * @returns {Promise} a promise, if no callback passed
     * @example
     *
     * // bigfile.txt is a file that is 251100 bytes in size
     * // mediumfile.txt is a file that is 11000 bytes in size
     * // smallfile.txt is a file that is 121 bytes in size
     *
     * // asynchronous function that returns the file size in bytes
     * function getFileSizeInBytes(file, callback) {
     *     fs.stat(file, function(err, stat) {
     *         if (err) {
     *             return callback(err);
     *         }
     *         callback(null, stat.size);
     *     });
     * }
     *
     * // Using callbacks
     * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,
     *     function(err, results) {
     *         if (err) {
     *             console.log(err);
     *         } else {
     *             console.log(results);
     *             // results is now the original array of files sorted by
     *             // file size (ascending by default), e.g.
     *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
     *         }
     *     }
     * );
     *
     * // By modifying the callback parameter the
     * // sorting order can be influenced:
     *
     * // ascending order
     * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {
     *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {
     *         if (getFileSizeErr) return callback(getFileSizeErr);
     *         callback(null, fileSize);
     *     });
     * }, function(err, results) {
     *         if (err) {
     *             console.log(err);
     *         } else {
     *             console.log(results);
     *             // results is now the original array of files sorted by
     *             // file size (ascending by default), e.g.
     *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
     *         }
     *     }
     * );
     *
     * // descending order
     * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {
     *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {
     *         if (getFileSizeErr) {
     *             return callback(getFileSizeErr);
     *         }
     *         callback(null, fileSize * -1);
     *     });
     * }, function(err, results) {
     *         if (err) {
     *             console.log(err);
     *         } else {
     *             console.log(results);
     *             // results is now the original array of files sorted by
     *             // file size (ascending by default), e.g.
     *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']
     *         }
     *     }
     * );
     *
     * // Error handling
     * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,
     *     function(err, results) {
     *         if (err) {
     *             console.log(err);
     *             // [ Error: ENOENT: no such file or directory ]
     *         } else {
     *             console.log(results);
     *         }
     *     }
     * );
     *
     * // Using Promises
     * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)
     * .then( results => {
     *     console.log(results);
     *     // results is now the original array of files sorted by
     *     // file size (ascending by default), e.g.
     *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
     * }).catch( err => {
     *     console.log(err);
     * });
     *
     * // Error handling
     * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)
     * .then( results => {
     *     console.log(results);
     * }).catch( err => {
     *     console.log(err);
     *     // [ Error: ENOENT: no such file or directory ]
     * });
     *
     * // Using async/await
     * (async () => {
     *     try {
     *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);
     *         console.log(results);
     *         // results is now the original array of files sorted by
     *         // file size (ascending by default), e.g.
     *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * })();
     *
     * // Error handling
     * async () => {
     *     try {
     *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);
     *         console.log(results);
     *     }
     *     catch (err) {
     *         console.log(err);
     *         // [ Error: ENOENT: no such file or directory ]
     *     }
     * }
     *
     */
    function sortBy (coll, iteratee, callback) {
        var _iteratee = wrapAsync(iteratee);
        return map$1(coll, (x, iterCb) => {
            _iteratee(x, (err, criteria) => {
                if (err) return iterCb(err);
                iterCb(err, {value: x, criteria});
            });
        }, (err, results) => {
            if (err) return callback(err);
            callback(null, results.sort(comparator).map(v => v.value));
        });

        function comparator(left, right) {
            var a = left.criteria, b = right.criteria;
            return a < b ? -1 : a > b ? 1 : 0;
        }
    }
    var sortBy$1 = awaitify(sortBy, 3);

    /**
     * Sets a time limit on an asynchronous function. If the function does not call
     * its callback within the specified milliseconds, it will be called with a
     * timeout error. The code property for the error object will be `'ETIMEDOUT'`.
     *
     * @name timeout
     * @static
     * @memberOf module:Utils
     * @method
     * @category Util
     * @param {AsyncFunction} asyncFn - The async function to limit in time.
     * @param {number} milliseconds - The specified time limit.
     * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)
     * to timeout Error for more information..
     * @returns {AsyncFunction} Returns a wrapped function that can be used with any
     * of the control flow functions.
     * Invoke this function with the same parameters as you would `asyncFunc`.
     * @example
     *
     * function myFunction(foo, callback) {
     *     doAsyncTask(foo, function(err, data) {
     *         // handle errors
     *         if (err) return callback(err);
     *
     *         // do some stuff ...
     *
     *         // return processed data
     *         return callback(null, data);
     *     });
     * }
     *
     * var wrapped = async.timeout(myFunction, 1000);
     *
     * // call `wrapped` as you would `myFunction`
     * wrapped({ bar: 'bar' }, function(err, data) {
     *     // if `myFunction` takes < 1000 ms to execute, `err`
     *     // and `data` will have their expected values
     *
     *     // else `err` will be an Error with the code 'ETIMEDOUT'
     * });
     */
    function timeout(asyncFn, milliseconds, info) {
        var fn = wrapAsync(asyncFn);

        return initialParams((args, callback) => {
            var timedOut = false;
            var timer;

            function timeoutCallback() {
                var name = asyncFn.name || 'anonymous';
                var error  = new Error('Callback function "' + name + '" timed out.');
                error.code = 'ETIMEDOUT';
                if (info) {
                    error.info = info;
                }
                timedOut = true;
                callback(error);
            }

            args.push((...cbArgs) => {
                if (!timedOut) {
                    callback(...cbArgs);
                    clearTimeout(timer);
                }
            });

            // setup timer and call original function
            timer = setTimeout(timeoutCallback, milliseconds);
            fn(...args);
        });
    }

    function range(size) {
        var result = Array(size);
        while (size--) {
            result[size] = size;
        }
        return result;
    }

    /**
     * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a
     * time.
     *
     * @name timesLimit
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @see [async.times]{@link module:ControlFlow.times}
     * @category Control Flow
     * @param {number} count - The number of times to run the function.
     * @param {number} limit - The maximum number of async operations at a time.
     * @param {AsyncFunction} iteratee - The async function to call `n` times.
     * Invoked with the iteration index and a callback: (n, next).
     * @param {Function} callback - see [async.map]{@link module:Collections.map}.
     * @returns {Promise} a promise, if no callback is provided
     */
    function timesLimit(count, limit, iteratee, callback) {
        var _iteratee = wrapAsync(iteratee);
        return mapLimit$1(range(count), limit, _iteratee, callback);
    }

    /**
     * Calls the `iteratee` function `n` times, and accumulates results in the same
     * manner you would use with [map]{@link module:Collections.map}.
     *
     * @name times
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @see [async.map]{@link module:Collections.map}
     * @category Control Flow
     * @param {number} n - The number of times to run the function.
     * @param {AsyncFunction} iteratee - The async function to call `n` times.
     * Invoked with the iteration index and a callback: (n, next).
     * @param {Function} callback - see {@link module:Collections.map}.
     * @returns {Promise} a promise, if no callback is provided
     * @example
     *
     * // Pretend this is some complicated async factory
     * var createUser = function(id, callback) {
     *     callback(null, {
     *         id: 'user' + id
     *     });
     * };
     *
     * // generate 5 users
     * async.times(5, function(n, next) {
     *     createUser(n, function(err, user) {
     *         next(err, user);
     *     });
     * }, function(err, users) {
     *     // we should now have 5 users
     * });
     */
    function times (n, iteratee, callback) {
        return timesLimit(n, Infinity, iteratee, callback)
    }

    /**
     * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.
     *
     * @name timesSeries
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @see [async.times]{@link module:ControlFlow.times}
     * @category Control Flow
     * @param {number} n - The number of times to run the function.
     * @param {AsyncFunction} iteratee - The async function to call `n` times.
     * Invoked with the iteration index and a callback: (n, next).
     * @param {Function} callback - see {@link module:Collections.map}.
     * @returns {Promise} a promise, if no callback is provided
     */
    function timesSeries (n, iteratee, callback) {
        return timesLimit(n, 1, iteratee, callback)
    }

    /**
     * A relative of `reduce`.  Takes an Object or Array, and iterates over each
     * element in parallel, each step potentially mutating an `accumulator` value.
     * The type of the accumulator defaults to the type of collection passed in.
     *
     * @name transform
     * @static
     * @memberOf module:Collections
     * @method
     * @category Collection
     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
     * @param {*} [accumulator] - The initial state of the transform.  If omitted,
     * it will default to an empty Object or Array, depending on the type of `coll`
     * @param {AsyncFunction} iteratee - A function applied to each item in the
     * collection that potentially modifies the accumulator.
     * Invoked with (accumulator, item, key, callback).
     * @param {Function} [callback] - A callback which is called after all the
     * `iteratee` functions have finished. Result is the transformed accumulator.
     * Invoked with (err, result).
     * @returns {Promise} a promise, if no callback provided
     * @example
     *
     * // file1.txt is a file that is 1000 bytes in size
     * // file2.txt is a file that is 2000 bytes in size
     * // file3.txt is a file that is 3000 bytes in size
     *
     * // helper function that returns human-readable size format from bytes
     * function formatBytes(bytes, decimals = 2) {
     *   // implementation not included for brevity
     *   return humanReadbleFilesize;
     * }
     *
     * const fileList = ['file1.txt','file2.txt','file3.txt'];
     *
     * // asynchronous function that returns the file size, transformed to human-readable format
     * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.
     * function transformFileSize(acc, value, key, callback) {
     *     fs.stat(value, function(err, stat) {
     *         if (err) {
     *             return callback(err);
     *         }
     *         acc[key] = formatBytes(stat.size);
     *         callback(null);
     *     });
     * }
     *
     * // Using callbacks
     * async.transform(fileList, transformFileSize, function(err, result) {
     *     if(err) {
     *         console.log(err);
     *     } else {
     *         console.log(result);
     *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]
     *     }
     * });
     *
     * // Using Promises
     * async.transform(fileList, transformFileSize)
     * .then(result => {
     *     console.log(result);
     *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]
     * }).catch(err => {
     *     console.log(err);
     * });
     *
     * // Using async/await
     * (async () => {
     *     try {
     *         let result = await async.transform(fileList, transformFileSize);
     *         console.log(result);
     *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * })();
     *
     * @example
     *
     * // file1.txt is a file that is 1000 bytes in size
     * // file2.txt is a file that is 2000 bytes in size
     * // file3.txt is a file that is 3000 bytes in size
     *
     * // helper function that returns human-readable size format from bytes
     * function formatBytes(bytes, decimals = 2) {
     *   // implementation not included for brevity
     *   return humanReadbleFilesize;
     * }
     *
     * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };
     *
     * // asynchronous function that returns the file size, transformed to human-readable format
     * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.
     * function transformFileSize(acc, value, key, callback) {
     *     fs.stat(value, function(err, stat) {
     *         if (err) {
     *             return callback(err);
     *         }
     *         acc[key] = formatBytes(stat.size);
     *         callback(null);
     *     });
     * }
     *
     * // Using callbacks
     * async.transform(fileMap, transformFileSize, function(err, result) {
     *     if(err) {
     *         console.log(err);
     *     } else {
     *         console.log(result);
     *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }
     *     }
     * });
     *
     * // Using Promises
     * async.transform(fileMap, transformFileSize)
     * .then(result => {
     *     console.log(result);
     *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }
     * }).catch(err => {
     *     console.log(err);
     * });
     *
     * // Using async/await
     * async () => {
     *     try {
     *         let result = await async.transform(fileMap, transformFileSize);
     *         console.log(result);
     *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }
     *     }
     *     catch (err) {
     *         console.log(err);
     *     }
     * }
     *
     */
    function transform (coll, accumulator, iteratee, callback) {
        if (arguments.length <= 3 && typeof accumulator === 'function') {
            callback = iteratee;
            iteratee = accumulator;
            accumulator = Array.isArray(coll) ? [] : {};
        }
        callback = once(callback || promiseCallback());
        var _iteratee = wrapAsync(iteratee);

        eachOf$1(coll, (v, k, cb) => {
            _iteratee(accumulator, v, k, cb);
        }, err => callback(err, accumulator));
        return callback[PROMISE_SYMBOL]
    }

    /**
     * It runs each task in series but stops whenever any of the functions were
     * successful. If one of the tasks were successful, the `callback` will be
     * passed the result of the successful task. If all tasks fail, the callback
     * will be passed the error and result (if any) of the final attempt.
     *
     * @name tryEach
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @category Control Flow
     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to
     * run, each function is passed a `callback(err, result)` it must call on
     * completion with an error `err` (which can be `null`) and an optional `result`
     * value.
     * @param {Function} [callback] - An optional callback which is called when one
     * of the tasks has succeeded, or all have failed. It receives the `err` and
     * `result` arguments of the last attempt at completing the `task`. Invoked with
     * (err, results).
     * @returns {Promise} a promise, if no callback is passed
     * @example
     * async.tryEach([
     *     function getDataFromFirstWebsite(callback) {
     *         // Try getting the data from the first website
     *         callback(err, data);
     *     },
     *     function getDataFromSecondWebsite(callback) {
     *         // First website failed,
     *         // Try getting the data from the backup website
     *         callback(err, data);
     *     }
     * ],
     * // optional callback
     * function(err, results) {
     *     Now do something with the data.
     * });
     *
     */
    function tryEach(tasks, callback) {
        var error = null;
        var result;
        return eachSeries$1(tasks, (task, taskCb) => {
            wrapAsync(task)((err, ...args) => {
                if (err === false) return taskCb(err);

                if (args.length < 2) {
                    [result] = args;
                } else {
                    result = args;
                }
                error = err;
                taskCb(err ? null : {});
            });
        }, () => callback(error, result));
    }

    var tryEach$1 = awaitify(tryEach);

    /**
     * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,
     * unmemoized form. Handy for testing.
     *
     * @name unmemoize
     * @static
     * @memberOf module:Utils
     * @method
     * @see [async.memoize]{@link module:Utils.memoize}
     * @category Util
     * @param {AsyncFunction} fn - the memoized function
     * @returns {AsyncFunction} a function that calls the original unmemoized function
     */
    function unmemoize(fn) {
        return (...args) => {
            return (fn.unmemoized || fn)(...args);
        };
    }

    /**
     * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when
     * stopped, or an error occurs.
     *
     * @name whilst
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @category Control Flow
     * @param {AsyncFunction} test - asynchronous truth test to perform before each
     * execution of `iteratee`. Invoked with ().
     * @param {AsyncFunction} iteratee - An async function which is called each time
     * `test` passes. Invoked with (callback).
     * @param {Function} [callback] - A callback which is called after the test
     * function has failed and repeated execution of `iteratee` has stopped. `callback`
     * will be passed an error and any arguments passed to the final `iteratee`'s
     * callback. Invoked with (err, [results]);
     * @returns {Promise} a promise, if no callback is passed
     * @example
     *
     * var count = 0;
     * async.whilst(
     *     function test(cb) { cb(null, count < 5); },
     *     function iter(callback) {
     *         count++;
     *         setTimeout(function() {
     *             callback(null, count);
     *         }, 1000);
     *     },
     *     function (err, n) {
     *         // 5 seconds have passed, n = 5
     *     }
     * );
     */
    function whilst(test, iteratee, callback) {
        callback = onlyOnce(callback);
        var _fn = wrapAsync(iteratee);
        var _test = wrapAsync(test);
        var results = [];

        function next(err, ...rest) {
            if (err) return callback(err);
            results = rest;
            if (err === false) return;
            _test(check);
        }

        function check(err, truth) {
            if (err) return callback(err);
            if (err === false) return;
            if (!truth) return callback(null, ...results);
            _fn(next);
        }

        return _test(check);
    }
    var whilst$1 = awaitify(whilst, 3);

    /**
     * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when
     * stopped, or an error occurs. `callback` will be passed an error and any
     * arguments passed to the final `iteratee`'s callback.
     *
     * The inverse of [whilst]{@link module:ControlFlow.whilst}.
     *
     * @name until
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @see [async.whilst]{@link module:ControlFlow.whilst}
     * @category Control Flow
     * @param {AsyncFunction} test - asynchronous truth test to perform before each
     * execution of `iteratee`. Invoked with (callback).
     * @param {AsyncFunction} iteratee - An async function which is called each time
     * `test` fails. Invoked with (callback).
     * @param {Function} [callback] - A callback which is called after the test
     * function has passed and repeated execution of `iteratee` has stopped. `callback`
     * will be passed an error and any arguments passed to the final `iteratee`'s
     * callback. Invoked with (err, [results]);
     * @returns {Promise} a promise, if a callback is not passed
     *
     * @example
     * const results = []
     * let finished = false
     * async.until(function test(cb) {
     *     cb(null, finished)
     * }, function iter(next) {
     *     fetchPage(url, (err, body) => {
     *         if (err) return next(err)
     *         results = results.concat(body.objects)
     *         finished = !!body.next
     *         next(err)
     *     })
     * }, function done (err) {
     *     // all pages have been fetched
     * })
     */
    function until(test, iteratee, callback) {
        const _test = wrapAsync(test);
        return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);
    }

    /**
     * Runs the `tasks` array of functions in series, each passing their results to
     * the next in the array. However, if any of the `tasks` pass an error to their
     * own callback, the next function is not executed, and the main `callback` is
     * immediately called with the error.
     *
     * @name waterfall
     * @static
     * @memberOf module:ControlFlow
     * @method
     * @category Control Flow
     * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}
     * to run.
     * Each function should complete with any number of `result` values.
     * The `result` values will be passed as arguments, in order, to the next task.
     * @param {Function} [callback] - An optional callback to run once all the
     * functions have completed. This will be passed the results of the last task's
     * callback. Invoked with (err, [results]).
     * @returns undefined
     * @example
     *
     * async.waterfall([
     *     function(callback) {
     *         callback(null, 'one', 'two');
     *     },
     *     function(arg1, arg2, callback) {
     *         // arg1 now equals 'one' and arg2 now equals 'two'
     *         callback(null, 'three');
     *     },
     *     function(arg1, callback) {
     *         // arg1 now equals 'three'
     *         callback(null, 'done');
     *     }
     * ], function (err, result) {
     *     // result now equals 'done'
     * });
     *
     * // Or, with named functions:
     * async.waterfall([
     *     myFirstFunction,
     *     mySecondFunction,
     *     myLastFunction,
     * ], function (err, result) {
     *     // result now equals 'done'
     * });
     * function myFirstFunction(callback) {
     *     callback(null, 'one', 'two');
     * }
     * function mySecondFunction(arg1, arg2, callback) {
     *     // arg1 now equals 'one' and arg2 now equals 'two'
     *     callback(null, 'three');
     * }
     * function myLastFunction(arg1, callback) {
     *     // arg1 now equals 'three'
     *     callback(null, 'done');
     * }
     */
    function waterfall (tasks, callback) {
        callback = once(callback);
        if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));
        if (!tasks.length) return callback();
        var taskIndex = 0;

        function nextTask(args) {
            var task = wrapAsync(tasks[taskIndex++]);
            task(...args, onlyOnce(next));
        }

        function next(err, ...args) {
            if (err === false) return
            if (err || taskIndex === tasks.length) {
                return callback(err, ...args);
            }
            nextTask(args);
        }

        nextTask([]);
    }

    var waterfall$1 = awaitify(waterfall);

    /**
     * An "async function" in the context of Async is an asynchronous function with
     * a variable number of parameters, with the final parameter being a callback.
     * (`function (arg1, arg2, ..., callback) {}`)
     * The final callback is of the form `callback(err, results...)`, which must be
     * called once the function is completed.  The callback should be called with a
     * Error as its first argument to signal that an error occurred.
     * Otherwise, if no error occurred, it should be called with `null` as the first
     * argument, and any additional `result` arguments that may apply, to signal
     * successful completion.
     * The callback must be called exactly once, ideally on a later tick of the
     * JavaScript event loop.
     *
     * This type of function is also referred to as a "Node-style async function",
     * or a "continuation passing-style function" (CPS). Most of the methods of this
     * library are themselves CPS/Node-style async functions, or functions that
     * return CPS/Node-style async functions.
     *
     * Wherever we accept a Node-style async function, we also directly accept an
     * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.
     * In this case, the `async` function will not be passed a final callback
     * argument, and any thrown error will be used as the `err` argument of the
     * implicit callback, and the return value will be used as the `result` value.
     * (i.e. a `rejected` of the returned Promise becomes the `err` callback
     * argument, and a `resolved` value becomes the `result`.)
     *
     * Note, due to JavaScript limitations, we can only detect native `async`
     * functions and not transpilied implementations.
     * Your environment must have `async`/`await` support for this to work.
     * (e.g. Node > v7.6, or a recent version of a modern browser).
     * If you are using `async` functions through a transpiler (e.g. Babel), you
     * must still wrap the function with [asyncify]{@link module:Utils.asyncify},
     * because the `async function` will be compiled to an ordinary function that
     * returns a promise.
     *
     * @typedef {Function} AsyncFunction
     * @static
     */

    var index = {
        apply,
        applyEach: applyEach$1,
        applyEachSeries,
        asyncify,
        auto,
        autoInject,
        cargo,
        cargoQueue: cargo$1,
        compose,
        concat: concat$1,
        concatLimit: concatLimit$1,
        concatSeries: concatSeries$1,
        constant,
        detect: detect$1,
        detectLimit: detectLimit$1,
        detectSeries: detectSeries$1,
        dir,
        doUntil,
        doWhilst: doWhilst$1,
        each,
        eachLimit: eachLimit$2,
        eachOf: eachOf$1,
        eachOfLimit: eachOfLimit$2,
        eachOfSeries: eachOfSeries$1,
        eachSeries: eachSeries$1,
        ensureAsync,
        every: every$1,
        everyLimit: everyLimit$1,
        everySeries: everySeries$1,
        filter: filter$1,
        filterLimit: filterLimit$1,
        filterSeries: filterSeries$1,
        forever: forever$1,
        groupBy,
        groupByLimit: groupByLimit$1,
        groupBySeries,
        log,
        map: map$1,
        mapLimit: mapLimit$1,
        mapSeries: mapSeries$1,
        mapValues,
        mapValuesLimit: mapValuesLimit$1,
        mapValuesSeries,
        memoize,
        nextTick,
        parallel,
        parallelLimit,
        priorityQueue,
        queue: queue$1,
        race: race$1,
        reduce: reduce$1,
        reduceRight,
        reflect,
        reflectAll,
        reject: reject$2,
        rejectLimit: rejectLimit$1,
        rejectSeries: rejectSeries$1,
        retry,
        retryable,
        seq,
        series,
        setImmediate: setImmediate$1,
        some: some$1,
        someLimit: someLimit$1,
        someSeries: someSeries$1,
        sortBy: sortBy$1,
        timeout,
        times,
        timesLimit,
        timesSeries,
        transform,
        tryEach: tryEach$1,
        unmemoize,
        until,
        waterfall: waterfall$1,
        whilst: whilst$1,

        // aliases
        all: every$1,
        allLimit: everyLimit$1,
        allSeries: everySeries$1,
        any: some$1,
        anyLimit: someLimit$1,
        anySeries: someSeries$1,
        find: detect$1,
        findLimit: detectLimit$1,
        findSeries: detectSeries$1,
        flatMap: concat$1,
        flatMapLimit: concatLimit$1,
        flatMapSeries: concatSeries$1,
        forEach: each,
        forEachSeries: eachSeries$1,
        forEachLimit: eachLimit$2,
        forEachOf: eachOf$1,
        forEachOfSeries: eachOfSeries$1,
        forEachOfLimit: eachOfLimit$2,
        inject: reduce$1,
        foldl: reduce$1,
        foldr: reduceRight,
        select: filter$1,
        selectLimit: filterLimit$1,
        selectSeries: filterSeries$1,
        wrapSync: asyncify,
        during: whilst$1,
        doDuring: doWhilst$1
    };

    exports.default = index;
    exports.apply = apply;
    exports.applyEach = applyEach$1;
    exports.applyEachSeries = applyEachSeries;
    exports.asyncify = asyncify;
    exports.auto = auto;
    exports.autoInject = autoInject;
    exports.cargo = cargo;
    exports.cargoQueue = cargo$1;
    exports.compose = compose;
    exports.concat = concat$1;
    exports.concatLimit = concatLimit$1;
    exports.concatSeries = concatSeries$1;
    exports.constant = constant;
    exports.detect = detect$1;
    exports.detectLimit = detectLimit$1;
    exports.detectSeries = detectSeries$1;
    exports.dir = dir;
    exports.doUntil = doUntil;
    exports.doWhilst = doWhilst$1;
    exports.each = each;
    exports.eachLimit = eachLimit$2;
    exports.eachOf = eachOf$1;
    exports.eachOfLimit = eachOfLimit$2;
    exports.eachOfSeries = eachOfSeries$1;
    exports.eachSeries = eachSeries$1;
    exports.ensureAsync = ensureAsync;
    exports.every = every$1;
    exports.everyLimit = everyLimit$1;
    exports.everySeries = everySeries$1;
    exports.filter = filter$1;
    exports.filterLimit = filterLimit$1;
    exports.filterSeries = filterSeries$1;
    exports.forever = forever$1;
    exports.groupBy = groupBy;
    exports.groupByLimit = groupByLimit$1;
    exports.groupBySeries = groupBySeries;
    exports.log = log;
    exports.map = map$1;
    exports.mapLimit = mapLimit$1;
    exports.mapSeries = mapSeries$1;
    exports.mapValues = mapValues;
    exports.mapValuesLimit = mapValuesLimit$1;
    exports.mapValuesSeries = mapValuesSeries;
    exports.memoize = memoize;
    exports.nextTick = nextTick;
    exports.parallel = parallel;
    exports.parallelLimit = parallelLimit;
    exports.priorityQueue = priorityQueue;
    exports.queue = queue$1;
    exports.race = race$1;
    exports.reduce = reduce$1;
    exports.reduceRight = reduceRight;
    exports.reflect = reflect;
    exports.reflectAll = reflectAll;
    exports.reject = reject$2;
    exports.rejectLimit = rejectLimit$1;
    exports.rejectSeries = rejectSeries$1;
    exports.retry = retry;
    exports.retryable = retryable;
    exports.seq = seq;
    exports.series = series;
    exports.setImmediate = setImmediate$1;
    exports.some = some$1;
    exports.someLimit = someLimit$1;
    exports.someSeries = someSeries$1;
    exports.sortBy = sortBy$1;
    exports.timeout = timeout;
    exports.times = times;
    exports.timesLimit = timesLimit;
    exports.timesSeries = timesSeries;
    exports.transform = transform;
    exports.tryEach = tryEach$1;
    exports.unmemoize = unmemoize;
    exports.until = until;
    exports.waterfall = waterfall$1;
    exports.whilst = whilst$1;
    exports.all = every$1;
    exports.allLimit = everyLimit$1;
    exports.allSeries = everySeries$1;
    exports.any = some$1;
    exports.anyLimit = someLimit$1;
    exports.anySeries = someSeries$1;
    exports.find = detect$1;
    exports.findLimit = detectLimit$1;
    exports.findSeries = detectSeries$1;
    exports.flatMap = concat$1;
    exports.flatMapLimit = concatLimit$1;
    exports.flatMapSeries = concatSeries$1;
    exports.forEach = each;
    exports.forEachSeries = eachSeries$1;
    exports.forEachLimit = eachLimit$2;
    exports.forEachOf = eachOf$1;
    exports.forEachOfSeries = eachOfSeries$1;
    exports.forEachOfLimit = eachOfLimit$2;
    exports.inject = reduce$1;
    exports.foldl = reduce$1;
    exports.foldr = reduceRight;
    exports.select = filter$1;
    exports.selectLimit = filterLimit$1;
    exports.selectSeries = filterSeries$1;
    exports.wrapSync = asyncify;
    exports.during = whilst$1;
    exports.doDuring = doWhilst$1;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(181).setImmediate, __webpack_require__(168)))

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(182);
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(132)))

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(132), __webpack_require__(168)))

/***/ })
/******/ ]);
});